/*
 *  This file was generated by wCMFGenerator 3.0.0 from src/requirements.uml on Mon Jan 12 18:10:09 CET 2009. 
  Manual modifications should be placed inside the protected regions.
 * Copyright (c) 2009 The Olympos Development Team.
 *
 * http://sourceforge.net/projects/olympos/
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */
Ext.namespace("cwm");

cwm.FigureClass = function() {
	cwm.FigureClass.superclass.constructor.call(this);
	
	this.uwmClassName = "Figure";
	this.instanceClassName = "cwm.Figure";
	this.treeIcon = "FigureFigure";
	this.figureIcon = "FigureFigure";
	this.figureClass = "uwm.graphics.figure.RectangleFigure";
	this.description = " A figure is the graphical reppresentation of a node can be linked with manies diagrams.";
	this.helpUrl = "help/index.html#Figure|outline";
	this.defaultLabel = "New Figure";
	this.labelProperties = {
		Name: true
	};

	this.gridTabIconClass = "FigureTab";
	this.gridTabTip = "Shows all <b>Figure</b> within selected scope";
	this.gridFields = [{
		name: "oid",
		mapping: "oid"
	}, {
		name: "Label",
		mapping: "Label"
	}];
	this.gridColumns = [{
		header: "Label",
		dataIndex: "Label",
		sortable: true
	}];
	
	this.connectionInfo = {
			
			, 								"ChiBase": {
			label: "is graphical represented by",
			invert: true,
			connectionType:  'association'
		}
	
		,					"Diagram": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ActivityDecision": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ActivityReceive": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ActivitySend": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"Activity": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ActivityInitial": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ActivityFinal": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiBusinessProcess": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiBusinessUseCase": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiBusinessUseCaseCore": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"Actor": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiBusinessPartner": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiGoal": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiRequirement": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiFeature": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiIssue": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiController": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiNode": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiValue": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiView": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiWorker": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiBusinessPartnerActive": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	
		,					"ChiBusinessPartnerPassive": {
			label: "",
			invert: true,
			connectionType:  'association'
		}
	

	};
}

Ext.extend(cwm.FigureClass, uwm.model.ModelClass);

cwm.FigureClass.prototype.getPropertyForm = function(modelNode) {
	return new uwm.ui.PropertyForm({
		items: [	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	,	new uwm.ui.TextField({
fieldLabel: 'BackgroundColor',
			name: 'BackgroundColor',
			modelNode: modelNode,
		}) 
,	new uwm.ui.TextField({
fieldLabel: 'ForegroundColor',
			name: 'ForegroundColor',
			modelNode: modelNode,
		}) 
,	new uwm.ui.TextField({
fieldLabel: 'GID',
			name: 'GID',
			modelNode: modelNode,
		}) 
,	new uwm.ui.TextField({
fieldLabel: 'Height',
			name: 'Height',
			modelNode: modelNode,
		}) 
,	new uwm.ui.TextField({
fieldLabel: 'PositionY',
			name: 'PositionY',
			modelNode: modelNode,
		}) 
,	new uwm.ui.TextField({
fieldLabel: 'PositionX',
			name: 'PositionX',
			modelNode: modelNode,
		}) 
,	new uwm.ui.TextField({
fieldLabel: 'Width',
			name: 'Width',
			modelNode: modelNode,
		}) 
,	new uwm.ui.TextField({
fieldLabel: 'created',
			name: 'created',
			modelNode: modelNode,
			readOnly: true		}) 
,	new uwm.ui.TextField({
fieldLabel: 'creator',
			name: 'creator',
			modelNode: modelNode,
			readOnly: true		}) 
,	new uwm.ui.TextField({
fieldLabel: 'last_editor',
			name: 'last_editor',
			modelNode: modelNode,
			readOnly: true		}) 
,	new uwm.ui.TextField({
fieldLabel: 'modified',
			name: 'modified',
			modelNode: modelNode,
			readOnly: true		}) 
]
	});
}

cwm.FigureClass.prototype.getGraphics = function(label, figure) {
	return new uwm.graphics.figure.ImageFigure(label, figure, "../application/images/Figure.PNG", 96, 95, 96, 95);
}

uwm.model.ModelNodeClassContainer.getInstance().registerClass(new cwm.FigureClass());

	