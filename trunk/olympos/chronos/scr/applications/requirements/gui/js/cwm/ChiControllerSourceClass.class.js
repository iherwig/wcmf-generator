/*
 *  This file was generated by wCMFGenerator 3.0.0 from src/requirements.uml on Mon Jan 12 18:10:08 CET 2009. 
  Manual modifications should be placed inside the protected regions.
 * Copyright (c) 2009 The Olympos Development Team.
 *
 * http://sourceforge.net/projects/olympos/
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */
Ext.namespace("cwm");

cwm.ChiControllerSourceClass = function() {
	cwm.ChiControllerSourceClass.superclass.constructor.call(this);
	
	this.uwmClassName = "ChiControllerSource";
	this.instanceClassName = "cwm.ChiControllerSource";
	this.treeIcon = "FigureChiControllerSource";
	this.figureIcon = "FigureChiControllerSource";
	this.figureClass = "uwm.graphics.figure.RectangleFigure";
	this.description = " A ChiController, Views and Associations define the application flow. A controller represent the Business logic where a certain flow is physical implemented.";
	this.helpUrl = "help/index.html#ChiControllerSource|outline";
	this.defaultLabel = "New ChiControllerSource";
	this.labelProperties = {
		Name: true
	};

	this.gridTabIconClass = "ChiControllerSourceTab";
	this.gridTabTip = "Shows all <b>ChiControllerSource</b> within selected scope";
	this.gridFields = [{
		name: "oid",
		mapping: "oid"
	}, {
		name: "Label",
		mapping: "Label"
	}];
	this.gridColumns = [{
		header: "Label",
		dataIndex: "Label",
		sortable: true
	}];
	
	this.connectionInfo = {
	
		"ChiNode": {
			label: "instantiates",
			invert: true,
			connectionType: 'aggregation'
		}		,				
		"NMChiControllerChiController": {
			label: "",
			invert: true,
			connectionType: 'aggregation'
		}		,				
		"NMChiControllerChiController": {
			label: "",
			invert: true,
			connectionType: 'aggregation'
		}					
	};
}

Ext.extend(cwm.ChiControllerSourceClass, uwm.model.ModelClass);

cwm.ChiControllerSourceClass.prototype.getPropertyForm = function(modelNode) {
	return new uwm.property.PropertyForm({
		items: [new uwm.property.TextField({
			fieldLabel: 'Alias',
			name: 'Alias',
			modelNode: modelNode
		}) ,	new uwm.property.TextField({
			fieldLabel: 'Version',
			name: 'Version',
			modelNode: modelNode
		}) ,	new uwm.property.TextField({
			fieldLabel: 'Name',
			name: 'Name',
			modelNode: modelNode
		}) ,	new uwm.property.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			modelNode: modelNode
		}) ,	new uwm.property.TextField({
			fieldLabel: 'created',
			name: 'created',
			modelNode: modelNode,
			readOnly: true		
		}) ,	new uwm.property.TextField({
			fieldLabel: 'creator',
			name: 'creator',
			modelNode: modelNode,
			readOnly: true		
		}) ,	new uwm.property.TextField({
			fieldLabel: 'last_editor',
			name: 'last_editor',
			modelNode: modelNode,
			readOnly: true		
		}) ,	new uwm.property.TextField({
			fieldLabel: 'modified',
			name: 'modified',
			modelNode: modelNode,
			readOnly: true		
		}) ]
	});
}

cwm.ChiControllerSourceClass.prototype.getGraphics = function(label, figure) {
	return new uwm.graphics.figure.ImageFigure(label, figure, "../application/images/ChiControllerSource.PNG", 96, 95, 96, 95);
}

uwm.model.ModelNodeClassContainer.getInstance().registerClass(new cwm.ChiControllerSourceClass());

	