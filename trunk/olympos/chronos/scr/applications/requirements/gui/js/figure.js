
/*
 This file was generated by wCMFGenerator 2.6.1.0016 from model/requirements.xmi on 02.09.08 21:48.
 Manual modifications should be placed inside the protected regions.
 developer: Giuseppe Platania
 Version: 1.0
 Class: class.ChiGoal.js
 Description: a Measurable scope that the enterprise wants to achieve.
 */
cwm.figure.ChiGoal = function(label, oid, parentoids, childoids){

	//Changed: cwm --> uwm
	uwm.figure.RectFigure.call(this, "ChiGoal", label, oid, parentoids, childoids);
}

cwm.figure.ChiGoal.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiGoal.prototype.type = "cwm.figure.ChiGoal";

//Changed 2008-09-03: Added function
cwm.figure.ChiGoal.prototype.getDescription = function(){
	return "A measurable scope that the enterprise wants to achieve.";
}

//Changed 2008-09-04: Added function
cwm.figure.ChiGoal.prototype.getLabel = function(newLabels){
	return newLabels.Name;
}

//Changed 2008-09-04: Added function
cwm.figure.ChiGoal.prototype.setRecordLabel = function(record, newLabels){
	record.set("Name", newLabels.Name);
}

cwm.figure.ChiGoal.prototype.getGrid = function(store){
	return new Ext.grid.GridPanel({
		id: "GridChiGoal",
		iconCls: "FigureGraphic FigureChiGoal",
		layout: "fit",
		columns: [{
			header: "ChiGoal",
			dataIndex: "Name",
			sortable: true
		}, {
			header: "parentoids",
			dataIndex: "parentoids",
			hidden: true,
			hideable: false
		}, {
			header: "childoids",
			dataIndex: "childoids",
			hidden: true,
			hideable: false
		}],
		store: store,
		enableDragDrop: true,
		selModel: new Ext.grid.RowSelectionModel({
			singleSelect: true
		}),
		ddGroup: "gridDDGroup",
		uwmClassName: "ChiGoal",
		listeners: {
			cellclick: function(grid, rowIndex, columnIndex, e){
				uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
			},
			rowcontextmenu: function(grid, rowIndex, e){
				var node = grid.getStore().getAt(rowIndex);
				
				var contextMenu = new Ext.menu.Menu({
					items: [new Ext.menu.Item({
						text: "Show in diagram",
						handler: function(item, e){
							var oid = node.id;
							uwm.showInDiagram(oid);
						},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
						//Change 2008-09-04: Added menuitem
					}), new Ext.menu.Item({
						text: "Show in Hierarchy",
						handler: function(item, e){
							var oid = node.id;

							uwm.showInHierarchy(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							//Changed 2008-09-04: Added "ChiGoal"
							uwm.deleteFigureFromModel("ChiGoal", record.id);
						}
					}]
				});
				
				//Change 2008-09-03
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);
				
				e.preventDefault();
			}
			
			
		}
	});
}


cwm.figure.ChiGoal.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiGoal"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name"
			}, {
				name: "parentoids",
				//Change: removed properties.
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				//Change: removed properties.
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiGoal.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
		"change": function(field, newValue, oldValue){
			uwm.fieldChanged(field, newValue, oldValue, oid);
		}
	};
	var htmlListeners = {
		"sync": function(field, html){
			field.contentChanged = true;
		},
		"beforedestroy": function(field){
			if (field.contentChanged) {
				uwm.fieldChanged(field, field.getValue(), null, oid);
			}
		}
	};
	var form = new Ext.FormPanel({
		oid: oid,
		labelWidth: 90,
		frame: true,
		labelAlign: "top",
		title: 'ChiGoal Edit View',
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [{
			fieldLabel: 'Priority',
			name: 'Priority',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Value_Name',
			name: 'Value_Name',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Value_ammount',
			name: 'Value_ammount',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Value_Goal',
			name: 'Value_Goal',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Alias',
			name: 'Alias',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Version',
			name: 'Version',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Name',
			name: 'Name',
			
			inputType: 'textfield',
			listeners: {
				"change": function(field, newValue, oldValue){
					uwm.fieldChanged(field, newValue, oldValue, oid);
					uwm.updateElementDisplay(oid, "ChiGoal", "labelChange", {
						Name: newValue,
					});
				}
			}
		}, // TODO check this manually
 new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,
			listeners: htmlListeners
			//Change: removed one comma
		}), {
			fieldLabel: 'created',
			name: 'created',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'creator',
			name: 'creator',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'last_editor',
			name: 'last_editor',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'modified',
			name: 'modified',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();
	
	
	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
	}, "Loading properties", function(data){
		var realForm = form.getForm();
		
		realForm.findField("Priority").setValue(data.node.values[1].Priority);
		realForm.findField("Value_Name").setValue(data.node.values[1].Value_Name);
		realForm.findField("Value_ammount").setValue(data.node.values[1].Value_ammount);
		realForm.findField("Value_Goal").setValue(data.node.values[1].Value_Goal);
		realForm.findField("Alias").setValue(data.node.values[1].Alias);
		realForm.findField("Version").setValue(data.node.values[1].Version);
		realForm.findField("Name").setValue(data.node.values[1].Name);
		realForm.findField("Notes").setValue(data.node.values[1].Notes);
		realForm.findField("created").setValue(data.node.values[1].created);
		realForm.findField("creator").setValue(data.node.values[1].creator);
		realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
		realForm.findField("modified").setValue(data.node.values[1].modified);
	});
};
cwm.figure.ChiGoal.prototype.getConstraints = function(){
	return {
	

		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "parent"
		},

		ChiRequirement: {
			label: "defines",
			inverse: true,
			ConnectionType: "aggregation",
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "child"
		},
		
		ChiGoal: {
			label: "contains",
			inverse: true,
			ConnectionType: "aggregation",
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "child"
		}
	
	};
}


/*
 This file was generated by wCMFGenerator 2.6.1.0019 from model/requirements.xmi on 04.09.08 16:02.
 Manual modifications should be placed inside the protected regions.
 developer: Giuseppe Platania
 Version: 1.0
 Class: class.ChiRequirement.js
 Description: A Business guide line about the Enterprise or the project.
 */
cwm.figure.ChiRequirement = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiRequirement", label, oid, parentoids, childoids);
}

cwm.figure.ChiRequirement.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiRequirement.prototype.type = "cwm.figure.ChiRequirement";

cwm.figure.ChiRequirement.prototype.getDescription = function(){
	return "A Business guide line about the Enterprise or the project.";
}

cwm.figure.ChiRequirement.prototype.getLabel = function(newLabels){
	return newLabels.Name + " - " + newLabels.Priority;
}

cwm.figure.ChiRequirement.prototype.setRecordLabel = function(record, newLabels){
	record.set("Name", newLabels.Name);
	record.set("Priority", newLabels.Priority);
}


cwm.figure.ChiRequirement.prototype.getGrid = function(store){
	return new Ext.grid.GridPanel({
		id: "GridChiRequirement",
		iconCls: "FigureGraphic FigureChiRequirement",
		layout: "fit",
		columns: [{
			header: "Name",
			dataIndex: "Name",
			sortable: true
		}, {
			header: "Priority",
			dataIndex: "Priority",
			sortable: true
		}, {
			header: "parentoids",
			dataIndex: "parentoids",
			hidden: true,
			hideable: false
		}, {
			header: "childoids",
			dataIndex: "childoids",
			hidden: true,
			hideable: false
		}],
		store: store,
		enableDragDrop: true,
		selModel: new Ext.grid.RowSelectionModel({
			singleSelect: true
		}),
		ddGroup: "gridDDGroup",
		uwmClassName: "ChiRequirement",
		listeners: {
			cellclick: function(grid, rowIndex, columnIndex, e){
				uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
			},
			cellcontextmenu: function(grid, rowIndex, columnIndex, e){
				var node = grid.getStore().getAt(rowIndex);
				
				var contextMenu = new Ext.menu.Menu({
					items: [new Ext.menu.Item({
						text: "Show in diagram",
						handler: function(item, e){
							var oid = node.id;
							uwm.showInDiagram(oid);
						},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
						//Change 2008-09-04: Added menuitem
					}), new Ext.menu.Item({
						text: "Show in Hierarchy",
						handler: function(item, e){
							var oid = node.id;

							uwm.showInHierarchy(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel("ChiRequirement", record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiRequirement.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiRequirement"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name"
			}, {
				name: "Priority",
				mapping: "values[1].Priority"
			}, {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiRequirement.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
		"change": function(field, newValue, oldValue){
			uwm.fieldChanged(field, newValue, oldValue, oid);
			uwm.updateElementDisplay(oid, "ChiRequirement")
		}
	};
	var htmlListeners = {
		"sync": function(field, html){
			field.contentChanged = true;
		},
		"beforedestroy": function(field){
			if (field.contentChanged) {
				uwm.fieldChanged(field, field.getValue(), null, oid);
			}
		}
	};
	//Changed 2008-11-23: Added comboListeners
	var comboListeners = {
		"change": function(field, newValue, oldValue){
			uwm.fieldChanged(field, newValue, oldValue, oid);
			uwm.updateElementDisplay(oid, "ChiRequirement")
		},
		"render": function(self){
			self.store.load();
		}
	};
	//End Change
	var form = new Ext.FormPanel({
		oid: oid,
		labelWidth: 90,
		frame: true,
		labelAlign: "top",
		title: 'ChiRequirement Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [new Ext.form.ComboBox({
			fieldLabel: 'reqType',
			id: 'IDreqType',
			name: 'reqType',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiRequirementType"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			//Changed 2008-11-23: Changed to comboListener
			listeners: comboListeners
		}), {
			fieldLabel: 'Priority',
			name: 'Priority',
			id: 'IDPriority',
			
			inputType: 'textfield',
			listeners: {
				"change": function(field, newValue, oldValue){
					uwm.fieldChanged(field, newValue, oldValue, oid);
					uwm.updateElementDisplay(oid, "ChiRequirement", "labelChange", {
						Priority: newValue,
						Name: form.getForm().findField("Name").getValue()
					});
				}
			}
		}, new Ext.form.ComboBox({
			fieldLabel: 'Author',
			id: 'IDAuthor',
			name: 'Author',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiAuthors"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			//Changed 2008-11-23: Changed to comboListener
			listeners: comboListeners
		}), new Ext.form.ComboBox({
			fieldLabel: 'Proofreader',
			id: 'IDProofreader',
			name: 'Proofreader',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiAuthors"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			//Changed 2008-11-23: Changed to comboListener
			listeners: comboListeners
		}), new Ext.form.ComboBox({
			fieldLabel: 'Status',
			id: 'IDStatus',
			name: 'Status',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiRequirementStatus"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			//Changed 2008-11-23: Changed to comboListener
			listeners: comboListeners
		}), {
			fieldLabel: 'Alias',
			name: 'Alias',
			id: 'IDAlias',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Version',
			name: 'Version',
			id: 'IDVersion',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Name',
			name: 'Name',
			id: 'IDName',
			
			inputType: 'textfield',
			listeners: {
				"change": function(field, newValue, oldValue){
					uwm.fieldChanged(field, newValue, oldValue, oid);
					uwm.updateElementDisplay(oid, "ChiRequirement", "labelChange", {
						Priority: form.getForm().findField("Priority").getValue(),
						Name: newValue
					});
				}
			}
		}, // TODO check this manually
 new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,
			listeners: htmlListeners
		}), {
			fieldLabel: 'created',
			name: 'created',
			id: 'IDcreated',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'creator',
			name: 'creator',
			id: 'IDcreator',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'last_editor',
			name: 'last_editor',
			id: 'IDlast_editor',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'modified',
			name: 'modified',
			id: 'IDmodified',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();
	new Ext.ToolTip({
		target: 'IDPriority',
		html: "A priority in %. Requirements are ordered by priority."
	});
	new Ext.ToolTip({
		target: 'IDAuthor',
		html: "This requirement's author's name and role in the project"
	});
	new Ext.ToolTip({
		target: 'IDProofreader',
		html: "Each requirement needs to be confirmed.This requirement's proofreader's name and role in the project"
	});
	
	
	
	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
	}, "Loading properties", function(data){
		var realForm = form.getForm();
		
		realForm.findField("reqType").setValue(data.node.values[1].reqType);
		realForm.findField("Priority").setValue(data.node.values[1].Priority);
		realForm.findField("Author").setValue(data.node.values[1].Author);
		realForm.findField("Proofreader").setValue(data.node.values[1].Proofreader);
		realForm.findField("Status").setValue(data.node.values[1].Status);
		realForm.findField("Alias").setValue(data.node.values[1].Alias);
		realForm.findField("Version").setValue(data.node.values[1].Version);
		realForm.findField("Name").setValue(data.node.values[1].Name);
		realForm.findField("Notes").setValue(data.node.values[1].Notes);
		realForm.findField("created").setValue(data.node.values[1].created);
		realForm.findField("creator").setValue(data.node.values[1].creator);
		realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
		realForm.findField("modified").setValue(data.node.values[1].modified);
	});
};
cwm.figure.ChiRequirement.prototype.getConstraints = function(){
	return {
	
		Package: {
			label: "Contains",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "parent"
		},

		ChiGoal: {
			label: "specify",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "parent"
		},
		ChiIssue: {
			label: "brakes",
			inverse: true,		
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "child"
		},
		
		ChiRequirement: {
			label: "contains",
			inverse: true,
			connectionType: "aggregation",
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "child"
		},
		
	
	};
}


/*
 This file was generated by wCMFGenerator 2.6.1.0016 from model/requirements.xmi on 02.09.08 21:48.
 Manual modifications should be placed inside the protected regions.
 developer: Giuseppe Platania
 Version: 1.0
 Class: class.ChiIssue.js
 Description:
 */
cwm.figure.ChiIssue = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiIssue", label, oid, parentoids, childoids);
}

cwm.figure.ChiIssue.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiIssue.prototype.type = "cwm.figure.ChiIssue";

cwm.figure.ChiIssue.prototype.getDescription = function(){
	return "Issues sind plöt."
}

//Changed 2008-09-04: Added function
cwm.figure.ChiIssue.prototype.getLabel = function(newLabels){
	return newLabels.Name;
}

//Changed 2008-09-04: Added function
cwm.figure.ChiIssue.prototype.setRecordLabel = function(record, newLabels){
	record.set("Name", newLabels.Name);
}

cwm.figure.ChiIssue.prototype.getGrid = function(store){
	return new Ext.grid.GridPanel({
		id: "GridChiIssue",
		iconCls: "FigureGraphic FigureChiIssue",
		layout: "fit",
		columns: [{
			header: "ChiIssue",
			dataIndex: "Name",
			sortable: true
		}, {
			header: "parentoids",
			dataIndex: "parentoids",
			hidden: true,
			hideable: false
		}, {
			header: "childoids",
			dataIndex: "childoids",
			hidden: true,
			hideable: false
		}],
		store: store,
		enableDragDrop: true,
		selModel: new Ext.grid.RowSelectionModel({
			singleSelect: true
		}),
		ddGroup: "gridDDGroup",
		uwmClassName: "ChiIssue",
		listeners: {
			cellclick: function(grid, rowIndex, columnIndex, e){
				uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
			},
			cellcontextmenu: function(grid, rowIndex, columnIndex, e){
				var node = grid.getStore().getAt(rowIndex);
				
				var contextMenu = new Ext.menu.Menu({
					items: [new Ext.menu.Item({
						text: "Show in diagram",
						handler: function(item, e){
							var oid = node.id;
							uwm.showInDiagram(oid);
						},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
						//Change 2008-09-04: Added menuitem
					}), new Ext.menu.Item({
						text: "Show in Hierarchy",
						handler: function(item, e){
							var oid = node.id;

							uwm.showInHierarchy(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel("ChiIssue", record.id);
						}
					}]
				});
				
				contextMenu.showAt(e.getXY());
				e.stopPropagation();
				return false;
			}
		}
	});
}


cwm.figure.ChiIssue.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiIssue"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name"
			}, {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiIssue.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
		"change": function(field, newValue, oldValue){
			uwm.fieldChanged(field, newValue, oldValue, oid);
		}
	};
	var htmlListeners = {
		"sync": function(field, html){
			field.contentChanged = true;
		},
		"beforedestroy": function(field){
			if (field.contentChanged) {
				uwm.fieldChanged(field, field.getValue(), null, oid);
			}
		}
	};
	var form = new Ext.FormPanel({
		oid: oid,
		labelWidth: 90,
		frame: true,
		labelAlign: "top",
		title: 'ChiIssue Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [new Ext.form.ComboBox({
			fieldLabel: 'Author',
			name: 'Author',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiAuthors"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			listeners: listeners
		}), new Ext.form.ComboBox({
			fieldLabel: 'Responsible',
			name: 'Responsible',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiAuthors"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			listeners: listeners
		}), {
			fieldLabel: 'Alias',
			name: 'Alias',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Version',
			name: 'Version',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Name',
			name: 'Name',
			
			inputType: 'textfield',
			listeners: {
				"change": function(field, newValue, oldValue){
					uwm.fieldChanged(field, newValue, oldValue, oid);
					uwm.updateElementDisplay(oid, "ChiIssue", "labelChange", {
						Name: newValue
					});
				}
			}
		}, // TODO check this manually
 new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,
			listeners: htmlListeners
		}), {
			fieldLabel: 'created',
			name: 'created',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'creator',
			name: 'creator',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'last_editor',
			name: 'last_editor',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'modified',
			name: 'modified',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();
	
	
	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
	}, "Loading properties", function(data){
		var realForm = form.getForm();
		
		realForm.findField("Author").setValue(data.node.values[1].Author);
		realForm.findField("Responsible").setValue(data.node.values[1].Responsible);
		realForm.findField("Alias").setValue(data.node.values[1].Alias);
		realForm.findField("Version").setValue(data.node.values[1].Version);
		realForm.findField("Name").setValue(data.node.values[1].Name);
		realForm.findField("Notes").setValue(data.node.values[1].Notes);
		realForm.findField("created").setValue(data.node.values[1].created);
		realForm.findField("creator").setValue(data.node.values[1].creator);
		realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
		realForm.findField("modified").setValue(data.node.values[1].modified);
	});
};
cwm.figure.ChiIssue.prototype.getConstraints = function(){
	return {
	
		ChiRequirement: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "parent"
		},
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "parent"
		},
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0016 from model/requirements.xmi on 02.09.08 21:48.
 Manual modifications should be placed inside the protected regions.
 developer: Giuseppe Platania
 Version: 1.0
 Class: class.ChiFeature.js
 Description:
 */
cwm.figure.ChiFeature = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiFeature", label, oid, parentoids, childoids);
}

cwm.figure.ChiFeature.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiFeature.prototype.type = "cwm.figure.ChiFeature";

cwm.figure.ChiFeature.prototype.getDescription = function(){
	return "Features sind voll toll";
}

cwm.figure.ChiFeature.prototype.getLabel = function(newLabels){
	return newLabels.Name;
}

//Changed 2008-09-04: Added function
cwm.figure.ChiFeature.prototype.setRecordLabel = function(record, newLabels){
	record.set("Name", newLabels.Name);
}


cwm.figure.ChiFeature.prototype.getGrid = function(store){
	return new Ext.grid.GridPanel({
		id: "GridChiFeature",
		iconCls: "FigureGraphic FigureChiFeature",
		layout: "fit",
		columns: [{
			header: "ChiFeature",
			dataIndex: "Name",
			sortable: true
		}, {
			header: "parentoids",
			dataIndex: "parentoids",
			hidden: true,
			hideable: false
		}, {
			header: "childoids",
			dataIndex: "childoids",
			hidden: true,
			hideable: false
		}],
		store: store,
		enableDragDrop: true,
		selModel: new Ext.grid.RowSelectionModel({
			singleSelect: true
		}),
		ddGroup: "gridDDGroup",
		uwmClassName: "ChiFeature",
		listeners: {
			cellclick: function(grid, rowIndex, columnIndex, e){
				uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
			},
			cellcontextmenu: function(grid, rowIndex, columnIndex, e){
				var node = grid.getStore().getAt(rowIndex);
				
				var contextMenu = new Ext.menu.Menu({
					items: [new Ext.menu.Item({
						text: "Show in diagram",
						handler: function(item, e){
							var oid = node.id;
							uwm.showInDiagram(oid);
						},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
						//Change 2008-09-04: Added menuitem
					}), new Ext.menu.Item({
						text: "Show in Hierarchy",
						handler: function(item, e){
							var oid = node.id;

							uwm.showInHierarchy(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel("ChiFeature", record.id);
						}
					}]
				});
				
				contextMenu.showAt(e.getXY());
				e.stopPropagation();
				return false;
			}
		}
	});
}


cwm.figure.ChiFeature.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiFeature"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name"
			}, {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiFeature.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
		"change": function(field, newValue, oldValue){
			uwm.fieldChanged(field, newValue, oldValue, oid);
		}
	};
	var htmlListeners = {
		"sync": function(field, html){
			field.contentChanged = true;
		},
		"beforedestroy": function(field){
			if (field.contentChanged) {
				uwm.fieldChanged(field, field.getValue(), null, oid);
			}
		}
	};
	var form = new Ext.FormPanel({
		oid: oid,
		labelWidth: 90,
		frame: true,
		labelAlign: "top",
		title: 'ChiFeature Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [new Ext.form.ComboBox({
			fieldLabel: 'Author',
			name: 'Author',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiAuthors"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			listeners: listeners
		}), new Ext.form.ComboBox({
			fieldLabel: 'Proofreader',
			name: 'Proofreader',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiAuthors"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			listeners: listeners
		}), new Ext.form.ComboBox({
			fieldLabel: 'Status',
			name: 'Status',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiFeatureStatus"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			listeners: listeners
		}), {
			fieldLabel: 'Alias',
			name: 'Alias',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Version',
			name: 'Version',
			
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'Name',
			name: 'Name',
			
			inputType: 'textfield',
			listeners: {
				"change": function(field, newValue, oldValue){
					uwm.fieldChanged(field, newValue, oldValue, oid);
					uwm.updateElementDisplay(oid, "ChiFeature", "labelChange", {
						Name: newValue
					});
				}
			}
		}, // TODO check this manually
 new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,
			listeners: htmlListeners
		}), {
			fieldLabel: 'created',
			name: 'created',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'creator',
			name: 'creator',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'last_editor',
			name: 'last_editor',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}, {
			fieldLabel: 'modified',
			name: 'modified',
			readOnly: true,
			inputType: 'textfield',
			listeners: listeners
		}]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();
	
	
	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
	}, "Loading properties", function(data){
		var realForm = form.getForm();
		
		realForm.findField("Author").setValue(data.node.values[1].Author);
		realForm.findField("Proofreader").setValue(data.node.values[1].Proofreader);
		realForm.findField("Status").setValue(data.node.values[1].Status);
		realForm.findField("Alias").setValue(data.node.values[1].Alias);
		realForm.findField("Version").setValue(data.node.values[1].Version);
		realForm.findField("Name").setValue(data.node.values[1].Name);
		realForm.findField("Notes").setValue(data.node.values[1].Notes);
		realForm.findField("created").setValue(data.node.values[1].created);
		realForm.findField("creator").setValue(data.node.values[1].creator);
		realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
		realForm.findField("modified").setValue(data.node.values[1].modified);
	});
};
cwm.figure.ChiFeature.prototype.getConstraints = function(){
	return {
	
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "parent"
		},
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "parent"
		},
		ChiRequirement: {
			label: "realizes",
			inverse: true,
			ConnectionType: "aggregation",
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "child"
		}
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.Figure.js
   Description: A figure is the graphical reppresentation of a node can be linked with manies diagrams.
  */
  
cwm.figure.Figure = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "Figure", label, oid, parentoids, childoids);
}

cwm.figure.Figure.prototype = new uwm.figure.RectFigure;

cwm.figure.Figure.prototype.type = "cwm.figure.Figure";

cwm.figure.Figure.prototype.getDescription = function() {
	return "A figure is the graphical reppresentation of a node can be linked with manies diagrams.";
}

cwm.figure.Figure.prototype.getLabel = function(newLabels) {
	return ;
						}
cwm.figure.Figure.prototype.setRecordLabel = function(record, newLabels)
							{
							
							} 


cwm.figure.Figure.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridFigure",
		iconCls: "FigureGraphic FigureFigure",
		layout: "fit",
					columns: [
					

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "Figure",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.Figure.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "Figure"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.Figure.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'Figure Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'BackgroundColor',
	        name: 'BackgroundColor',
	        id: 'IDBackgroundColor',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'ForegroundColor',
	        name: 'ForegroundColor',
	        id: 'IDForegroundColor',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'GID',
	        name: 'GID',
	        id: 'IDGID',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'PositionY',
	        name: 'PositionY',
	        id: 'IDPositionY',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'PostionX',
	        name: 'PostionX',
	        id: 'IDPostionX',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("BackgroundColor").setValue(data.node.values[1].BackgroundColor);
			realForm.findField("ForegroundColor").setValue(data.node.values[1].ForegroundColor);
			realForm.findField("GID").setValue(data.node.values[1].GID);
			realForm.findField("PositionY").setValue(data.node.values[1].PositionY);
			realForm.findField("PostionX").setValue(data.node.values[1].PostionX);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.Figure.prototype.getConstraints = function() {
	return {
				
		ChiBase: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		Actor: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiBusinessPartner: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiBusinessPartnerPassive: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiBusinessPartnerActive: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiWorker: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiWorkerInternal: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiWorkerExternal: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiBusinessProcess: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiBusinessUseCase: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiBusinessUseCaseCore: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiController: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiNode: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiView: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiValue: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiIssue: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiRequirement: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiFeature: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		ChiGoal: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.Model.js
   Description: a model is the start of the Chronos onthology tree.
  */
  
cwm.figure.Model = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "Model", label, oid, parentoids, childoids);
}

cwm.figure.Model.prototype = new uwm.figure.RectFigure;

cwm.figure.Model.prototype.type = "cwm.figure.Model";

cwm.figure.Model.prototype.getDescription = function() {
	return "a model is the start of the Chronos onthology tree.";
}

cwm.figure.Model.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.Model.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.Model.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridModel",
		iconCls: "FigureGraphic FigureModel",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "Model",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.Model.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "Model"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.Model.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'Model Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.Model.prototype.getConstraints = function(){
	return {
	
		Package: {
			label: "",
			inverse: true,
			connectionType: "composition",
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "child"
		}
	
	};
}


/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.Model.js
   Description: a model is the start of the Chronos onthology tree.
  */
  
cwm.figure.Model = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "Model", label, oid, parentoids, childoids);
}

cwm.figure.Model.prototype = new uwm.figure.RectFigure;

cwm.figure.Model.prototype.type = "cwm.figure.Model";

cwm.figure.Model.prototype.getDescription = function() {
	return "a model is the start of the Chronos onthology tree.";
}

cwm.figure.Model.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.Model.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.Model.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridModel",
		iconCls: "FigureGraphic FigureModel",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "Model",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.Model.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "Model"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.Model.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'Model Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.Model.prototype.getConstraints = function() {
	return {
	
		Package: {
			label:"",
			inverse: true,
			connectionType: "composition", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		}
		
	};
}


/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessPartner.js
   Description: A ChiBusinesPartner is an external person that has a Business relation with the enterprise.
  */
  
cwm.figure.ChiBusinessPartner = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiBusinessPartner", label, oid, parentoids, childoids);
}

cwm.figure.ChiBusinessPartner.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiBusinessPartner.prototype.type = "cwm.figure.ChiBusinessPartner";

cwm.figure.ChiBusinessPartner.prototype.getDescription = function() {
	return "A ChiBusinesPartner is an external person that has a Business relation with the enterprise.";
}

cwm.figure.ChiBusinessPartner.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiBusinessPartner.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiBusinessPartner.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiBusinessPartner",
		iconCls: "FigureGraphic FigureChiBusinessPartner",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiBusinessPartner",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiBusinessPartner.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiBusinessPartner"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiBusinessPartner.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiBusinessPartner Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        id: 'IDAlias',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        id: 'IDVersion',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Alias").setValue(data.node.values[1].Alias);
			realForm.findField("Version").setValue(data.node.values[1].Version);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiBusinessPartner.prototype.getConstraints = function(){
	return {
	
		Package: {
			label: "",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship: "parent"
		}
		
	
	};
}
/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessPartnerActive.js
   Description: A ChiBusinesPartnerActive is a direct customer of the enterprise.
  */
  
cwm.figure.ChiBusinessPartnerActive = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiBusinessPartnerActive", label, oid, parentoids, childoids);
}

cwm.figure.ChiBusinessPartnerActive.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiBusinessPartnerActive.prototype.type = "cwm.figure.ChiBusinessPartnerActive";

cwm.figure.ChiBusinessPartnerActive.prototype.getDescription = function() {
	return "A ChiBusinesPartnerActive is a direct customer of the enterprise.";
}

cwm.figure.ChiBusinessPartnerActive.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiBusinessPartnerActive.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiBusinessPartnerActive.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiBusinessPartnerActive",
		iconCls: "FigureGraphic FigureChiBusinessPartnerActive",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiBusinessPartnerActive",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiBusinessPartnerActive.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiBusinessPartnerActive"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiBusinessPartnerActive.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiBusinessPartnerActive Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        id: 'IDAlias',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        id: 'IDVersion',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Alias").setValue(data.node.values[1].Alias);
			realForm.findField("Version").setValue(data.node.values[1].Version);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiBusinessPartnerActive.prototype.getConstraints = function() {
	return {
				
		Package: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},
		ChiBusinessUseCase: {
		label:"is driven by",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		}
	
		
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessProcess.js
   Description: A Business Process is a sum of actions that produces a business advantage to the enterprise. It is composed by one or many ChiBusinessUseCases.
  */
  
cwm.figure.ChiBusinessProcess = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiBusinessProcess", label, oid, parentoids, childoids);
}

cwm.figure.ChiBusinessProcess.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiBusinessProcess.prototype.type = "cwm.figure.ChiBusinessProcess";

cwm.figure.ChiBusinessProcess.prototype.getDescription = function() {
	return "A Business Process is a sum of actions that produces a business advantage to the enterprise. It is composed by one or many ChiBusinessUseCases.";
}

cwm.figure.ChiBusinessProcess.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiBusinessProcess.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiBusinessProcess.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiBusinessProcess",
		iconCls: "FigureGraphic FigureChiBusinessProcess",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiBusinessProcess",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiBusinessProcess.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiBusinessProcess"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiBusinessProcess.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiBusinessProcess Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        id: 'IDAlias',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        id: 'IDVersion',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Alias").setValue(data.node.values[1].Alias);
			realForm.findField("Version").setValue(data.node.values[1].Version);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiBusinessProcess.prototype.getConstraints = function() {
	return {
				
		Package: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},
		ChiBusinessUseCase: {
			label:"",
			inverse: true,
			connectionType: "composition", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiBusinessUseCaseCore: {
			label:"",
			inverse: true,
			connectionType: "composition", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
	
		
	};
}


/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessUseCaseCore.js
   Description: A Core Use Case generates a value for an active business partner and is directly connected to the objectives (ChiGoals) of a company or the process of his existence (typically making money).
  */
  
cwm.figure.ChiBusinessUseCaseCore = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiBusinessUseCaseCore", label, oid, parentoids, childoids);
}

cwm.figure.ChiBusinessUseCaseCore.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiBusinessUseCaseCore.prototype.type = "cwm.figure.ChiBusinessUseCaseCore";

cwm.figure.ChiBusinessUseCaseCore.prototype.getDescription = function() {
	return "A Core Use Case generates a value for an active business partner and is directly connected to the objectives (ChiGoals) of a company or the process of his existence (typically making money).";
}

cwm.figure.ChiBusinessUseCaseCore.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiBusinessUseCaseCore.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiBusinessUseCaseCore.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiBusinessUseCaseCore",
		iconCls: "FigureGraphic FigureChiBusinessUseCaseCore",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiBusinessUseCaseCore",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiBusinessUseCaseCore.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiBusinessUseCaseCore"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiBusinessUseCaseCore.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiBusinessUseCaseCore Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
new Ext.form.ComboBox({
			fieldLabel: 'PrimaryActor',
			 id: 'IDPrimaryActor',
			name: 'PrimaryActor',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiWorkerExternal"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			listeners: listeners
		}) 

,

			{	
			fieldLabel: 'OtherActors',
	        name: 'OtherActors',
	        id: 'IDOtherActors',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'GoalInContext',
	        name: 'GoalInContext',
	        id: 'IDGoalInContext',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Scope',
	        name: 'Scope',
	        id: 'IDScope',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Level',
	        name: 'Level',
	        id: 'IDLevel',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Stakeholders',
	        name: 'Stakeholders',
	        id: 'IDStakeholders',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Precondition',
	        name: 'Precondition',
	        id: 'IDPrecondition',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Trigger',
	        name: 'Trigger',
	        id: 'IDTrigger',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'MainSuccessScenario',
	        name: 'MainSuccessScenario',
	        id: 'IDMainSuccessScenario',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Extensions',
	        name: 'Extensions',
	        id: 'IDExtensions',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        id: 'IDAlias',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        id: 'IDVersion',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("PrimaryActor").setValue(data.node.values[1].PrimaryActor);
			realForm.findField("OtherActors").setValue(data.node.values[1].OtherActors);
			realForm.findField("GoalInContext").setValue(data.node.values[1].GoalInContext);
			realForm.findField("Scope").setValue(data.node.values[1].Scope);
			realForm.findField("Level").setValue(data.node.values[1].Level);
			realForm.findField("Stakeholders").setValue(data.node.values[1].Stakeholders);
			realForm.findField("Precondition").setValue(data.node.values[1].Precondition);
			realForm.findField("Trigger").setValue(data.node.values[1].Trigger);
			realForm.findField("MainSuccessScenario").setValue(data.node.values[1].MainSuccessScenario);
			realForm.findField("Extensions").setValue(data.node.values[1].Extensions);
			realForm.findField("Alias").setValue(data.node.values[1].Alias);
			realForm.findField("Version").setValue(data.node.values[1].Version);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiBusinessUseCaseCore.prototype.getConstraints = function() {
	return {
				
		ChiBusinessProcess: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		Package: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},

		
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessUseCase.js
   Description: A Business Use Case is part of a business process that produces an advantage to the enterprise.
  */
  
cwm.figure.ChiBusinessUseCase = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiBusinessUseCase", label, oid, parentoids, childoids);
}

cwm.figure.ChiBusinessUseCase.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiBusinessUseCase.prototype.type = "cwm.figure.ChiBusinessUseCase";

cwm.figure.ChiBusinessUseCase.prototype.getDescription = function() {
	return "A Business Use Case is part of a business process that produces an advantage to the enterprise.";
}

cwm.figure.ChiBusinessUseCase.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiBusinessUseCase.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiBusinessUseCase.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiBusinessUseCase",
		iconCls: "FigureGraphic FigureChiBusinessUseCase",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiBusinessUseCase",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiBusinessUseCase.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiBusinessUseCase"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiBusinessUseCase.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiBusinessUseCase Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
new Ext.form.ComboBox({
			fieldLabel: 'PrimaryActor',
			 id: 'IDPrimaryActor',
			name: 'PrimaryActor',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiWorkerExternal"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			listeners: listeners
		}) 

,

			{	
			fieldLabel: 'OtherActors',
	        name: 'OtherActors',
	        id: 'IDOtherActors',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'GoalInContext',
	        name: 'GoalInContext',
	        id: 'IDGoalInContext',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Scope',
	        name: 'Scope',
	        id: 'IDScope',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Level',
	        name: 'Level',
	        id: 'IDLevel',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Stakeholders',
	        name: 'Stakeholders',
	        id: 'IDStakeholders',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Precondition',
	        name: 'Precondition',
	        id: 'IDPrecondition',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Trigger',
	        name: 'Trigger',
	        id: 'IDTrigger',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'MainSuccessScenario',
	        name: 'MainSuccessScenario',
	        id: 'IDMainSuccessScenario',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Extensions',
	        name: 'Extensions',
	        id: 'IDExtensions',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        id: 'IDAlias',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        id: 'IDVersion',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();
	   new Ext.ToolTip({
        target: 'IDPrimaryActor',
        html: "the main actor of this use case"
    });
	   new Ext.ToolTip({
        target: 'IDOtherActors',
        html: "The list of actors associated with the use case. Although this information is contained in the use case itself, it helps to increase the understandability of the use case when the diagram is unavailable."
    });
	   new Ext.ToolTip({
        target: 'IDGoalInContext',
        html: "The goal should implicitly express the actor's intent or purpose of the use case, such as *Enrol Student in Seminar.*"
    });
	   new Ext.ToolTip({
        target: 'IDScope',
        html: "Boundaries in which the use case is operated when invoked (E.g. CMS)"
    });
	   new Ext.ToolTip({
        target: 'IDLevel',
        html: "Authorizations for operations/actions to be performed against the Chi business objects in scope. Against every object/process 4 CRUD basic operations are possible"
    });
	   new Ext.ToolTip({
        target: 'IDStakeholders',
        html: "List of actors that have a special interest (i.e. to be informed every time) in completion of the use case"
    });
	   new Ext.ToolTip({
        target: 'IDPrecondition',
        html: "A list of the conditions, if any, that must be met before a use case may be invoked. Can be a previous Use case or self the presence of the system in Scope."
    });
	   new Ext.ToolTip({
        target: 'IDTrigger',
        html: "Event that is responsible for invocation of the use case."
    });
	   new Ext.ToolTip({
        target: 'IDMainSuccessScenario',
        html: "The main path of logic an actor follows through a use case. Often referred to as the *happy path* or the *main path* because it describes how the use case works when everything works as it normally should."
    });



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("PrimaryActor").setValue(data.node.values[1].PrimaryActor);
			realForm.findField("OtherActors").setValue(data.node.values[1].OtherActors);
			realForm.findField("GoalInContext").setValue(data.node.values[1].GoalInContext);
			realForm.findField("Scope").setValue(data.node.values[1].Scope);
			realForm.findField("Level").setValue(data.node.values[1].Level);
			realForm.findField("Stakeholders").setValue(data.node.values[1].Stakeholders);
			realForm.findField("Precondition").setValue(data.node.values[1].Precondition);
			realForm.findField("Trigger").setValue(data.node.values[1].Trigger);
			realForm.findField("MainSuccessScenario").setValue(data.node.values[1].MainSuccessScenario);
			realForm.findField("Extensions").setValue(data.node.values[1].Extensions);
			realForm.findField("Alias").setValue(data.node.values[1].Alias);
			realForm.findField("Version").setValue(data.node.values[1].Version);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiBusinessUseCase.prototype.getConstraints = function() {
	return {
				
		ChiBusinessProcess: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		Package: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},
		Figure: {
			label:"",
			inverse: true,
			connectionType: "composition", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		}
		
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.Package.js
   Description: 
  */
  
cwm.figure.Package = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "Package", label, oid, parentoids, childoids);
}

cwm.figure.Package.prototype = new uwm.figure.RectFigure;

cwm.figure.Package.prototype.type = "cwm.figure.Package";

cwm.figure.Package.prototype.getDescription = function() {
	return "";
}

cwm.figure.Package.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.Package.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.Package.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridPackage",
		iconCls: "FigureGraphic FigurePackage",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "Package",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.Package.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "Package"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.Package.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'Package Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.Package.prototype.getConstraints = function() {
	return {
				
		Model: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		Package: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},
		ChiBase: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		Package: {
			label:"",
			inverse: true,
			connectionType: "composition", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		Actor: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiBusinessPartner: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiBusinessPartnerPassive: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiBusinessPartnerActive: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiWorker: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiWorkerInternal: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiWorkerExternal: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiBusinessProcess: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiBusinessUseCase: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiBusinessUseCaseCore: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiController: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiNode: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiView: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiValue: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiIssue: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiRequirement: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiFeature: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		},
		
		ChiGoal: {
			label:"",
			inverse: true,
			connectionType: "aggregation", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		}
		
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiWorkerExternal.js
   Description: A Chi External Worker is an employee that interacts directly with ChiBusinesPartner outside the enterprise.
  */
  
cwm.figure.ChiWorkerExternal = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiWorkerExternal", label, oid, parentoids, childoids);
}

cwm.figure.ChiWorkerExternal.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiWorkerExternal.prototype.type = "cwm.figure.ChiWorkerExternal";

cwm.figure.ChiWorkerExternal.prototype.getDescription = function() {
	return "A Chi External Worker is an employee that interacts directly with ChiBusinesPartner outside the enterprise.";
}

cwm.figure.ChiWorkerExternal.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiWorkerExternal.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiWorkerExternal.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiWorkerExternal",
		iconCls: "FigureGraphic FigureChiWorkerExternal",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiWorkerExternal",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiWorkerExternal.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiWorkerExternal"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiWorkerExternal.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiWorkerExternal Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'is_OfflineUser',
	        name: 'is_OfflineUser',
	        id: 'IDis_OfflineUser',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        id: 'IDAlias',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        id: 'IDVersion',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("is_OfflineUser").setValue(data.node.values[1].is_OfflineUser);
			realForm.findField("Alias").setValue(data.node.values[1].Alias);
			realForm.findField("Version").setValue(data.node.values[1].Version);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiWorkerExternal.prototype.getConstraints = function() {
	return {
				
		Package: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},
		ChiBusinessUseCase: {
		label:"is driven by",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		}
		
	};
}


/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiWorkerInternal.js
   Description: A Chi  Worker Internal is an employee of the enterprise that has no contact with Business partners.
  */
  
cwm.figure.ChiWorkerInternal = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiWorkerInternal", label, oid, parentoids, childoids);
}

cwm.figure.ChiWorkerInternal.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiWorkerInternal.prototype.type = "cwm.figure.ChiWorkerInternal";

cwm.figure.ChiWorkerInternal.prototype.getDescription = function() {
	return "A Chi  Worker Internal is an employee of the enterprise that has no contact with Business partners.";
}

cwm.figure.ChiWorkerInternal.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiWorkerInternal.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiWorkerInternal.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiWorkerInternal",
		iconCls: "FigureGraphic FigureChiWorkerInternal",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiWorkerInternal",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiWorkerInternal.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiWorkerInternal"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiWorkerInternal.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiWorkerInternal Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        id: 'IDAlias',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        id: 'IDVersion',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Alias").setValue(data.node.values[1].Alias);
			realForm.findField("Version").setValue(data.node.values[1].Version);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiWorkerInternal.prototype.getConstraints = function() {
	return {
				
		Package: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},
		ChiBusinessUseCase: {
		label:"is driven by",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		}
		
	};
}


/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessPartnerPassive.js
   Description: A ChiBusinesPartnerPassive is an indirect customer (typically a supplier) of the enterprise.
  */
  
cwm.figure.ChiBusinessPartnerPassive = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiBusinessPartnerPassive", label, oid, parentoids, childoids);
}

cwm.figure.ChiBusinessPartnerPassive.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiBusinessPartnerPassive.prototype.type = "cwm.figure.ChiBusinessPartnerPassive";

cwm.figure.ChiBusinessPartnerPassive.prototype.getDescription = function() {
	return "A ChiBusinesPartnerPassive is an indirect customer (typically a supplier) of the enterprise.";
}

cwm.figure.ChiBusinessPartnerPassive.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiBusinessPartnerPassive.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiBusinessPartnerPassive.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiBusinessPartnerPassive",
		iconCls: "FigureGraphic FigureChiBusinessPartnerPassive",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiBusinessPartnerPassive",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiBusinessPartnerPassive.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiBusinessPartnerPassive"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiBusinessPartnerPassive.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiBusinessPartnerPassive Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        id: 'IDAlias',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        id: 'IDVersion',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Alias").setValue(data.node.values[1].Alias);
			realForm.findField("Version").setValue(data.node.values[1].Version);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiBusinessPartnerPassive.prototype.getConstraints = function() {
	return {
				
		Package: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},
		ChiBusinessUseCase: {
		label:"is driven by",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		}
		
	};
}


/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessUseCase.js
   Description: A Business Use Case is part of a business process that produces an advantage to the enterprise.
  */
  
cwm.figure.ChiBusinessUseCase = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiBusinessUseCase", label, oid, parentoids, childoids);
}

cwm.figure.ChiBusinessUseCase.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiBusinessUseCase.prototype.type = "cwm.figure.ChiBusinessUseCase";

cwm.figure.ChiBusinessUseCase.prototype.getDescription = function() {
	return "A Business Use Case is part of a business process that produces an advantage to the enterprise.";
}

cwm.figure.ChiBusinessUseCase.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiBusinessUseCase.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiBusinessUseCase.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiBusinessUseCase",
		iconCls: "FigureGraphic FigureChiBusinessUseCase",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiBusinessUseCase",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiBusinessUseCase.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiBusinessUseCase"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiBusinessUseCase.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiBusinessUseCase Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
new Ext.form.ComboBox({
			fieldLabel: 'PrimaryActor',
			 id: 'IDPrimaryActor',
			name: 'PrimaryActor',
			store: new Ext.data.Store({
				url: uwm.config.jsonUrl,
				method: "POST",
				baseParams: {
					sid: uwm.data.sid,
					response_format: "JSON",
					usr_action: "listbox",
					// TODO extract the entity type manually
					type: "ChiWorkerExternal"
				},
				reader: new Ext.data.JsonReader({
					root: "objects",
					totalPorperty: "totalCount",
					id: "key"
				}, [{
					name: "key",
					mapping: "key"
				}, {
					name: "val",
					mapping: "val"
				}])
			}),
			displayField: 'val',
			valueField: 'key',
			mode: "remote",
			triggerAction: 'all',
			editable: false,
			listeners: listeners
		}) 

,

			{	
			fieldLabel: 'OtherActors',
	        name: 'OtherActors',
	        id: 'IDOtherActors',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'GoalInContext',
	        name: 'GoalInContext',
	        id: 'IDGoalInContext',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Scope',
	        name: 'Scope',
	        id: 'IDScope',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Level',
	        name: 'Level',
	        id: 'IDLevel',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Stakeholders',
	        name: 'Stakeholders',
	        id: 'IDStakeholders',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Precondition',
	        name: 'Precondition',
	        id: 'IDPrecondition',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Trigger',
	        name: 'Trigger',
	        id: 'IDTrigger',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'MainSuccessScenario',
	        name: 'MainSuccessScenario',
	        id: 'IDMainSuccessScenario',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Extensions',
	        name: 'Extensions',
	        id: 'IDExtensions',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        id: 'IDAlias',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        id: 'IDVersion',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();
	   new Ext.ToolTip({
        target: 'IDPrimaryActor',
        html: "the main actor of this use case"
    });
	   new Ext.ToolTip({
        target: 'IDOtherActors',
        html: "The list of actors associated with the use case. Although this information is contained in the use case itself, it helps to increase the understandability of the use case when the diagram is unavailable."
    });
	   new Ext.ToolTip({
        target: 'IDGoalInContext',
        html: "The goal should implicitly express the actor's intent or purpose of the use case, such as *Enrol Student in Seminar.*"
    });
	   new Ext.ToolTip({
        target: 'IDScope',
        html: "Boundaries in which the use case is operated when invoked (E.g. CMS)"
    });
	   new Ext.ToolTip({
        target: 'IDLevel',
        html: "Authorizations for operations/actions to be performed against the Chi business objects in scope. Against every object/process 4 CRUD basic operations are possible"
    });
	   new Ext.ToolTip({
        target: 'IDStakeholders',
        html: "List of actors that have a special interest (i.e. to be informed every time) in completion of the use case"
    });
	   new Ext.ToolTip({
        target: 'IDPrecondition',
        html: "A list of the conditions, if any, that must be met before a use case may be invoked. Can be a previous Use case or self the presence of the system in Scope."
    });
	   new Ext.ToolTip({
        target: 'IDTrigger',
        html: "Event that is responsible for invocation of the use case."
    });
	   new Ext.ToolTip({
        target: 'IDMainSuccessScenario',
        html: "The main path of logic an actor follows through a use case. Often referred to as the *happy path* or the *main path* because it describes how the use case works when everything works as it normally should."
    });



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("PrimaryActor").setValue(data.node.values[1].PrimaryActor);
			realForm.findField("OtherActors").setValue(data.node.values[1].OtherActors);
			realForm.findField("GoalInContext").setValue(data.node.values[1].GoalInContext);
			realForm.findField("Scope").setValue(data.node.values[1].Scope);
			realForm.findField("Level").setValue(data.node.values[1].Level);
			realForm.findField("Stakeholders").setValue(data.node.values[1].Stakeholders);
			realForm.findField("Precondition").setValue(data.node.values[1].Precondition);
			realForm.findField("Trigger").setValue(data.node.values[1].Trigger);
			realForm.findField("MainSuccessScenario").setValue(data.node.values[1].MainSuccessScenario);
			realForm.findField("Extensions").setValue(data.node.values[1].Extensions);
			realForm.findField("Alias").setValue(data.node.values[1].Alias);
			realForm.findField("Version").setValue(data.node.values[1].Version);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiBusinessUseCase.prototype.getConstraints = function() {
	return {
				
		ChiBusinessProcess: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},			
		Package: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},
		Figure: {
			label:"",
			inverse: true,
			connectionType: "composition", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		}
		
	};
}
/////////////////////////////////////////////////////
/// admin

/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiAuthors.js
   Description: all the involved in the project can be considered authors.
  */
  
cwm.figure.ChiAuthors = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiAuthors", label, oid, parentoids, childoids);
}

cwm.figure.ChiAuthors.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiAuthors.prototype.type = "cwm.figure.ChiAuthors";

cwm.figure.ChiAuthors.prototype.getDescription = function() {
	return "all the involved in the project can be considered authors.";
}

cwm.figure.ChiAuthors.prototype.getLabel = function(newLabels) {
	return newLabels.Name + ' - ' + newLabels.Role;
						}
cwm.figure.ChiAuthors.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);record.set("Role", newLabels.Role);
							} 


cwm.figure.ChiAuthors.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiAuthors",
		iconCls: "FigureGraphic FigureChiAuthors",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},
						{
						header: "Role",
						dataIndex: "Role",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiAuthors",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiAuthors.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiAuthors"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},
			{
				name: "Role",
				mapping: "values[1].Role"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiAuthors.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiAuthors Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Role',
	        name: 'Role',
	        id: 'IDRole',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Role").setValue(data.node.values[1].Role);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiAuthors.prototype.getConstraints = function() {
	return {
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiFeatureStatus.js
   Description: 
  */
  
cwm.figure.ChiFeatureStatus = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiFeatureStatus", label, oid, parentoids, childoids);
}

cwm.figure.ChiFeatureStatus.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiFeatureStatus.prototype.type = "cwm.figure.ChiFeatureStatus";

cwm.figure.ChiFeatureStatus.prototype.getDescription = function() {
	return "";
}

cwm.figure.ChiFeatureStatus.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiFeatureStatus.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiFeatureStatus.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiFeatureStatus",
		iconCls: "FigureGraphic FigureChiFeatureStatus",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiFeatureStatus",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiFeatureStatus.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiFeatureStatus"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiFeatureStatus.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiFeatureStatus Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiFeatureStatus.prototype.getConstraints = function() {
	return {
	
	};
}



/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiRequirementStatus.js
   Description: 
  */
  
cwm.figure.ChiRequirementStatus = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiRequirementStatus", label, oid, parentoids, childoids);
}

cwm.figure.ChiRequirementStatus.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiRequirementStatus.prototype.type = "cwm.figure.ChiRequirementStatus";

cwm.figure.ChiRequirementStatus.prototype.getDescription = function() {
	return "";
}

cwm.figure.ChiRequirementStatus.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiRequirementStatus.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiRequirementStatus.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiRequirementStatus",
		iconCls: "FigureGraphic FigureChiRequirementStatus",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiRequirementStatus",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiRequirementStatus.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiRequirementStatus"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiRequirementStatus.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiRequirementStatus Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiRequirementStatus.prototype.getConstraints = function() {
	return {
	
	};
}


/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 13.11.08 20:44. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiRequirementType.js
   Description: Type of requirement
  */
  
cwm.figure.ChiRequirementType = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "ChiRequirementType", label, oid, parentoids, childoids);
}

cwm.figure.ChiRequirementType.prototype = new uwm.figure.RectFigure;

cwm.figure.ChiRequirementType.prototype.type = "cwm.figure.ChiRequirementType";

cwm.figure.ChiRequirementType.prototype.getDescription = function() {
	return "Type of requirement";
}

cwm.figure.ChiRequirementType.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.ChiRequirementType.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.ChiRequirementType.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridChiRequirementType",
		iconCls: "FigureGraphic FigureChiRequirementType",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "ChiRequirementType",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.data.currentDiagram.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.ChiRequirementType.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiRequirementType"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

cwm.figure.ChiRequirementType.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'ChiRequirementType Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.ChiRequirementType.prototype.getConstraints = function() {
	return {
	
	};
}


/*
 This file was generated by wCMFGenerator 2.6.1.0026 from model/requirements.xmi on 17.11.08 15:05. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.Diagram.js
   Description: 
  */
  
cwm.figure.Diagram = function(label, oid, parentoids, childoids){

	uwm.figure.RectFigure.call(this, "Diagram", label, oid, parentoids, childoids);
}

cwm.figure.Diagram.prototype = new uwm.figure.RectFigure;

cwm.figure.Diagram.prototype.type = "cwm.figure.Diagram";

cwm.figure.Diagram.prototype.getDescription = function() {
	return "";
}

cwm.figure.Diagram.prototype.getLabel = function(newLabels) {
	return newLabels.Name;
						}
cwm.figure.Diagram.prototype.setRecordLabel = function(record, newLabels)
							{
							record.set("Name", newLabels.Name);
							} 


cwm.figure.Diagram.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
	id: "GridDiagram",
		iconCls: "FigureGraphic FigureDiagram",
		layout: "fit",
					columns: [
					
						{
						header: "Name",
						dataIndex: "Name",
						sortable: true
					},

					{
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
					header: "childoids",
					dataIndex: "childoids",
					hidden: true,
					hideable: false
				}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					uwmClassName: "Diagram",
					listeners: {
								cellclick: function(grid, rowIndex, columnIndex, e) {
								uwm.showProperties(grid.uwmClassName, grid.getStore().getAt(rowIndex).id);
								},
								cellcontextmenu: function(grid, rowIndex, columnIndex, e){
								var node = grid.getStore().getAt(rowIndex);
				
							var contextMenu = new Ext.menu.Menu({
								items: [new Ext.menu.Item({
									text: "Show in diagram",
									handler: function(item, e){
										var oid = node.id;							
										uwm.showInDiagram(oid);
															},
						disabled: !uwm.getByOid(node.id)
					}), new Ext.menu.Item({
						text: "Show in Tree",
						handler: function(item, e){
							var oid = node.id;
							
							uwm.showInTree(oid);
						}
					}), "-", {
						text: "Delete from model",
						handler: function(){
							var record = grid.getStore().getAt(rowIndex);
							
							grid.getStore().remove(record);
							uwm.deleteFigureFromModel(record.id);
						}
					}]
				});
				
				contextMenu.showAt([e.getXY()[0] + 2, e.getXY()[1] + 2]);				
				e.preventDefault();
			}
		}
	});
}

cwm.figure.Diagram.prototype.getStore = function(){
	return new Ext.data.Store({
		url: uwm.config.jsonUrl,
		baseParams: {
			sid: uwm.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "Diagram"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [
			
			{
				name: "Name",
				mapping: "values[1].Name"
			},

			 {
				name: "parentoids",
				mapping: "parentoids"
			}, {
				name: "childoids",
				mapping: "childoids"
			}]
		})
	});
}

cwm.figure.Diagram.prototype.showEdit = function(parentComponent, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
																	uwm.fieldChanged(field, newValue, oldValue, oid);
																}
					};
	var htmlListeners = {
						"sync": function(field, html){
						field.contentChanged = true;
						},
						"beforedestroy": function(field){
														if (field.contentChanged) {
																				uwm.fieldChanged(field, field.getValue(), null, oid);
																					}
														}
						};	
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 90,	
		frame: true,
		labelAlign: "top",
		title: 'Diagram Edit View',
		autoScroll: true,
		defaults: {
			width: 222
		},
		defaultType: 'textfield',
		items: [
				
			{	
			fieldLabel: 'Width',
	        name: 'Width',
	        id: 'IDWidth',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Height',
	        name: 'Height',
	        id: 'IDHeight',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        id: 'IDName',
	        
	         inputType:'textfield',
			listeners: listeners
	        }
,

			// TODO check this manually
			new Ext.form.HtmlEditor({
			fieldLabel: 'Notes',
			name: 'Notes',
			id: 'IDNotes',
			enableAlignments: false,
			enableColors: false,
			enableFont: false,
			enableFontSize: false,
			enableLinks: false,
			enableSourceEdit: false,			
			listeners: htmlListeners
		})
,

			{	
			fieldLabel: 'created',
	        name: 'created',
	        id: 'IDcreated',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        id: 'IDcreator',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        id: 'IDlast_editor',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }
,

			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        id: 'IDmodified',
	        readOnly:true,
	         inputType:'textfield',
			listeners: listeners
	        }


			]
	});
	
	parentComponent.add(form);
	parentComponent.doLayout();
	   new Ext.ToolTip({
        target: 'IDWidth',
        html: "The weight of the diagram in pixel"
    });
	   new Ext.ToolTip({
        target: 'IDHeight',
        html: "The height of the diagram"
    });



	uwm.jsonRequest({
		usr_action: "display",
		oid: oid,
		depth: 0,
		omitMetaData: true
		}, 
		"Loading properties", function(data){
		var realForm = form.getForm();			
			
			realForm.findField("Width").setValue(data.node.values[1].Width);
			realForm.findField("Height").setValue(data.node.values[1].Height);
			realForm.findField("Name").setValue(data.node.values[1].Name);
			realForm.findField("Notes").setValue(data.node.values[1].Notes);
			realForm.findField("created").setValue(data.node.values[1].created);
			realForm.findField("creator").setValue(data.node.values[1].creator);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor);
			realForm.findField("modified").setValue(data.node.values[1].modified);		
	});
};
cwm.figure.Diagram.prototype.getConstraints = function() {
	return {
				
		Package: {
		label:"",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"parent"
		},
		Figure: {
			label:"",
			inverse: true,
			connectionType: "composition", 
			sourceMaxConns: -1,
			targetMaxConns: -1,
			relationship:"child"
		}
		
	};
}

