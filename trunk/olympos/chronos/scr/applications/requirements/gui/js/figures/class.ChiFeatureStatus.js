
/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 31.08.08 11:04. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiFeatureStatus.js
   Description: 
  */
  
req.figure.ChiFeatureStatus = function(label, oid, parentoids, childoids){

	req.figure.RectFigure.call(this, "ChiFeatureStatus", label, oid, parentoids, childoids);
}

req.figure.ChiFeatureStatus.prototype = new req.figure.RectFigure;

req.figure.ChiFeatureStatus.prototype.type = "req.figure.ChiFeatureStatus";

req.figure.ChiFeatureStatus.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiFeatureStatus",
						dataIndex: "Name",
						sortable: true
					}, {
					header: "parentoids",
					dataIndex: "parentoids",
					hidden: true,
					hideable: false
				}, {
			header: "childoids",
			dataIndex: "childoids",
			hidden: true,
			hideable: false
			}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiFeatureStatus"
				});
}

req.figure.ChiFeatureStatus.prototype.getStore = function(){
	return new Ext.data.Store({
		url: req.data.jsonUrl,
		baseParams: {
			sid: req.data.sid,
			usr_action: "list",
			response_format: "JSON",
			type: "ChiFeatureStatus"
		},
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}, {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

req.figure.ChiFeatureStatus.prototype.showEdit = function(bd, oid){

	Ext.form.Field.prototype.msgTarget = 'side';
	var listeners = {
					"change": function(field, newValue, oldValue){
					req.fieldChanged(field, newValue, oldValue, oid);
																	}
					};
	var form = new Ext.FormPanel({	
		oid: oid,
		labelWidth: 100,	
		frame: true,
		title: 'ChiFeatureStatus Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 100
		},
		defaultType: 'textfield',
		items: [
							{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	         inputType:'textfield',
	        listeners: listeners 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	         inputType:'htmleditor',
	        listeners: listeners 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	         inputType:'textfield',
	        listeners: listeners 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	         inputType:'textfield',
	        listeners: listeners 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	         inputType:'textfield',
	        listeners: listeners 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	         inputType:'textfield',
	        listeners: listeners 
	        }

			]
	});
	
	form.render(bd);


Ext.Ajax.request({
		url: req.data.jsonUrl,
		method: "post",
		params: {
			sid: req.data.sid,
			usr_action: "display",
			response_format: "JSON",
			oid: oid
		},
		success: function(response){
			var data = Ext.util.JSON.decode(response.responseText);			
			var realForm = form.getForm();
			
			
			realForm.findField("Name").setValue(data.node.values[1].Name.value);
			realForm.findField("Notes").setValue(data.node.values[1].Notes.value);
			realForm.findField("created").setValue(data.node.values[1].created.value);
			realForm.findField("creator").setValue(data.node.values[1].creator.value);
			realForm.findField("last_editor").setValue(data.node.values[1].last_editor.value);
			realForm.findField("modified").setValue(data.node.values[1].modified.value);
			}
	});
};
req.figure.ChiFeatureStatus.prototype.getConstraints = function() {
	return {
	//Parents
	
	//Children
	};
}
