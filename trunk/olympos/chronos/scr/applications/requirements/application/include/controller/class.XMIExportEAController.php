<!-- PROTECTED REGION ID(application/include/controller/class.XMIImportEAController.php/Body) START --><?php/** * wCMF - wemove Content Management Framework * Copyright (C) 2005 wemove digital solutions GmbH * * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * * $Id: class.XMLExportController.php 295 2007-02-17 17:25:25Z iherwig $ */require_once(BASE."wcmf/lib/presentation/class.Controller.php");require_once(BASE."wcmf/lib/persistence/class.PersistenceFacade.php");require_once(BASE."wcmf/lib/model/class.PersistentIterator.php");require_once(BASE."wcmf/lib/util/class.InifileParser.php");require_once(BASE."wcmf/lib/util/class.FileUtil.php");class XMIExportEAController extends Controller{	var $SRCFILE = "uml2.1-xmi2.1.xml";	var $DOCFILE = "export.xml";	var $XML_VERSION = "1.0";	var $ENCODING = "UTF-8";	var $XMI_VERSION = "1.1";	var $UML_NAMESPACE = "omg.org/UML1.3";	var $XMI_EXPORTER = "ChiRequirementsXMIExport";	var $XMI_EXPORTER_VERSION = "0.1";	var $PACKAGE_NAME = "ChiRequirementsPackage.000";	var $NAME = "name";	var $XMI_ID = "xmi:id";	var $XMI_IDREF = "xmi:idref";	var $XMI_TYPE = "xmi:type";	var $BASE_REQUIREMENT = "base_Requirement";	var $SCOPE = "scope";	var $VISIBILITY = "visibility";	var $UML_REQUIREMENT = "uml:Requirement";	var $dom;	var $model;	var $package;	var $elements;	var $connectors;	var $stereotypeExt = array();	var $realIdCounter = 0;	var $lastTime = 0;		function check($msg) {		$newTime = microtime(true);				echo $newTime - $this->lastTime, ": $msg<br/ >";				$this->lastTime = $newTime;	}		function execute()	{		$this->check("start");		$loadDom = new DOMDocument();		$loadDom->load($this->SRCFILE);		$this->check("file parsed");				$root = $loadDom->documentElement;				echo $root;				$rootClone = $root->cloneNode(true);		$dom = new DOMDocument($this->XML_VERSION);		$rootClone = $dom->importNode($rootClone, true);				$dom->appendChild($rootClone);		unset($root);		unset($loadDom);				$this->dom = $dom;		$tmp = $dom->getElementsByTagname("Model");		$this->model = $tmp->item(0);		$tmp = $dom->getElementsByTagname("packagedElement");		$this->package = $tmp->item(0);		$tmp = $dom->getElementsByTagname("elements");		$this->elements = $tmp->item(0);		$tmp = $dom->getElementsByTagname("connectors");		$this->connectors = $tmp->item(0);		unset($tmp);		$this->check("found anchors");				$persistenceFacade = &PersistenceFacade::getInstance();		$reqStatusIds = $persistenceFacade->getOIDs("ChiRequirementStatus");		$reqStatus = array();		foreach ($reqStatusIds as $currReqStatusId) {			$currReqStatus = $persistenceFacade->load($currReqStatusId);			$reqStatus[$currReqStatus->getId()] = $currReqStatus->getName();		}		$reqTypeIds = $persistenceFacade->getOIDS("ChiRequirementType");		$reqType = array();		foreach($reqTypeIds as $currReqTypeId) {			$currReqType = $persistenceFacade->load($currReqTypeId);			$reqType[$currReqType->getid()] = $currReqType->getName();		}		$featureStatusIds = $persistenceFacade->getOIDS("ChiFeatureStatus");		$featureStatus = array();		foreach($featureStatusIds as $currFeatureStatusId) {			$currFeatureStatus = $persistenceFacade->load($currFeatureStatusId);			$featureStatus[$currFeatureStatus->getid()] = $currFeatureStatus->getName();		}		$authorIds = $persistenceFacade->getOIDS("ChiAuthors");		$author = array();		foreach($authorIds as $currAuthorId) {			$currAuthor = $persistenceFacade->load($currAuthorId);			$author[$currAuthor->getid()] = $currAuthor->getName();		}		$this->check("extracted array");				$goalIds = $persistenceFacade->getOIDS("ChiGoal");		foreach($goalIds as $currGoalId) {			$currGoal = $persistenceFacade->load($currGoalId, BUILDDEPTH_INFINITE);			/* @var $currGoal ChiGoal */							$this->check("starting $currGoalId");						$this->addClass($currGoal->getName(), $currGoalId);							$chiGoal = $dom->createElement("Chronos:ChiGoal");			$chiGoal->setAttribute($this->BASE_REQUIREMENT, $currGoalId);			$chiGoal->setAttribute("ChiGoal", "50");			$this->model->appendChild($chiGoal);							$elem = $this->addElem($this->UML_REQUIREMENT, $currGoal->getName(), $currGoalId);			$this->addModel($elem);			$this->addProperties($elem, "Requirement", $currGoal->getNotes(), $currGoal->getAlias(), "ChiGoal");			$this->addModelDocument($elem);							$tags = $this->addTags($elem);			$tagCounter = 0;			$this->addTag($tags, $currGoalId . "." . $tagCounter++, "Priority", "50", $currGoalId);							$this->addXrefs($elem);			$this->addExtendedProperties($elem);			$goalLinks = $this->addLinks($elem);			$reqs = $currGoal->getChiRequirementList();							foreach ($reqs as $currReq) {				/* @var $currReq ChiRequirement */				$currReqId = "ChiRequirement:" . $currReq->getId();				$this->check("starting $currReqId");								$class = $this->addClass($currReq->getName(), $currReqId);				$ownedAttrId = $currReqId . ".property";				$assocId = "Association." . $currReqId;				$this->addOwnedAttribute($class, $ownedAttrId, $assocId, $currGoalId);				$assoc = $this->addClass("containing", $assocId, "uml:Association");				$this->addMemberEnd($assoc, $ownedAttrId);				$memberEndId = $assocId . ".MemberEnd";				$this->addMemberEnd($assoc, $memberEndId);				$this->addOwnedEnd($assoc, $memberEndId, $assocId, $currReqId);				$chiReq = $dom->createElement("Chronos:ChiRequirement");				$chiReq->setAttribute($this->BASE_REQUIREMENT, $currReqId);				$chiReq->setAttribute("ChiRequirement", "none");				$this->model->appendChild($chiReq);				$elem = $this->addElem($this->UML_REQUIREMENT, $currReq->getName(), $currReqId);				$this->addModel($elem);				$this->addProperties($elem, "Requirement", $currReq->getNotes(), $currReq->getAlias(), "ChiRequirement");				$this->addModelDocument($elem);				$tags = $this->addTags($elem);				$tagCounter = 0;				$this->addTag($tags, $currReqId . "." . $tagCounter++, "Author", $this->getSet($author, $currReq->getAuthor()), $currReqId);				$this->addTag($tags, $currReqId . "." . $tagCounter++, "Priority", $currReq->getPriority(), $currReqId);				$this->addTag($tags, $currReqId . "." . $tagCounter++, "Proofreader", $this->getSet($author, $currReq->getProofreader()), $currReqId);				$this->addTag($tags, $currReqId . "." . $tagCounter++, "Status", $this->getSet($reqStatus, $currReq->getStatus()), $currReqId);				$this->addTag($tags, $currReqId . "." . $tagCounter++, "Type", $this->getSet($reqType, $currReq->getReqType()), $currReqId);				$this->addXrefs($elem);				$this->addExtendedProperties($elem);				$reqLinks = $this->addLinks($elem);				$this->addLink($goalLinks, "Aggregation", $assocId, $currReqId, $currGoalId);				$this->addLink($reqLinks, "Aggregation", $assocId, $currReqId, $currGoalId);				$conn = $this->addConnector($assocId);				$this->addEdge($conn, "source", $currGoalId, "Requirement", $currGoal->getName());				$this->addEdge($conn, "target", $currReqId, "Requirement", $currReq->getName(), "composite");				$this->addModel($conn);				$this->addConnProperties($conn, "Aggregation", "Strong");				$modifiers = $dom->createElement("modifiers");				$modifiers->setAttribute("isRoot", "false");				$modifiers->setAttribute("isLeaf", "false");				$conn->appendChild($modifiers);				$this->addDocumentation($conn);				$this->addLabels($conn, "containing");				$this->addConnExtendedProperties($conn);				$this->addXrefs($conn);				$this->addTags($conn);				$issues = $currReq->getChiIssueList();				foreach($issues as $currIssue) {					/* @var $currIssue ChiIssue */											$currIssueId = "ChiIssue:" . $currIssue->getId();											$this->check("starting $currIssueId");										$this->addClass($currIssue->getName(), $currIssueId);					$dependId = "Dependency." . currIssueId;					$this->addDependency("breaking", $dependId, $currReqId, $currIssueId);											$chiIssue = $dom->createElement("Chronos:ChiIssue");					$chiIssue->setAttribute("base_Issue", $currIssueId);					$chiIssue->setAttribute("ChiIssue", "none");					$this->model->appendChild($chiIssue);											$chiDepend = $dom->createElement("thecustomprofile:brakes");					$chiDepend->setAttribute("base_Dependency", $dependId);					$this->model->appendChild($chiDepend);											$elem = $this->addElem("uml:Issue", $currIssue->getName(), $currIssueId);											$this->addModel($elem);					$this->addProperties($elem, "Issue", $currIssue->getNotes(), $currIssue->getAlias(), "ChiIssue");					$this->addModelDocument($elem);											$tags = $this->addTags($elem);					$tagCounter = 0;					$this->addTag($tags, $currIssueId . "." . $tagCounter++, "Author", $this->getSet($author, $currIssue->getAuthor()), $currIssueId);					$this->addTag($tags, $currIssueId . "." . $tagCounter++, "Responsible", $this->getSet($author, $currIssue->getResponsible()), $currIssueId);											$this->addXrefs($elem);					$this->addExtendedProperties($elem);											$issueLinks = $this->addLinks($elem);											$this->addLink($reqLinks, "Dependency", $currIssueId, $currReqId);					$this->addLink($issueLinks, "Dependency", $currIssueId, $currReqId);											$conn = $this->addConnector($dependId);					$this->addEdge($conn, "source", $currIssueId, "Issue", $currIssue->getName());					$this->addEdge($conn, "target", $currReqId, "Requirement", $currReq->getName());					$this->addModel($conn);					$this->addConnProperties($conn, "Dependency", null, "brakes");					$this->addDocumentation($conn);					$this->addLabels($conn, "breaking");					$this->addConnExtendedProperties($conn, "�brakes�");					$this->addXrefs($conn);					$this->addTags($conn);				}				$features = $currReq->getChiFeatureList();				foreach ($features as $currFeature) {					/* @var $currFeature ChiFeature */											$currFeatureId = "ChiFeature:" . $currFeature->getId();					$this->check("starting $currFeatureId");										if (!array_key_exists($currFeatureId, $this->processedFeatures)) {						$this->processedFeatures[$currFeatureId] = true;						$this->addClass($currFeature->getName(), $currFeatureId);						$chiFeature = $dom->createElement("Chronos:ChiFeature");						$chiFeature->setAttribute("base_Feature", $currFeatureId);						$this->model->appendChild($chiFeature);						$elem = $this->addElem("uml:Feature", $currFeature->getName(), $currFeatureId);						$this->addModel($elem);						$this->addProperties($elem, "Feature", $currFeature->getNotes(), $currFeature->getAlias(), "ChiFeature");						$this->addModelDocument($elem);						$tags = $this->addTags($elem);						$tagCounter = 0;						$this->addTag($tags, $currFeatureId . "." . $tagCounter++, "Author", $this->getSet($author, $currFeature->getAuthor()), $currFeatureId);						$this->addTag($tags, $currFeatureId . "." . $tagCounter++, "Proofreader", $this->getSet($author, $currFeature->getProofreader()), $currFeatureId);						$this->addTag($tags, $currFeatureId . "." . $tagCounter++, "Status", $this->getSet($featureStatus, $currFeature->getStatus()), $currFeatureId);												$this->addXrefs($elem);						$this->addExtendedProperties($elem);												$featureLinks = $this->addLinks($elem);					}										$realId = "Realization." . $this->realIdCounter++;					$this->addRealization("realizing", $realId, $currReqId, $currFeatureId);										$this->addLink($reqLinks, "Realization", $realId, $currFeatureId, $currReqId);					$this->addLink($featureLinks, "Realization", $realId, $currFeatureId, $currReqId);										$conn = $this->addConnector($realId);					$this->addEdge($conn, "source", $currFeatureId, "Feature", $currFeature->getName());					$this->addEdge($conn, "target", $currReqId, "Requirement", $currReq->getName(), "none", "true");					$this->addModel($conn);					$this->addConnProperties($conn, "Realisation");					$this->addDocumentation($conn);					$this->addLabels($conn, "realizing");					$this->addConnExtendedProperties($conn);					$this->addXrefs($conn);					$this->addTags($conn);				}			}		}		$this->check("calulation done");				echo "output to: " . realpath($this->DOCFILE) . "<br />";				echo "Output file size: " . $dom->save(realpath($this->DOCFILE)) . "<br />";		$this->check("finished");				return false;	}		function executeKernel() {		}		function hasView() {		return false;	}		function getSet($array, $selected) {		$result = "#NOTES#Values: ";				$first = true;		foreach ($array as $val) {			if (!$first) {				$result .= ",";			} else {				$first = false;			}			$result .= $val;		}				$result .= chr(0x0a);		$result .= $array[$selected];				return $result;	}	function addConnExtendedProperties($container, $conditional = null) {		$extProp = $this->dom->createElement("extendedProperties");		$extProp->setAttribute("virtualInheritance", "0");		if (!is_null($conditional)) {			$extProp->setAttribute("conditional", $conditional);		}		$container->appendChild($extProp);		return $extProp;	}	function addLabels($container, $name) {		$labels = $this->dom->createElement("labels");		$labels->setAttribute("mt", $name);		$container->appendChild($labels);		return $labels;	}	function addDocumentation($container) {		$documentation = $this->dom->createElement("documentation");		$container->appendChild($documentation);		return $documentation;	}	function addConnProperties($container, $eaType, $subtype = null, $stereotype = null) {		$props = $this->dom->createElement("properties");		$props->setAttribute("ea_type", $eaType);		if (!is_null($subtype)) {			$props->setAttribute("subtype", $subtype);		}		if (!is_null($stereotype)) {			$props->setAttribute("stereotype", $stereotype);		}		$props->setAttribute("direction", "Source -> Destination");		$container->appendChild($props);					return $props;	}	function addEdge($container, $edgeName, $idref, $type, $name, $aggregation = "none", $navigable = "false") {		$edge = $this->dom->createElement($edgeName);		$edge->setAttribute($this->XMI_IDREF, $idref);		$container->appendChild($edge);		$model = $this->dom->createElement("model");		$model->setAttribute("type", $type);		$model->setAttribute("name", $name);		$edge->appendChild($model);		$role = $this->dom->createElement("role");		$role->setAttribute($this->VISIBILITY, "Public");		$role->setAttribute("targetScope", "instance");		$edge->appendChild($role);		$type = $this->dom->createElement("type");		$type->setAttribute("aggregation", $aggregation);		$type->setAttribute("containment", "Unspecified");		$edge->appendChild($type);		$constraints = $this->dom->createElement("constraints");		$edge->appendChild($constraints);		$modifiers = $this->dom->createElement("modifiers");		$modifiers->setAttribute("isOrdered", "false");		$modifiers->setAttribute("changeable", "none");		$modifiers->setAttribute("isNavigable", $navigable);		$edge->appendChild($modifiers);		$documentation = $this->dom->createElement("documentation");		$edge->appendChild($documentation);		$tags = $this->dom->createElement("tags");		$edge->appendChild($tags);		return $edge;	}	function addConnector($idref) {		$conn = $this->dom->createElement("connector");		$conn->setAttribute($this->XMI_IDREF, $idref);		$this->connectors->appendChild($conn);		return $conn;	}	function addLink($container, $linkType, $id, $start, $end) {		$link = $this->dom->createElement($linkType);		$link->setAttribute($this->XMI_ID, $id);		$link->setAttribute("start", $start);		$link->setAttribute("end", $end);		$container->appendChild($link);		return $link;	}	function addOwnedEnd($container, $id, $assoc, $idref) {		$ownedEnd = $this->dom->createElement("ownedEnd");		$ownedEnd->setAttribute($this->XMI_TYPE, "uml:Property");		$ownedEnd->setAttribute($this->XMI_ID, $id);		$ownedEnd->setAttribute("association", $assoc);		$ownedEnd->setAttribute($this->VISIBILITY, "public");		$ownedEnd->setAttribute("isOrdered", "false");		$ownedEnd->setAttribute("isDerived", "false");		$ownedEnd->setAttribute("isDerivedUnion", "false");		$ownedEnd->setAttribute("aggregation", "none");		$container->appendChild($ownedEnd);		$type = $this->dom->createElement("type");		$type->setAttribute($this->XMI_IDREF, $idref);		$ownedEnd->appendChild($type);		return $ownedEnd;	}	function addMemberEnd($container, $idref) {		$memberEnd = $this->dom->createElement("memberEnd");		$memberEnd->setAttribute($this->XMI_IDREF, $idref);		$container->appendChild($memberEnd);		return $memberEnd;	}	function addOwnedAttribute($container, $id, $assoc, $idref) {		$ownedAttr = $this->dom->createElement("ownedAttribute");		$ownedAttr->setAttribute($this->XMI_TYPE, "uml:Property");		$ownedAttr->setAttribute($this->XMI_ID, $id);		$ownedAttr->setAttribute("association", $assoc);		$ownedAttr->setAttribute($this->VISIBILITY, "public");		$ownedAttr->setAttribute("isOrdered", "false");		$ownedAttr->setAttribute("isDerived", "false");		$ownedAttr->setAttribute("isDerivedUnion", "false");		$ownedAttr->setAttribute("aggregation", "composite");		$container->appendChild($ownedAttr);		$type = $this->dom->createElement("type");		$type->setAttribute($this->XMI_IDREF, $idref);		$ownedAttr->appendChild($type);		return $ownedAttr;	}	function addLinks($container) {		$links = $this->dom->createElement("links");		$container->appendChild($links);		return $links;	}	function addExtendedProperties($container) {		$extProp = $this->dom->createElement("extendedProperties");		$extProp->setAttribute("tagged", "0");		$extProp->setAttribute("package_name", "requirement");		$container->appendChild($extProp);		return $extProp;	}	function addXrefs($container) {		$xrefs = $this->dom->createElement("xrefs");		$container->appendChild($xrefs);		return $xrefs;	}	function addTag($container, $tagId, $name, $value, $elemId) {		$tag = $this->dom->createElement("tag");		$tag->setAttribute($this->XMI_ID, $tagId);		$tag->setAttribute($this->NAME, $name);		$tag->setAttribute("value", $value);		$tag->setAttribute("modelElement", $elemId);		$container->appendChild($tag);		return $tag;	}		function addTags($container) {		$tags = $this->dom->createElement("tags");		$container->appendChild($tags);		return $tags;	}	function addModelDocument($container) {		$modelDoc = $this->dom->createElement("modelDocument");		$container->appendChild($modelDoc);		return $modelDoc;	}	function addProperties($container, $type, $documentation, $alias, $stereotype) {		$properties = $this->dom->createElement("properties");		$properties->setAttribute("documentation", $documentation);		$properties->setAttribute("isSpecification", "false");		$properties->setAttribute("sType", $type);		$properties->setAttribute("nType", "0");		$properties->setAttribute("alias", $alias);		$properties->setAttribute($this->SCOPE, "public");		$properties->setAttribute("stereotype", $stereotype);		$container->appendChild($properties);		return $properties;	}	function addModel($container) {		$model = $this->dom->createElement("model");		$model->setAttribute("package", $this->PACKAGE_NAME);		$container->appendChild($model);		return $model;	}	function addElem($type, $name, $id) {		$elem = $this->dom->createElement("element");		$elem->setAttribute($this->XMI_IDREF, $id);		$elem->setAttribute($this->NAME, $name);		$elem->setAttribute($this->XMI_TYPE, $type);		$elem->setAttribute($this->SCOPE, "public");		$this->elements->appendChild($elem);		return $elem;	}	function addRealization($name, $id, $supplier, $client) {		$depend = $this->dom->createElement("packagedElement");		$depend->setAttribute($this->XMI_TYPE, "uml:Realization");		$depend->setAttribute($this->NAME, $name);		$depend->setAttribute($this->XMI_ID, $id);		$depend->setAttribute($this->VISIBILITY, "public");		$depend->setAttribute("supplier", $supplier);		$depend->setAttribute("client", $client);		$depend->setAttribute("realizingClassifier", $supplier);				$this->package->appendChild($depend);		return $depend;	}	function addDependency($name, $id, $supplier, $client) {		$depend = $this->dom->createElement("packagedElement");		$depend->setAttribute($this->XMI_TYPE, "uml:Dependency");		$depend->setAttribute($this->NAME, $name);		$depend->setAttribute($this->XMI_ID, $id);		$depend->setAttribute($this->VISIBILITY, "public");		$depend->setAttribute("supplier", $supplier);		$depend->setAttribute("client", $client);		$this->package->appendChild($depend);		return $depend;	}	function addClass($name, $id, $type = "uml:Class") {		$class = $this->dom->createElement("packagedElement");		$class->setAttribute($this->XMI_TYPE, $type);		$class->setAttribute($this->NAME, $name);		$class->setAttribute($this->XMI_ID, $id);		$class->setAttribute($this->VISIBILITY, "public");		$this->package->appendChild($class);		return $class;	}}?><!-- PROTECTED REGION END -->