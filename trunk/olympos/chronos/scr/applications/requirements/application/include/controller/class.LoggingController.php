<?php
/**
 * This file was generated by wCMFGenerator 3.0.0010 from ./model/cwm.uml on Tue May 12 17:41:56 CEST 2009. 
 * Manual modifications should be placed inside the protected regions.
 */
 require_once(BASE."wcmf/lib/presentation/class.Controller.php");
// PROTECTED REGION ID(application/include/controller/class.LoggingController.php/Import) ENABLED START
// PROTECTED REGION END

/**
 * @class LoggingController
 * @ingroup Controller
 * @brief Logs a message from the front-end to application log. 
 * 
 * <b>Input actions:</b>
 * - @em log Logs a message to application log.
 *
 * <b>Output actions:</b>
 * - @em failure If a fatal error occurs
 * - @em ok In any other case
 * 
 * @param[in] logtype The log level (one of <tt>trace</tt>, <tt>log</tt>, <tt>error</tt>).
 * @param[in] msg The log message.
 * 
 * @author 	Niko <enikao@users.sourceforge.net>
 */
class LoggingController extends Controller
{
// PROTECTED REGION ID(application/include/controller/class.LoggingController.php/Body) ENABLED START
  	function hasView()
	{
		return false;
	}

	function executeKernel()
	{
		$logType = $this->_request->getValue('logtype');

		$logger = LoggerManager::getLogger('LoggingController');
		
		switch($logType) {
			case 'trace':
				$logger->trace("Front-end message:\n" . $this->_request->getValue('msg'), __FILE__, __LINE__);
				break;
				
			case 'log':
				$logger->log("Front-end message:\n" . $this->_request->getValue('msg'), __FILE__, __LINE__);
				break;

			case 'error':
				$logger->error("Front-end message:\n" . $this->_request->getValue('msg'), __FILE__, __LINE__);
				break;

			default:
				$logger->error('Invalid logtype given: $logType', __FILE__, __LINE__);
		}
	
		//	Success
		return false;
	}

// PROTECTED REGION END

}
?>