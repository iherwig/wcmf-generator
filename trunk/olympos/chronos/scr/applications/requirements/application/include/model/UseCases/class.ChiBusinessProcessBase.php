<?php
/**
 * This file was generated by wCMFGenerator 2.6.0001 from model/requirements.xmi on 03.04.08 20:09. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.Package.php");

/**
 * @class ChiBusinessProcess
 * ChiBusinessProcess description: A Business Process is a sum of actions that produces a business advantage to the enterprise. It is composed by one or many ChiBusinessUseCases.
 *
 * @author Giuseppe Platania
 * @version 1.0
 */
class ChiBusinessProcessBase extends Package
{
    function ChiBusinessProcessBase($oid=null, $type=null)
    {
    if ($type == null)
      parent::Package($oid, 'ChiBusinessProcess');
    else
      parent::Package($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ChiBusinessProcess");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("A Business Process is a sum of actions that produces a business advantage to the enterprise. It is composed by one or many ChiBusinessUseCases.");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_package_id') $displayName = Message::get("fk_package_id");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_package_id') $description = Message::get("");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkPackageId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_package_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_package_id', DATATYPE_IGNORE);
    }
    function setFkPackageId($fk_package_id)
    {
      return $this->setValue('fk_package_id', $fk_package_id, DATATYPE_IGNORE);
    }
    function getPackageOID()
    {
      $fkValue = $this->getValue('fk_package_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'Package', 'id' => array($fkValue)));
      else
        return null;
    }
    function setPackage(&$node)
    {
      if ($node != null)
        $node->addChild($this);
    }
    function getChiBusinessUseCaseList()
    {
      return $this->getChildrenEx(null, 'ChiBusinessUseCase', array('fk_chibusinessprocess_id' => $this->getDBID()), null);
    }
    function getChiBusinessUseCaseCoreList()
    {
      return $this->getChildrenEx(null, 'ChiBusinessUseCaseCore', array('fk_chibusinessprocess_id' => $this->getDBID()), null);
    }
    function getChiIssueList()
    {
      return $this->getChildrenEx(null, 'ChiIssue', array('fk_chibusinessprocess_id' => $this->getDBID()), null);
    }
    function getChiRequirementList()
    {
      return $this->getChildrenEx(null, 'ChiRequirement', array('fk_chibusinessprocess_id' => $this->getDBID()), null);
    }
    function getPackageList()
    {
      return $this->getChildrenEx(null, 'Package', array('fk_chibusinessprocess_id' => $this->getDBID()), null);
    }
    function getChiFeatureList()
    {
      return $this->getChildrenEx(null, 'ChiFeature', array('fk_chibusinessprocess_id' => $this->getDBID()), null);
    }
    function getChiGoalList()
    {
      return $this->getChildrenEx(null, 'ChiGoal', array('fk_chibusinessprocess_id' => $this->getDBID()), null);
    }
    function getActorList()
    {
      return $this->getChildrenEx(null, 'Actor', array('fk_chibusinessprocess_id' => $this->getDBID()), null);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildren()
     * Override this to include the children of many-to-many relations
     */
    function getChildren()
    {
      // get default children
      $children = parent::getChildren();

      return $children;
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
   /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
