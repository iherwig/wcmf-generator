<?php
/**
 * This file was generated by wCMFGenerator 3.0.0004 from ./model/cwm.uml on Wed Feb 11 14:42:28 CET 2009. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/UseCases/class.ChiWorker.php");

/**
 * @class ChiWorkerExternal
 * ChiWorkerExternal description: A Chi External Worker is an employee that interacts directly with ChiBusinesPartner outside the enterprise.
 *
 * @author 
 * @version 1.0
 */
class ChiWorkerExternalBase extends ChiWorker
{
    function ChiWorkerExternalBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::ChiWorker($oid, 'ChiWorkerExternal');
      else
        parent::ChiWorker($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ChiWorkerExternal");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("A Chi External Worker is an employee that interacts directly with ChiBusinesPartner outside the enterprise.");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_package_id') $displayName = Message::get("fk_package_id");
      if ($name == 'fk_chiworkerexternal_id') $displayName = Message::get("fk_chiworkerexternal_id");
      if ($name == 'is_OfflineUser') $displayName = Message::get("is_OfflineUser");
      if ($name == 'Alias') $displayName = Message::get("Alias");
      if ($name == 'Version') $displayName = Message::get("Version");
      if ($name == 'Name') $displayName = Message::get("Name");
      if ($name == 'Notes') $displayName = Message::get("Notes");
      if ($name == 'created') $displayName = Message::get("created");
      if ($name == 'creator') $displayName = Message::get("creator");
      if ($name == 'last_editor') $displayName = Message::get("last_editor");
      if ($name == 'modified') $displayName = Message::get("modified");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_package_id') $description = Message::get("");
      if ($name == 'fk_chiworkerexternal_id') $description = Message::get("");
      if ($name == 'is_OfflineUser') $description = Message::get("");
      if ($name == 'Alias') $description = Message::get("the Project Id of this object.");
      if ($name == 'Version') $description = Message::get("the model version of this object");
      if ($name == 'Name') $description = Message::get("the name of this object.");
      if ($name == 'Notes') $description = Message::get("the actual description of the object.");
      if ($name == 'created') $description = Message::get("the creation date of this object");
      if ($name == 'creator') $description = Message::get("the user that created this object");
      if ($name == 'last_editor') $description = Message::get("the last user that edited this object");
      if ($name == 'modified') $description = Message::get("the date when this object was modified");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkPackageId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_package_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_package_id', DATATYPE_IGNORE);
    }
    function setFkPackageId($fk_package_id)
    {
      return $this->setValue('fk_package_id', $fk_package_id, DATATYPE_IGNORE);
    }
    function getFkChiworkerexternalId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chiworkerexternal_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chiworkerexternal_id', DATATYPE_IGNORE);
    }
    function setFkChiworkerexternalId($fk_chiworkerexternal_id)
    {
      return $this->setValue('fk_chiworkerexternal_id', $fk_chiworkerexternal_id, DATATYPE_IGNORE);
    }
    function getIsOfflineUser($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('is_OfflineUser', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('is_OfflineUser', DATATYPE_ATTRIBUTE);
    }
    function setIsOfflineUser($is_OfflineUser)
    {
      return $this->setValue('is_OfflineUser', $is_OfflineUser, DATATYPE_ATTRIBUTE);
    }
    function getChiWorkerExternalOID()
    {
      $fkValue = $this->getValue('fk_chiworkerexternal_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiWorkerExternal', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiWorkerExternal(&$node)
    {
      if ($node != null)
        $this->setValue('fk_chiworkerexternal_id', $node->getDBID(), DATATYPE_IGNORE);
    }
    function getPackageOID()
    {
      $fkValue = $this->getValue('fk_package_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'Package', 'id' => array($fkValue)));
      else
        return null;
    }
    function setPackage(&$node)
    {
      if ($node != null)
        $this->setValue('fk_package_id', $node->getDBID(), DATATYPE_IGNORE);
    }
    function getChiWorkerExternalParents()
    {
      return $this->getParentsEx(null, 'ChiWorkerExternal', null, null);
    }
    function getPackageParents()
    {
      return $this->getParentsEx(null, 'Package', null, null);
    }
    /**
     * @deprecated use getChiWorkerExternalChildren() instead
     */
    function getChiWorkerExternalList()
    {
      Message::log("use of deprecated method getChiWorkerExternalList. use getChiWorkerExternalChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiWorkerExternalChildren();
    }
    function getChiWorkerExternalChildren()
    {
      return $this->getChildrenEx(null, 'ChiWorkerExternal', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
    }
    /**
     * @deprecated use getFigureChildren() instead
     */
    function getFigureList()
    {
      Message::log("use of deprecated method getFigureList. use getFigureChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getFigureChildren();
    }
    function getFigureChildren()
    {
      return $this->getChildrenEx(null, 'Figure', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
    }
    /**
     * @deprecated use getNMUCActorChildren() instead
     */
    function getNMUCActorList()
    {
      Message::log("use of deprecated method getNMUCActorList. use getNMUCActorChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getNMUCActorChildren();
    }
    function getNMUCActorChildren()
    {
      return $this->getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
    }
    /**
     * @deprecated use getActorChildren() instead
     */
    function getActorList()
    {
      Message::log("use of deprecated method getActorList. use getActorChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getActorChildren();
    }
    function getActorChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'Actor', null, null);
    }
    /**
     * @deprecated use getChiBusinessUseCaseChildren() instead
     */
    function getChiBusinessUseCaseList()
    {
      Message::log("use of deprecated method getChiBusinessUseCaseList. use getChiBusinessUseCaseChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiBusinessUseCaseChildren();
    }
    function getChiBusinessUseCaseChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiBusinessUseCase', null, null);
    }
    /**
     * @deprecated use getChiBusinessUseCaseCoreChildren() instead
     */
    function getChiBusinessUseCaseCoreList()
    {
      Message::log("use of deprecated method getChiBusinessUseCaseCoreList. use getChiBusinessUseCaseCoreChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiBusinessUseCaseCoreChildren();
    }
    function getChiBusinessUseCaseCoreChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiBusinessUseCaseCore', null, null);
    }
    /**
     * @deprecated use getChiBusinessPartnerChildren() instead
     */
    function getChiBusinessPartnerList()
    {
      Message::log("use of deprecated method getChiBusinessPartnerList. use getChiBusinessPartnerChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiBusinessPartnerChildren();
    }
    function getChiBusinessPartnerChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiBusinessPartner', null, null);
    }
    /**
     * @deprecated use getChiBusinessPartnerPassiveChildren() instead
     */
    function getChiBusinessPartnerPassiveList()
    {
      Message::log("use of deprecated method getChiBusinessPartnerPassiveList. use getChiBusinessPartnerPassiveChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiBusinessPartnerPassiveChildren();
    }
    function getChiBusinessPartnerPassiveChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiBusinessPartnerPassive', null, null);
    }
    /**
     * @deprecated use getChiBusinessPartnerActiveChildren() instead
     */
    function getChiBusinessPartnerActiveList()
    {
      Message::log("use of deprecated method getChiBusinessPartnerActiveList. use getChiBusinessPartnerActiveChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiBusinessPartnerActiveChildren();
    }
    function getChiBusinessPartnerActiveChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiBusinessPartnerActive', null, null);
    }
    /**
     * @deprecated use getChiWorkerChildren() instead
     */
    function getChiWorkerList()
    {
      Message::log("use of deprecated method getChiWorkerList. use getChiWorkerChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiWorkerChildren();
    }
    function getChiWorkerChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiWorker', null, null);
    }
    /**
     * @deprecated use getChiWorkerInternalChildren() instead
     */
    function getChiWorkerInternalList()
    {
      Message::log("use of deprecated method getChiWorkerInternalList. use getChiWorkerInternalChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiWorkerInternalChildren();
    }
    function getChiWorkerInternalChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiWorkerInternal', null, null);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // handle NMUCActor as many-to-many type
      if ($type == 'Actor')
      {
        // for every NMUCActor we have to load the Actor 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActorOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActorOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessUseCase')
      {
        // for every NMUCActor we have to load the ChiBusinessUseCase 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiBusinessUseCaseOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiBusinessUseCaseOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessUseCaseCore')
      {
        // for every NMUCActor we have to load the ChiBusinessUseCaseCore 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiBusinessUseCaseCoreOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiBusinessUseCaseCoreOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartner')
      {
        // for every NMUCActor we have to load the ChiBusinessPartner 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiBusinessPartnerOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiBusinessPartnerOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartnerPassive')
      {
        // for every NMUCActor we have to load the ChiBusinessPartnerPassive 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiBusinessPartnerPassiveOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiBusinessPartnerPassiveOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartnerActive')
      {
        // for every NMUCActor we have to load the ChiBusinessPartnerActive 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiBusinessPartnerActiveOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiBusinessPartnerActiveOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiWorker')
      {
        // for every NMUCActor we have to load the ChiWorker 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiWorkerOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiWorkerOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiWorkerInternal')
      {
        // for every NMUCActor we have to load the ChiWorkerInternal 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiWorkerInternalOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiWorkerInternalOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties)
    {
      // handle NMUCActor as many-to-many type
      if ($type == 'Actor' || PersistenceFacade::getOIDParameter($oid, 'type') == 'Actor')
      {
        // for every NMUCActor we have to get the Actor parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'Actor')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessUseCase' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiBusinessUseCase')
      {
        // for every NMUCActor we have to get the ChiBusinessUseCase parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiBusinessUseCase')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessUseCaseCore' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiBusinessUseCaseCore')
      {
        // for every NMUCActor we have to get the ChiBusinessUseCaseCore parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiBusinessUseCaseCore')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartner' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiBusinessPartner')
      {
        // for every NMUCActor we have to get the ChiBusinessPartner parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiBusinessPartner')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartnerPassive' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiBusinessPartnerPassive')
      {
        // for every NMUCActor we have to get the ChiBusinessPartnerPassive parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiBusinessPartnerPassive')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartnerActive' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiBusinessPartnerActive')
      {
        // for every NMUCActor we have to get the ChiBusinessPartnerActive parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiBusinessPartnerActive')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiWorker' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiWorker')
      {
        // for every NMUCActor we have to get the ChiWorker parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiWorker')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiWorkerInternal' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiWorkerInternal')
      {
        // for every NMUCActor we have to get the ChiWorkerInternal parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiWorkerInternal')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      if ($child != null && $child->getType() == 'Actor')
      {
        // for every Actor we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID(), 'fk_actor_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiWorkerExternal($this);
          $associationNode->setActor($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiBusinessUseCase')
      {
        // for every ChiBusinessUseCase we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID(), 'fk_chibusinessusecase_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiWorkerExternal($this);
          $associationNode->setChiBusinessUseCase($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiBusinessUseCaseCore')
      {
        // for every ChiBusinessUseCaseCore we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID(), 'fk_chibusinessusecasecore_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiWorkerExternal($this);
          $associationNode->setChiBusinessUseCaseCore($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiBusinessPartner')
      {
        // for every ChiBusinessPartner we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID(), 'fk_chibusinesspartner_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiWorkerExternal($this);
          $associationNode->setChiBusinessPartner($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiBusinessPartnerPassive')
      {
        // for every ChiBusinessPartnerPassive we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID(), 'fk_chibusinesspartnerpassive_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiWorkerExternal($this);
          $associationNode->setChiBusinessPartnerPassive($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiBusinessPartnerActive')
      {
        // for every ChiBusinessPartnerActive we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID(), 'fk_chibusinesspartneractive_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiWorkerExternal($this);
          $associationNode->setChiBusinessPartnerActive($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiWorker')
      {
        // for every ChiWorker we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID(), 'fk_chiworker_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiWorkerExternal($this);
          $associationNode->setChiWorker($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiWorkerInternal')
      {
        // for every ChiWorkerInternal we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chiworkerexternal_id' => $this->getDBID(), 'fk_chiworkerinternal_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiWorkerExternal($this);
          $associationNode->setChiWorkerInternal($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'Actor')
      {
        // for every Actor we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiBusinessUseCase')
      {
        // for every ChiBusinessUseCase we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiBusinessUseCaseCore')
      {
        // for every ChiBusinessUseCaseCore we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiBusinessPartner')
      {
        // for every ChiBusinessPartner we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiBusinessPartnerPassive')
      {
        // for every ChiBusinessPartnerPassive we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiBusinessPartnerActive')
      {
        // for every ChiBusinessPartnerActive we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiWorker')
      {
        // for every ChiWorker we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiWorkerInternal')
      {
        // for every ChiWorkerInternal we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
