<?php
/*
 * Copyright (c) 2009 The Olympos Development Team.
 * 
 * http://sourceforge.net/projects/olympos/
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by wCMFGenerator 3.0.0017 from requirements.uml on Wed Nov 18 12:43:46 CET 2009. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.ChiBase.php");

/**
 * @class ActivityDecision
 * ActivityDecision description: A Decision is used to represent a choice amongst several possibilities.  Each transition usually is labeled with a text describing the response to the question posed by the Decision point.
 *
 * @author 
 * @version 1.0
 */
class ActivityDecisionBase extends ChiBase
{
    function ActivityDecisionBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::ChiBase($oid, 'ActivityDecision');
      else
        parent::ChiBase($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ActivityDecision");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("A Decision is used to represent a choice amongst several possibilities.  Each transition usually is labeled with a text describing the response to the question posed by the Decision point.");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_package_id') $displayName = Message::get("fk_package_id");
      if ($name == 'fk_activityset_id') $displayName = Message::get("fk_activityset_id");
      if ($name == 'Alias') $displayName = Message::get("Alias");
      if ($name == 'Status') $displayName = Message::get("Status");
      if ($name == 'Author') $displayName = Message::get("Author");
      if ($name == 'Version') $displayName = Message::get("Version");
      if ($name == 'Name') $displayName = Message::get("Name");
      if ($name == 'Notes') $displayName = Message::get("Notes");
      if ($name == 'created') $displayName = Message::get("created");
      if ($name == 'creator') $displayName = Message::get("creator");
      if ($name == 'last_editor') $displayName = Message::get("last_editor");
      if ($name == 'modified') $displayName = Message::get("modified");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_package_id') $description = Message::get("");
      if ($name == 'fk_activityset_id') $description = Message::get("");
      if ($name == 'Alias') $description = Message::get("the Project Id of this object.");
      if ($name == 'Status') $description = Message::get("");
      if ($name == 'Author') $description = Message::get("");
      if ($name == 'Version') $description = Message::get("the model version of this object");
      if ($name == 'Name') $description = Message::get("the name of this object.");
      if ($name == 'Notes') $description = Message::get("the actual description of the object.");
      if ($name == 'created') $description = Message::get("the creation date of this object");
      if ($name == 'creator') $description = Message::get("the user that created this object");
      if ($name == 'last_editor') $description = Message::get("the last user that edited this object");
      if ($name == 'modified') $description = Message::get("the date when this object was modified");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkPackageId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_package_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_package_id', DATATYPE_IGNORE);
    }
    function setFkPackageId($fk_package_id)
    {
      return $this->setValue('fk_package_id', $fk_package_id, DATATYPE_IGNORE);
    }
    function getFkActivitysetId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_activityset_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_activityset_id', DATATYPE_IGNORE);
    }
    function setFkActivitysetId($fk_activityset_id)
    {
      return $this->setValue('fk_activityset_id', $fk_activityset_id, DATATYPE_IGNORE);
    }
    function getSortkey()
    {
      return $this->getValue('sortkey', DATATYPE_IGNORE);
    }
    function setSortkey($sortkey)
    {
      return $this->setValue('sortkey', $sortkey, DATATYPE_IGNORE);
    }
    function getActivitySetOID()
    {
      $fkValue = $this->getValue('fk_activityset_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ActivitySet', 'id' => array($fkValue)));
      else
        return null;
    }
    function setActivitySet($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setActivitySet'), $args);
        }
        else {
          $this->setValue('fk_activityset_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getPackageOID()
    {
      $fkValue = $this->getValue('fk_package_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'Package', 'id' => array($fkValue)));
      else
        return null;
    }
    function setPackage($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setPackage'), $args);
        }
        else {
          $this->setValue('fk_package_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getActivitySetParents()
    {
      return $this->getParentsEx(null, 'ActivitySet', null, null);
    }
    function getPackageParents()
    {
      return $this->getParentsEx(null, 'Package', null, null);
    }
    /**
     * @deprecated use getADControlFlowSourceEndChildren() instead
     */
    function getADControlFlowSourceEndList()
    {
      Log::warn("use of deprecated method getADControlFlowSourceEndList. use getADControlFlowSourceEndChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getADControlFlowSourceEndChildren();
    }
    function getADControlFlowSourceEndChildren()
    {
      return $this->getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
    }
    /**
     * @deprecated use getActivityChildren() instead
     */
    function getActivityList()
    {
      Log::warn("use of deprecated method getActivityList. use getActivityChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityChildren();
    }
    function getActivityChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'Activity', null, null, false);
    }
    /**
     * @deprecated use getActivityReceiveChildren() instead
     */
    function getActivityReceiveList()
    {
      Log::warn("use of deprecated method getActivityReceiveList. use getActivityReceiveChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityReceiveChildren();
    }
    function getActivityReceiveChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ActivityReceive', null, null, false);
    }
    /**
     * @deprecated use getActivitySendChildren() instead
     */
    function getActivitySendList()
    {
      Log::warn("use of deprecated method getActivitySendList. use getActivitySendChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivitySendChildren();
    }
    function getActivitySendChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ActivitySend', null, null, false);
    }
    /**
     * @deprecated use getActivityInitialChildren() instead
     */
    function getActivityInitialList()
    {
      Log::warn("use of deprecated method getActivityInitialList. use getActivityInitialChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityInitialChildren();
    }
    function getActivityInitialChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ActivityInitial', null, null, false);
    }
    /**
     * @deprecated use getActivityFinalChildren() instead
     */
    function getActivityFinalList()
    {
      Log::warn("use of deprecated method getActivityFinalList. use getActivityFinalChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityFinalChildren();
    }
    function getActivityFinalChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ActivityFinal', null, null, false);
    }
    /**
     * @deprecated use getADControlFlowTargetEndChildren() instead
     */
    function getADControlFlowTargetEndList()
    {
      Log::warn("use of deprecated method getADControlFlowTargetEndList. use getADControlFlowTargetEndChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getADControlFlowTargetEndChildren();
    }
    function getADControlFlowTargetEndChildren()
    {
      return $this->getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
    }
    /**
     * @deprecated use getFigureChildren() instead
     */
    function getFigureList()
    {
      Log::warn("use of deprecated method getFigureList. use getFigureChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getFigureChildren();
    }
    function getFigureChildren()
    {
      return $this->getChildrenEx(null, 'Figure', array('fk_activitydecision_id' => $this->getDBID()), null, false);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // handle ControlFlow as many-to-many type
      if ($type == 'Activity')
      {
        // for every ControlFlow we have to load the Activity 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'Activity')
      {
        // for every ControlFlow we have to load the Activity 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityReceive')
      {
        // for every ControlFlow we have to load the ActivityReceive 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityReceiveOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityReceiveOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityReceive')
      {
        // for every ControlFlow we have to load the ActivityReceive 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityReceiveOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityReceiveOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivitySend')
      {
        // for every ControlFlow we have to load the ActivitySend 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivitySendOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivitySendOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivitySend')
      {
        // for every ControlFlow we have to load the ActivitySend 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivitySendOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivitySendOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityInitial')
      {
        // for every ControlFlow we have to load the ActivityInitial 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityInitialOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityInitialOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityFinal')
      {
        // for every ControlFlow we have to load the ActivityFinal 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityFinalOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityFinalOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'Activity')
      {
        // for every ControlFlow we have to load the Activity 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'Activity')
      {
        // for every ControlFlow we have to load the Activity 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityReceive')
      {
        // for every ControlFlow we have to load the ActivityReceive 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityReceiveOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityReceiveOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityReceive')
      {
        // for every ControlFlow we have to load the ActivityReceive 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityReceiveOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityReceiveOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivitySend')
      {
        // for every ControlFlow we have to load the ActivitySend 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivitySendOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivitySendOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivitySend')
      {
        // for every ControlFlow we have to load the ActivitySend 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivitySendOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivitySendOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityInitial')
      {
        // for every ControlFlow we have to load the ActivityInitial 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityInitialOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityInitialOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityFinal')
      {
        // for every ControlFlow we have to load the ActivityFinal 
        $this->loadChildren('ControlFlow');
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActivityFinalOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActivityFinalOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties, $useRegExp=true)
    {
      // handle ControlFlow as many-to-many type
      if ($type == 'Activity' || PersistenceFacade::getOIDParameter($oid, 'type') == 'Activity')
      {
        // for every ControlFlow we have to get the Activity parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'Activity')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'Activity' || PersistenceFacade::getOIDParameter($oid, 'type') == 'Activity')
      {
        // for every ControlFlow we have to get the Activity parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'Activity')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityReceive' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivityReceive')
      {
        // for every ControlFlow we have to get the ActivityReceive parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivityReceive')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityReceive' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivityReceive')
      {
        // for every ControlFlow we have to get the ActivityReceive parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivityReceive')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivitySend' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivitySend')
      {
        // for every ControlFlow we have to get the ActivitySend parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivitySend')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivitySend' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivitySend')
      {
        // for every ControlFlow we have to get the ActivitySend parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivitySend')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityInitial' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivityInitial')
      {
        // for every ControlFlow we have to get the ActivityInitial parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivityInitial')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityFinal' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivityFinal')
      {
        // for every ControlFlow we have to get the ActivityFinal parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivityFinal')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'Activity' || PersistenceFacade::getOIDParameter($oid, 'type') == 'Activity')
      {
        // for every ControlFlow we have to get the Activity parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'Activity')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'Activity' || PersistenceFacade::getOIDParameter($oid, 'type') == 'Activity')
      {
        // for every ControlFlow we have to get the Activity parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'Activity')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityReceive' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivityReceive')
      {
        // for every ControlFlow we have to get the ActivityReceive parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivityReceive')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityReceive' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivityReceive')
      {
        // for every ControlFlow we have to get the ActivityReceive parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivityReceive')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivitySend' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivitySend')
      {
        // for every ControlFlow we have to get the ActivitySend parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivitySend')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivitySend' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivitySend')
      {
        // for every ControlFlow we have to get the ActivitySend parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivitySend')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityInitial' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivityInitial')
      {
        // for every ControlFlow we have to get the ActivityInitial parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivityInitial')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // handle ControlFlow as many-to-many type
      if ($type == 'ActivityFinal' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ActivityFinal')
      {
        // for every ControlFlow we have to get the ActivityFinal parents 
        $children = parent::getChildrenEx(null, 'ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ActivityFinal')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties, $useRegExp);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      if ($child != null && $child->getType() == 'Activity')
      {
        // for every Activity we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_acontrolflowtarget_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivity($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'Activity')
      {
        // for every Activity we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_acontrolflowsource_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivity($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivityReceive')
      {
        // for every ActivityReceive we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_arcontrolflowsource_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivityReceive($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivityReceive')
      {
        // for every ActivityReceive we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_arcontrolflowtarget_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivityReceive($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivitySend')
      {
        // for every ActivitySend we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_ascontrolflowtarget_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivitySend($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivitySend')
      {
        // for every ActivitySend we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_ascontrolflowsource_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivitySend($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivityInitial')
      {
        // for every ActivityInitial we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_activityinitial_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivityInitial($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivityFinal')
      {
        // for every ActivityFinal we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_activityfinal_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivityFinal($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'Activity')
      {
        // for every Activity we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_acontrolflowtarget_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivity($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'Activity')
      {
        // for every Activity we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_acontrolflowsource_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivity($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivityReceive')
      {
        // for every ActivityReceive we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_arcontrolflowsource_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivityReceive($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivityReceive')
      {
        // for every ActivityReceive we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_arcontrolflowtarget_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivityReceive($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivitySend')
      {
        // for every ActivitySend we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_ascontrolflowtarget_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivitySend($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivitySend')
      {
        // for every ActivitySend we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_ascontrolflowsource_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivitySend($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivityInitial')
      {
        // for every ActivityInitial we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_activityinitial_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivityInitial($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ActivityFinal')
      {
        // for every ActivityFinal we have to insert a ControlFlow
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('ControlFlow', array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_activityfinal_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('ControlFlow', BUILDTYPE_SINGLE);
          $associationNode->setActivityDecision($this);
          $associationNode->setActivityFinal($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'Activity')
      {
        // for every Activity we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_acontrolflowtarget_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'Activity')
      {
        // for every Activity we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_acontrolflowsource_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivityReceive')
      {
        // for every ActivityReceive we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_arcontrolflowsource_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivityReceive')
      {
        // for every ActivityReceive we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_arcontrolflowtarget_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivitySend')
      {
        // for every ActivitySend we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_ascontrolflowtarget_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivitySend')
      {
        // for every ActivitySend we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_ascontrolflowsource_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivityInitial')
      {
        // for every ActivityInitial we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_activityinitial_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivityFinal')
      {
        // for every ActivityFinal we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowsource_id' => $this->getDBID(), 'fk_activityfinal_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'Activity')
      {
        // for every Activity we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_acontrolflowtarget_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'Activity')
      {
        // for every Activity we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_acontrolflowsource_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivityReceive')
      {
        // for every ActivityReceive we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_arcontrolflowsource_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivityReceive')
      {
        // for every ActivityReceive we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_arcontrolflowtarget_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivitySend')
      {
        // for every ActivitySend we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_ascontrolflowtarget_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivitySend')
      {
        // for every ActivitySend we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_ascontrolflowsource_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivityInitial')
      {
        // for every ActivityInitial we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_activityinitial_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ActivityFinal')
      {
        // for every ActivityFinal we have to delete the ControlFlow
        // set childOID parameter to the ControlFlow's object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('fk_adcontrolflowtarget_id' => $this->getDBID(), 'fk_activityfinal_id' => $ids[0]);
        $associationNode = &$this->getFirstChild('ControlFlow', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('ControlFlow', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
