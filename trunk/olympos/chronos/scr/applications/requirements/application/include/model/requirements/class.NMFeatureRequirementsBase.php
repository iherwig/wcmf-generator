<?php
/**
 * This file was generated by wCMFGenerator 3.0.0017 from requirements.uml on Wed Jul 01 16:44:48 CEST 2009. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."wcmf/lib/model/class.Node.php");

/**
 * @class NMFeatureRequirements
 * NMFeatureRequirements description: 
 *
 * @author 
 * @version 1.0
 */
class NMFeatureRequirementsBase extends Node
{
    function NMFeatureRequirementsBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::Node('NMFeatureRequirements', $oid);
      else
        parent::Node($type, $oid);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("NMFeatureRequirements");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'Realization') $displayName = Message::get("Realization");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'Realization') $description = Message::get("");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return true;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getRealization($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Realization', DATATYPE_IGNORE);
      else
        return $this->getValue('Realization', DATATYPE_IGNORE);
    }
    function setRealization($Realization)
    {
      return $this->setValue('Realization', $Realization, DATATYPE_IGNORE);
    }
    function getChiRequirementOID()
    {
      $fkValue = $this->getValue('Realization', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiRequirement', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiRequirement(&$node)
    {
      if ($node != null)
        $this->setValue('Realization', $node->getDBID(), DATATYPE_IGNORE);
    }
    function getChiFeatureOID()
    {
      $fkValue = $this->getValue('Realization', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiFeature', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiFeature(&$node)
    {
      if ($node != null)
        $this->setValue('Realization', $node->getDBID(), DATATYPE_IGNORE);
    }
    function getChiRequirementParents()
    {
      return $this->getParentsEx(null, 'ChiRequirement', null, null);
    }
    function getChiFeatureParents()
    {
      return $this->getParentsEx(null, 'ChiFeature', null, null);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties, $useRegExp=true)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties, $useRegExp);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
