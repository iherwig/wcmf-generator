<?php
/**
 * This file was generated by wCMFGenerator 3.0.0018 from requirements.uml on Mon May 31 15:15:42 CEST 2010. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.EntityBaseExtended.php");

/**
 * @class Relation
 * Relation description: 
 *
 * @author 
 * @version 1.0
 */
class RelationBase extends EntityBaseExtended
{
    function RelationBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::__construct($oid, 'Relation');
      else
        parent::__construct($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("Relation");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'sourceName') $displayName = Message::get("sourceName");
      if ($name == 'sourceMultiplicity') $displayName = Message::get("sourceMultiplicity");
      if ($name == 'sourceNavigability') $displayName = Message::get("sourceNavigability");
      if ($name == 'targetName') $displayName = Message::get("targetName");
      if ($name == 'targetMultiplicity') $displayName = Message::get("targetMultiplicity");
      if ($name == 'targetNavigability') $displayName = Message::get("targetNavigability");
      if ($name == 'relationType') $displayName = Message::get("relationType");
      if ($name == 'Name') $displayName = Message::get("Name");
      if ($name == 'Notes') $displayName = Message::get("Notes");
      if ($name == 'created') $displayName = Message::get("created");
      if ($name == 'creator') $displayName = Message::get("creator");
      if ($name == 'last_editor') $displayName = Message::get("last_editor");
      if ($name == 'modified') $displayName = Message::get("modified");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'sourceName') $description = Message::get("");
      if ($name == 'sourceMultiplicity') $description = Message::get("");
      if ($name == 'sourceNavigability') $description = Message::get("");
      if ($name == 'targetName') $description = Message::get("");
      if ($name == 'targetMultiplicity') $description = Message::get("");
      if ($name == 'targetNavigability') $description = Message::get("");
      if ($name == 'relationType') $description = Message::get("the type of relation");
      if ($name == 'Name') $description = Message::get("the name of this object.");
      if ($name == 'Notes') $description = Message::get("the actual description of the object.");
      if ($name == 'created') $description = Message::get("the creation date of this object");
      if ($name == 'creator') $description = Message::get("the user that created this object");
      if ($name == 'last_editor') $description = Message::get("the last user that edited this object");
      if ($name == 'modified') $description = Message::get("the date when this object was modified");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return true;
    }
    /**
     * Getter/Setter for properties
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getSourceName($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('sourceName', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('sourceName', DATATYPE_ATTRIBUTE);
    }
    function setSourceName($sourceName)
    {
      return $this->setValue('sourceName', $sourceName, DATATYPE_ATTRIBUTE);
    }
    function getSourceMultiplicity($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('sourceMultiplicity', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('sourceMultiplicity', DATATYPE_ATTRIBUTE);
    }
    function setSourceMultiplicity($sourceMultiplicity)
    {
      return $this->setValue('sourceMultiplicity', $sourceMultiplicity, DATATYPE_ATTRIBUTE);
    }
    function getSourceNavigability($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('sourceNavigability', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('sourceNavigability', DATATYPE_ATTRIBUTE);
    }
    function setSourceNavigability($sourceNavigability)
    {
      return $this->setValue('sourceNavigability', $sourceNavigability, DATATYPE_ATTRIBUTE);
    }
    function getTargetName($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('targetName', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('targetName', DATATYPE_ATTRIBUTE);
    }
    function setTargetName($targetName)
    {
      return $this->setValue('targetName', $targetName, DATATYPE_ATTRIBUTE);
    }
    function getTargetMultiplicity($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('targetMultiplicity', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('targetMultiplicity', DATATYPE_ATTRIBUTE);
    }
    function setTargetMultiplicity($targetMultiplicity)
    {
      return $this->setValue('targetMultiplicity', $targetMultiplicity, DATATYPE_ATTRIBUTE);
    }
    function getTargetNavigability($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('targetNavigability', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('targetNavigability', DATATYPE_ATTRIBUTE);
    }
    function setTargetNavigability($targetNavigability)
    {
      return $this->setValue('targetNavigability', $targetNavigability, DATATYPE_ATTRIBUTE);
    }
    function getRelationType($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('relationType', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('relationType', DATATYPE_ATTRIBUTE);
    }
    function setRelationType($relationType)
    {
      return $this->setValue('relationType', $relationType, DATATYPE_ATTRIBUTE);
    }
    /**
     * Getter/Setter for related objects
     */
    function __call($name, $arguments)
    {
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties, $useRegExp=true)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties, $useRegExp);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
