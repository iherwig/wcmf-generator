<?php
/*
 * Copyright (c) 2009 The Olympos Development Team.
 * 
 * http://sourceforge.net/projects/olympos/
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by wCMFGenerator 3 from example-data/wcmf/requirements.uml on 2009-05-28 11:59. 
 * Manual modifications should be placed inside the protected regions.
 */
 require_once(BASE."wcmf/lib/presentation/class.Controller.php");
// PROTECTED REGION ID(application/include/controller/class.UWMDocExporterController.php/Import) ENABLED START
require_once (BASE.'wcmf/lib/persistence/class.PersistenceFacade.php');

require_once('class.TemplateListController.php');

require_once ('class.OawUtil.php');
require_once ('class.UwmUtil.php');
require_once('class.ExportShutdownHandler.php');

// PROTECTED REGION END

/**
 * @class UWMDocExporterController
 * @ingroup Controller
 * @brief @class UWMDocExporterController
 * @ingroup Controller
 * @brief Generates documentation out of the passed model, and returns the documentation file. 
 * <b>Input actions:</b> - @em exportDoc Generates a documentation file. 
 * <b>Output actions:</b> - @em failure If a fatal error occurs 
 * @param[in] startModel The OID of the model to generate UML for.
 * @param[in] startPackage The OID of the package to generate UML for.
 * @param[in] exportFormat The format to export documentation in, must be one of $this-&gt;availableFormats.
 * @param[in] templateName The template to export. 
 * 
 * The following configuration settings are defined for this controller:
 *
 * [actionmapping]
 * ??exportDoc = UWMDocExporterController
 *
 * [views]
 * 
 * @author 
 * @version 1.0
 */
class UWMDocExporterController extends Controller
{
// PROTECTED REGION ID(application/include/controller/class.UWMDocExporterController.php/Body) ENABLED START
  	private $lastTime = 0;

	private $availableFormats = array('doc', 'odt', 'pdf');
	const DEFAULT_EXPORT_FORMAT = 'doc';
	
	private $availableTemplates = null;
	const DEFAULT_TEMPLATE_NAME = 'standard';

	private function check($msg)
	{
		$newTime = microtime(true);
	
		//echo $newTime - $this->lastTime, ": $msg<br/ >";
		
		$this->lastTime = $newTime;
	}

	public function execute()
	{
		$this->check("start");
	
		$workingDir = OawUtil::tempName();
		mkdir($workingDir);
	
		$tmpUwmExportPath = "$workingDir/cwm-source.xml";
		touch($tmpUwmExportPath);
	
		$startModel = $this->_request->getValue('startModel');
		$startPackage = $this->_request->getValue('startPackage');

		if ($startModel || $startPackage) {
			UwmUtil::exportXml($tmpUwmExportPath, $startModel, $startPackage);
		
			OawUtil::setupExecutable();
			
			$exportFormatParam = $this->_request->getValue('exportFormat');
			if (array_search($exportFormatParam, $this->availableFormats)) {
				$exportFormat = $exportFormatParam;
			} else {
				$exportFormat = self::DEFAULT_EXPORT_FORMAT;
			}
			
			$this->getAvailableTemplates();
	
			$templateNameParam = $this->_request->getValue('templateName');
			if (array_search($templateNameParam, $this->availableTemplates)) {
				$templateName = $templateNameParam;
			} else {
				$templateName = self::DEFAULT_TEMPLATE_NAME;
			}		
		
			$propertyPath = "$workingDir/doc-export.properties";
			$propertyFile = fopen($propertyPath, 'w');
			fwrite($propertyFile, "workingDir = $workingDir\n");
			fwrite($propertyFile, "templateName = $templateName\n");
			fwrite($propertyFile, "exportFormat = $exportFormat\n");
			fclose($propertyFile);
		
			$contentPath = $this->createTempFile("$workingDir/content.xml");
			$stylesPath = $this->createTempFile("$workingDir/styles.xml");
			$openofficeTmp0Path = $this->createTempFile("$workingDir/document-tmp0.odt");
			$openofficePath = $this->createTempFile("$workingDir/document-tmp1.odt");
			$exportFile = $this->createTempFile("$workingDir/document-export.$exportFormat");
		
			//header('Content-type: text/plain');
			header('Content-type: application/octet-stream');
			header('Content-Disposition: attachment; filename="cwm-documentation-export.' . $exportFormat . '"');
		
			$this->check("start generator");
		
			$runCfg = OawUtil::runOaw($propertyPath, 'cartridge/DocumentGeneration/workflow/cwm2word.oaw');
		
			$this->check('Generator finished');
		
			if (filesize($exportFile) == 0) {
				$this->check('Zero return file size');
				
				return false;
			}
			
			readfile($exportFile);
		
			$this->check('File written to output');
	
			unlink($exportFile);
			unlink($openofficePath);
			unlink($openofficeTmp0Path);
			unlink($stylesPath);
			unlink($contentPath);
			unlink($propertyPath);
			unlink($tmpUwmExportPath);
			rmdir($workingDir);
	
			ExportShutdownHandler::success();
	
			$this->check("finished");
		}
	
		return false;
	}

	public function hasView()
	{
		return false;
	}

	private function createTempFile($path) {
		touch($path);
		chmod($path, 0777);
	
		return $path;
	}
	
	private function getAvailableTemplates() {
		$templatespath = TemplateListController::getTemplatesPath();
		$this->availableTemplates = TemplateListController::getTemplates($templatespath);
	}

  /**
   * @see Controller::executeKernel()
   */
  function executeKernel()
  {
    return true;
  }
// PROTECTED REGION END

}
?>
