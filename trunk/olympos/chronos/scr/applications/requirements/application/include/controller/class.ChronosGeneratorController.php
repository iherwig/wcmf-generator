<?php
/*
 * Copyright (c) 2009 The Olympos Development Team.
 *
 * http://sourceforge.net/projects/olympos/
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by wCMFGenerator 3 from example-data/wcmf/requirements.uml on 2009-05-28 11:59.
 * Manual modifications should be placed inside the protected regions.
 */
require_once (BASE."wcmf/lib/presentation/class.Controller.php");
// PROTECTED REGION ID(application/include/controller/class.ChronosGeneratorController.php/Import) ENABLED START
require_once (BASE.'wcmf/lib/persistence/class.PersistenceFacade.php');

require_once ('class.OawUtil.php');
require_once ('class.UwmUtil.php');
require_once ('class.ExportShutdownHandler.php');

// PROTECTED REGION END

/**
 * @class ChronosGeneratorController
 *
 * The following configuration settings are defined for this controller:
 *
 * [actionmapping]
 * ??generateApp = ChronosGeneratorController
 *
 * [views]
 *
 * @author
 * @version 1.0
 */
class ChronosGeneratorController extends Controller
{
	// PROTECTED REGION ID(application/include/controller/class.ChronosGeneratorController.php/Body) ENABLED START
	private $PROPERTIES_TEMPLATE_PATH;

	private $lastTime = 0;

	function ChronosGeneratorController() {
		$this->PROPERTIES_TEMPLATE_PATH = BASE.'application/chiCmf-template.properties';
	}

	private function check($msg)
	{
		$newTime = microtime(true);
	
		echo $newTime-$this->lastTime, ": $msg<br/ >";
	
		$this->lastTime = $newTime;
	}

	/**
	 * @see Controller::executeKernel()
	 */
	public function executeKernel()
	{
		$this->check("start");
	
		$startModel = $this->_request->getValue('startModel');
	
		if ($startModel) {
			$tmpUwmExportPath = OawUtil::tempName();
			UwmUtil::exportXml($tmpUwmExportPath, $startModel, null);
		
			$this->check('Model exported');
		
			OawUtil::setupExecutable();
		
			$modelPath = OawUtil::tempName();
			$targetDir = BASE.rand(0, 0xffffff);
			$transformedModelPath = "$targetDir/transformedModel.uml";
		
			$propertyPath = OawUtil::tempName();
			copy($this->PROPERTIES_TEMPLATE_PATH, $propertyPath);
			$propertyFile = fopen($propertyPath, 'a');
			fwrite($propertyFile, "modelXmlFile = $tmpUwmExportPath\n");
			fwrite($propertyFile, "modelUmlFile = $modelPath\n");
			fwrite($propertyFile, "targetDir = $targetDir\n");
			fwrite($propertyFile, "transformedModelUmlFile = $transformedModelPath\n");
			fclose($propertyFile);
		
			//header('Content-type: text/plain');
			
			$this->check("start generator");
		
			$runCfg = OawUtil::runOaw($propertyPath, 'cartridge/ChiCmf/workflow/ChronosGenerator.oaw');
		
			$this->check('Generator finished');
		
			//unlink($modelPath);
			//unlink($tmpUwmExportPath);
			
			ExportShutdownHandler::success();
		
			$this->_response->setValue('oawMessages', $runCfg['stdout']);
			$this->_response->setValue('generatedPath', "$targetDir/application");
		
			$this->check("finished");
		}
	
		return false;
	}

	public function hasView()
	{
		return false;
	}

	private function createTempFile($path) {
		touch($path);
		chmod($path, 0777);
	
		return $path;
	}

	private function getAvailableTemplates() {
		$templatespath = TemplateListController::getTemplatesPath();
		$this->availableTemplates = TemplateListController::getTemplates($templatespath);
	}

	// PROTECTED REGION END
	
}

?>
