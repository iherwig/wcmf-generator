<?php
/*
 * Copyright (c) 2009 The Olympos Development Team.
 * 
 * http://sourceforge.net/projects/olympos/
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by wCMFGenerator 3.0.0018 from requirements.uml on Thu Nov 26 12:45:13 CET 2009. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.EntityBaseExtended.php");

/**
 * @class ControlFlow
 * ControlFlow description: 
 *
 * @author 
 * @version 1.0
 */
class ControlFlowBase extends EntityBaseExtended
{
    function ControlFlowBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::__construct($oid, 'ControlFlow');
      else
        parent::__construct($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ControlFlow");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_activityfinal_id') $displayName = Message::get("fk_activityfinal_id");
      if ($name == 'fk_activityinitial_id') $displayName = Message::get("fk_activityinitial_id");
      if ($name == 'fk_ascontrolflowsource_id') $displayName = Message::get("fk_ascontrolflowsource_id");
      if ($name == 'fk_ascontrolflowtarget_id') $displayName = Message::get("fk_ascontrolflowtarget_id");
      if ($name == 'fk_arcontrolflowtarget_id') $displayName = Message::get("fk_arcontrolflowtarget_id");
      if ($name == 'fk_arcontrolflowsource_id') $displayName = Message::get("fk_arcontrolflowsource_id");
      if ($name == 'fk_adcontrolflowsource_id') $displayName = Message::get("fk_adcontrolflowsource_id");
      if ($name == 'fk_adcontrolflowtarget_id') $displayName = Message::get("fk_adcontrolflowtarget_id");
      if ($name == 'fk_acontrolflowsource_id') $displayName = Message::get("fk_acontrolflowsource_id");
      if ($name == 'fk_acontrolflowtarget_id') $displayName = Message::get("fk_acontrolflowtarget_id");
      if ($name == 'guard') $displayName = Message::get("guard");
      if ($name == 'Name') $displayName = Message::get("Name");
      if ($name == 'Notes') $displayName = Message::get("Notes");
      if ($name == 'created') $displayName = Message::get("created");
      if ($name == 'creator') $displayName = Message::get("creator");
      if ($name == 'last_editor') $displayName = Message::get("last_editor");
      if ($name == 'modified') $displayName = Message::get("modified");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_activityfinal_id') $description = Message::get("");
      if ($name == 'fk_activityinitial_id') $description = Message::get("");
      if ($name == 'fk_ascontrolflowsource_id') $description = Message::get("");
      if ($name == 'fk_ascontrolflowtarget_id') $description = Message::get("");
      if ($name == 'fk_arcontrolflowtarget_id') $description = Message::get("");
      if ($name == 'fk_arcontrolflowsource_id') $description = Message::get("");
      if ($name == 'fk_adcontrolflowsource_id') $description = Message::get("");
      if ($name == 'fk_adcontrolflowtarget_id') $description = Message::get("");
      if ($name == 'fk_acontrolflowsource_id') $description = Message::get("");
      if ($name == 'fk_acontrolflowtarget_id') $description = Message::get("");
      if ($name == 'guard') $description = Message::get("");
      if ($name == 'Name') $description = Message::get("the name of this object.");
      if ($name == 'Notes') $description = Message::get("the actual description of the object.");
      if ($name == 'created') $description = Message::get("the creation date of this object");
      if ($name == 'creator') $description = Message::get("the user that created this object");
      if ($name == 'last_editor') $description = Message::get("the last user that edited this object");
      if ($name == 'modified') $description = Message::get("the date when this object was modified");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return true;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkActivityfinalId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_activityfinal_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_activityfinal_id', DATATYPE_IGNORE);
    }
    function setFkActivityfinalId($fk_activityfinal_id)
    {
      return $this->setValue('fk_activityfinal_id', $fk_activityfinal_id, DATATYPE_IGNORE);
    }
    function getFkActivityinitialId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_activityinitial_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_activityinitial_id', DATATYPE_IGNORE);
    }
    function setFkActivityinitialId($fk_activityinitial_id)
    {
      return $this->setValue('fk_activityinitial_id', $fk_activityinitial_id, DATATYPE_IGNORE);
    }
    function getFkAscontrolflowsourceId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_ascontrolflowsource_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_ascontrolflowsource_id', DATATYPE_IGNORE);
    }
    function setFkAscontrolflowsourceId($fk_ascontrolflowsource_id)
    {
      return $this->setValue('fk_ascontrolflowsource_id', $fk_ascontrolflowsource_id, DATATYPE_IGNORE);
    }
    function getFkAscontrolflowtargetId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_ascontrolflowtarget_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_ascontrolflowtarget_id', DATATYPE_IGNORE);
    }
    function setFkAscontrolflowtargetId($fk_ascontrolflowtarget_id)
    {
      return $this->setValue('fk_ascontrolflowtarget_id', $fk_ascontrolflowtarget_id, DATATYPE_IGNORE);
    }
    function getFkArcontrolflowtargetId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_arcontrolflowtarget_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_arcontrolflowtarget_id', DATATYPE_IGNORE);
    }
    function setFkArcontrolflowtargetId($fk_arcontrolflowtarget_id)
    {
      return $this->setValue('fk_arcontrolflowtarget_id', $fk_arcontrolflowtarget_id, DATATYPE_IGNORE);
    }
    function getFkArcontrolflowsourceId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_arcontrolflowsource_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_arcontrolflowsource_id', DATATYPE_IGNORE);
    }
    function setFkArcontrolflowsourceId($fk_arcontrolflowsource_id)
    {
      return $this->setValue('fk_arcontrolflowsource_id', $fk_arcontrolflowsource_id, DATATYPE_IGNORE);
    }
    function getFkAdcontrolflowsourceId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_adcontrolflowsource_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_adcontrolflowsource_id', DATATYPE_IGNORE);
    }
    function setFkAdcontrolflowsourceId($fk_adcontrolflowsource_id)
    {
      return $this->setValue('fk_adcontrolflowsource_id', $fk_adcontrolflowsource_id, DATATYPE_IGNORE);
    }
    function getFkAdcontrolflowtargetId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_adcontrolflowtarget_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_adcontrolflowtarget_id', DATATYPE_IGNORE);
    }
    function setFkAdcontrolflowtargetId($fk_adcontrolflowtarget_id)
    {
      return $this->setValue('fk_adcontrolflowtarget_id', $fk_adcontrolflowtarget_id, DATATYPE_IGNORE);
    }
    function getFkAcontrolflowsourceId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_acontrolflowsource_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_acontrolflowsource_id', DATATYPE_IGNORE);
    }
    function setFkAcontrolflowsourceId($fk_acontrolflowsource_id)
    {
      return $this->setValue('fk_acontrolflowsource_id', $fk_acontrolflowsource_id, DATATYPE_IGNORE);
    }
    function getFkAcontrolflowtargetId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_acontrolflowtarget_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_acontrolflowtarget_id', DATATYPE_IGNORE);
    }
    function setFkAcontrolflowtargetId($fk_acontrolflowtarget_id)
    {
      return $this->setValue('fk_acontrolflowtarget_id', $fk_acontrolflowtarget_id, DATATYPE_IGNORE);
    }
    function getGuard($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('guard', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('guard', DATATYPE_ATTRIBUTE);
    }
    function setGuard($guard)
    {
      return $this->setValue('guard', $guard, DATATYPE_ATTRIBUTE);
    }
    function getAControlFlowTargetOID()
    {
      $fkValue = $this->getValue('fk_acontrolflowtarget_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'Activity', 'id' => array($fkValue)));
      else
        return null;
    }
    function setAControlFlowTarget($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setAControlFlowTarget'), $args);
        }
        else {
          $this->setValue('fk_acontrolflowtarget_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getAControlFlowSourceOID()
    {
      $fkValue = $this->getValue('fk_acontrolflowsource_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'Activity', 'id' => array($fkValue)));
      else
        return null;
    }
    function setAControlFlowSource($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setAControlFlowSource'), $args);
        }
        else {
          $this->setValue('fk_acontrolflowsource_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getADControlFlowTargetOID()
    {
      $fkValue = $this->getValue('fk_adcontrolflowtarget_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ActivityDecision', 'id' => array($fkValue)));
      else
        return null;
    }
    function setADControlFlowTarget($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setADControlFlowTarget'), $args);
        }
        else {
          $this->setValue('fk_adcontrolflowtarget_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getADControlFlowSourceOID()
    {
      $fkValue = $this->getValue('fk_adcontrolflowsource_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ActivityDecision', 'id' => array($fkValue)));
      else
        return null;
    }
    function setADControlFlowSource($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setADControlFlowSource'), $args);
        }
        else {
          $this->setValue('fk_adcontrolflowsource_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getARControlFlowSourceOID()
    {
      $fkValue = $this->getValue('fk_arcontrolflowsource_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ActivityReceive', 'id' => array($fkValue)));
      else
        return null;
    }
    function setARControlFlowSource($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setARControlFlowSource'), $args);
        }
        else {
          $this->setValue('fk_arcontrolflowsource_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getARControlFlowTargetOID()
    {
      $fkValue = $this->getValue('fk_arcontrolflowtarget_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ActivityReceive', 'id' => array($fkValue)));
      else
        return null;
    }
    function setARControlFlowTarget($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setARControlFlowTarget'), $args);
        }
        else {
          $this->setValue('fk_arcontrolflowtarget_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getASControlFlowTargetOID()
    {
      $fkValue = $this->getValue('fk_ascontrolflowtarget_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ActivitySend', 'id' => array($fkValue)));
      else
        return null;
    }
    function setASControlFlowTarget($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setASControlFlowTarget'), $args);
        }
        else {
          $this->setValue('fk_ascontrolflowtarget_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getASControlFlowSourceOID()
    {
      $fkValue = $this->getValue('fk_ascontrolflowsource_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ActivitySend', 'id' => array($fkValue)));
      else
        return null;
    }
    function setASControlFlowSource($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setASControlFlowSource'), $args);
        }
        else {
          $this->setValue('fk_ascontrolflowsource_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getActivityInitialOID()
    {
      $fkValue = $this->getValue('fk_activityinitial_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ActivityInitial', 'id' => array($fkValue)));
      else
        return null;
    }
    function setActivityInitial($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setActivityInitial'), $args);
        }
        else {
          $this->setValue('fk_activityinitial_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getActivityFinalOID()
    {
      $fkValue = $this->getValue('fk_activityfinal_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ActivityFinal', 'id' => array($fkValue)));
      else
        return null;
    }
    function setActivityFinal($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setActivityFinal'), $args);
        }
        else {
          $this->setValue('fk_activityfinal_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getAControlFlowTargetParents()
    {
      return $this->getParentsEx(null, 'Activity', null, null);
    }
    function getAControlFlowSourceParents()
    {
      return $this->getParentsEx(null, 'Activity', null, null);
    }
    function getADControlFlowTargetParents()
    {
      return $this->getParentsEx(null, 'ActivityDecision', null, null);
    }
    function getADControlFlowSourceParents()
    {
      return $this->getParentsEx(null, 'ActivityDecision', null, null);
    }
    function getARControlFlowSourceParents()
    {
      return $this->getParentsEx(null, 'ActivityReceive', null, null);
    }
    function getARControlFlowTargetParents()
    {
      return $this->getParentsEx(null, 'ActivityReceive', null, null);
    }
    function getASControlFlowTargetParents()
    {
      return $this->getParentsEx(null, 'ActivitySend', null, null);
    }
    function getASControlFlowSourceParents()
    {
      return $this->getParentsEx(null, 'ActivitySend', null, null);
    }
    function getActivityInitialParents()
    {
      return $this->getParentsEx(null, 'ActivityInitial', null, null);
    }
    function getActivityFinalParents()
    {
      return $this->getParentsEx(null, 'ActivityFinal', null, null);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties, $useRegExp=true)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties, $useRegExp);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
