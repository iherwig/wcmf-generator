<?php
/**
 * This file was generated by wCMFGenerator 2.6.1.0019 from model/requirements.xmi on 05.09.08 10:46. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.ChiBase.php");

/**
 * @class ChiBusinessUseCase
 * ChiBusinessUseCase description: A Business Use Case is part of a business process that produces an advantage to the enterprise.
 *
 * @author Giuseppe Platania
 * @version 1.0
 */
class ChiBusinessUseCaseBase extends ChiBase
{
    function ChiBusinessUseCaseBase($oid=null, $type=null)
    {
    if ($type == null)
      parent::ChiBase($oid, 'ChiBusinessUseCase');
    else
      parent::ChiBase($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ChiBusinessUseCase");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("A Business Use Case is part of a business process that produces an advantage to the enterprise.");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_chibusinessprocess_id') $displayName = Message::get("fk_chibusinessprocess_id");
      if ($name == 'PrimaryActor') $displayName = Message::get("PrimaryActor");
      if ($name == 'OtherActors') $displayName = Message::get("OtherActors");
      if ($name == 'GoalInContext') $displayName = Message::get("GoalInContext");
      if ($name == 'Scope') $displayName = Message::get("Scope");
      if ($name == 'Level') $displayName = Message::get("Level");
      if ($name == 'Stakeholders') $displayName = Message::get("Stakeholders");
      if ($name == 'Precondition') $displayName = Message::get("Precondition");
      if ($name == 'Trigger') $displayName = Message::get("Trigger");
      if ($name == 'MainSuccessScenario') $displayName = Message::get("MainSuccessScenario");
      if ($name == 'Extensions') $displayName = Message::get("Extensions");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_chibusinessprocess_id') $description = Message::get("");
      if ($name == 'PrimaryActor') $description = Message::get("the main actor of this use case");
      if ($name == 'OtherActors') $description = Message::get("The list of actors associated with the use case. Although this information is contained in the use case itself, it helps to increase the understandability of the use case when the diagram is unavailable.");
      if ($name == 'GoalInContext') $description = Message::get("The goal should implicitly express the actor's intent or purpose of the use case, such as *Enrol Student in Seminar.*");
      if ($name == 'Scope') $description = Message::get("Boundaries in which the use case is operated when invoked (E.g. CMS)");
      if ($name == 'Level') $description = Message::get("Authorizations for operations/actions to be performed against the Chi business objects in scope. Against every object/process 4 CRUD basic operations are possible:
Create (Write)
Read (Open)
Update (Change)
Delete  (Destroy)");
      if ($name == 'Stakeholders') $description = Message::get("List of actors that have a special interest (i.e. to be informed every time) in completion of the use case");
      if ($name == 'Precondition') $description = Message::get("A list of the conditions, if any, that must be met before a use case may be invoked. Can be a previous Use case or self the presence of the system in Scope.");
      if ($name == 'Trigger') $description = Message::get("Event that is responsible for invocation of the use case.");
      if ($name == 'MainSuccessScenario') $description = Message::get("The main path of logic an actor follows through a use case. Often referred to as the *happy path* or the *main path* because it describes how the use case works when everything works as it normally should.");
      if ($name == 'Extensions') $description = Message::get("");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkChibusinessprocessId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chibusinessprocess_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chibusinessprocess_id', DATATYPE_IGNORE);
    }
    function setFkChibusinessprocessId($fk_chibusinessprocess_id)
    {
      return $this->setValue('fk_chibusinessprocess_id', $fk_chibusinessprocess_id, DATATYPE_IGNORE);
    }
    function getPrimaryActor($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('PrimaryActor', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('PrimaryActor', DATATYPE_ATTRIBUTE);
    }
    function setPrimaryActor($PrimaryActor)
    {
      return $this->setValue('PrimaryActor', $PrimaryActor, DATATYPE_ATTRIBUTE);
    }
    function getOtherActors($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('OtherActors', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('OtherActors', DATATYPE_ATTRIBUTE);
    }
    function setOtherActors($OtherActors)
    {
      return $this->setValue('OtherActors', $OtherActors, DATATYPE_ATTRIBUTE);
    }
    function getGoalInContext($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('GoalInContext', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('GoalInContext', DATATYPE_ATTRIBUTE);
    }
    function setGoalInContext($GoalInContext)
    {
      return $this->setValue('GoalInContext', $GoalInContext, DATATYPE_ATTRIBUTE);
    }
    function getScope($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Scope', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Scope', DATATYPE_ATTRIBUTE);
    }
    function setScope($Scope)
    {
      return $this->setValue('Scope', $Scope, DATATYPE_ATTRIBUTE);
    }
    function getLevel($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Level', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Level', DATATYPE_ATTRIBUTE);
    }
    function setLevel($Level)
    {
      return $this->setValue('Level', $Level, DATATYPE_ATTRIBUTE);
    }
    function getStakeholders($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Stakeholders', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Stakeholders', DATATYPE_ATTRIBUTE);
    }
    function setStakeholders($Stakeholders)
    {
      return $this->setValue('Stakeholders', $Stakeholders, DATATYPE_ATTRIBUTE);
    }
    function getPrecondition($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Precondition', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Precondition', DATATYPE_ATTRIBUTE);
    }
    function setPrecondition($Precondition)
    {
      return $this->setValue('Precondition', $Precondition, DATATYPE_ATTRIBUTE);
    }
    function getTrigger($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Trigger', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Trigger', DATATYPE_ATTRIBUTE);
    }
    function setTrigger($Trigger)
    {
      return $this->setValue('Trigger', $Trigger, DATATYPE_ATTRIBUTE);
    }
    function getMainSuccessScenario($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('MainSuccessScenario', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('MainSuccessScenario', DATATYPE_ATTRIBUTE);
    }
    function setMainSuccessScenario($MainSuccessScenario)
    {
      return $this->setValue('MainSuccessScenario', $MainSuccessScenario, DATATYPE_ATTRIBUTE);
    }
    function getExtensions($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Extensions', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Extensions', DATATYPE_ATTRIBUTE);
    }
    function setExtensions($Extensions)
    {
      return $this->setValue('Extensions', $Extensions, DATATYPE_ATTRIBUTE);
    }
    function getChiBusinessProcessOID()
    {
      $fkValue = $this->getValue('fk_chibusinessprocess_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiBusinessProcess', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiBusinessProcess(&$node)
    {
      if ($node != null)
        $node->addChild($this);
    }
    function getChiBusinessProcessParents()
    {
      return $this->getParentsEx(null, 'ChiBusinessProcess', null, null);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
   /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
