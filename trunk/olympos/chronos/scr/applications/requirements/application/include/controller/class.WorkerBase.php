<?php
/**
 * This file was generated by wCMFGenerator 2.6.0001 from model/helloWorld2.xmi on 22.03.08 14:15. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.EntityBase.php");

/**
 * @class Worker
 * Worker description: 
 *
 * @author Giuseppe Platania
 * @version 1.0
 */
class WorkerBase extends EntityBase
{
    function WorkerBase($oid=null, $type=null)
    {
    if ($type == null)
      parent::EntityBase($oid, 'Worker');
    else
      parent::EntityBase($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("Worker");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_enterprise_id') $displayName = Message::get("fk_enterprise_id");
      if ($name == 'Name') $displayName = Message::get("Name");
      if ($name == 'Role') $displayName = Message::get("Role");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_enterprise_id') $description = Message::get("");
      if ($name == 'Name') $description = Message::get("");
      if ($name == 'Role') $description = Message::get("");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkEnterpriseId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_enterprise_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_enterprise_id', DATATYPE_IGNORE);
    }
    function setFkEnterpriseId($fk_enterprise_id)
    {
      return $this->setValue('fk_enterprise_id', $fk_enterprise_id, DATATYPE_IGNORE);
    }
    function getName($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Name', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Name', DATATYPE_ATTRIBUTE);
    }
    function setName($Name)
    {
      return $this->setValue('Name', $Name, DATATYPE_ATTRIBUTE);
    }
    function getRole($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Role', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Role', DATATYPE_ATTRIBUTE);
    }
    function setRole($Role)
    {
      return $this->setValue('Role', $Role, DATATYPE_ATTRIBUTE);
    }
    function getEnterpriseOID()
    {
      $fkValue = $this->getValue('fk_enterprise_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'Enterprise', 'id' => array($fkValue)));
      else
        return null;
    }
    function setEnterprise(&$node)
    {
      if ($node != null)
        $node->addChild($this);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildren()
     * Override this to include the children of many-to-many relations
     */
    function getChildren()
    {
      // get default children
      $children = parent::getChildren();

      return $children;
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
   /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
