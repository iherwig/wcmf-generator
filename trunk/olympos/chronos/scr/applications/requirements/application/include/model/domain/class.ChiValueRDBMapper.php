<?php
/**
 * This file was generated by wCMFGenerator 3.0.0017 from requirements.uml on Wed Jul 01 16:44:45 CEST 2009. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."wcmf/lib/model/mapper/class.NodeUnifiedRDBMapper.php");
require_once(BASE."application/include/model/domain/class.ChiValue.php");

/**
 * @class ChiValueRDBMapper
 * ChiValueRDBMapper maps ChiValue Nodes to the database.
 * ChiValue description: 
 *
 * @author 
 * @version 1.0
 */
class ChiValueRDBMapper extends NodeUnifiedRDBMapper
{
  /**
   * @see RDBMapper::getType()
   */
  function getType()
  {
    return 'ChiValue';
  }
  /**
   * @see NodeRDBMapper::createObject()
   */
  function &createObject($oid=null)
  {
    return new ChiValue($oid);
  }
  /**
   * @see NodeUnifiedRDBMapper::getTableName()
   */
  function getTableName()
  {
    return 'ChiValue';
  }
  /**
   * @see PersistenceMapper::getPkNames()
   */
  function getPkNames()
  {
    return array('id' => DATATYPE_IGNORE);
  }
  /**
   * @see NodeUnifiedRDBMapper::getMyFKColumnNameImpl()
   */
  function getMyFKColumnNameImpl($parentType)
  {
  	// start from the most specific
    if ($this->getType() == 'ChiValue' && $parentType == 'ChiNode') return 'Composition';
    if ($this->getType() == 'ChiValue' && $parentType == 'ChiController') return 'fk_chicontroller_id';
    if ($this->getType() == 'ChiValue' && $parentType == 'ChiSystem') return 'Composition';
    if ($parentType == 'ChiNode') return 'Composition';
    if ($parentType == 'ChiController') return 'fk_chicontroller_id';
    if ($parentType == 'ChiSystem') return 'Composition';
    return '';
  }
  /**
   * @see NodeUnifiedRDBMapper::getOrderBy()
   */
  function getOrderBy()
  {
    return array();
  }
  /**
   * @see NodeUnifiedRDBMapper::getObjectDefinitionImpl()
   */
  function getObjectDefinitionImpl()
  {
    $nodeDef = array();
    $nodeDef['_properties'] = array
    (
      array('name' => 'is_searchable', 'value' => true),
      array('name' => 'display_value', 'value' => 'Name'),
// PROTECTED REGION ID(application/include/model/domain/class.ChiValueRDBMapper.php/Properties) ENABLED START
// PROTECTED REGION END
    );
    $nodeDef['_datadef'] = array
    (
     /* 
      * Value description: 
      */
      array('name' => 'id', 'app_data_type' => DATATYPE_IGNORE, 'column_name' => 'id', 'db_data_type' => 'INT(11) NOT NULL', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => false, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: 
      */
      array('name' => 'fk_chicontroller_id', 'app_data_type' => DATATYPE_IGNORE, 'column_name' => 'fk_chicontroller_id', 'db_data_type' => 'INT(11)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => false, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: 
      */
      array('name' => 'Composition', 'app_data_type' => DATATYPE_IGNORE, 'column_name' => 'Composition', 'db_data_type' => 'INT(11)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => false, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: The HTML display type for the attribute e.g. image<sup>11</sup>The interpretation of the display_type is done by DefaultValueRenderer or its subclasses..
      */
      array('name' => 'display_type', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'display_type', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'select#async:DisplayType', 'display_type' => 'text'),
     /* 
      * Value description: A text describing the restrictions (both the negative and the positives), which will be shown in case of an error.
      */
      array('name' => 'restrictions_description', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'restrictions_description', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: Regular expression, which must be matched by the attribute value<sup>11</sup>The PHP function preg_match is used for comparison..
      */
      array('name' => 'restrictions_match', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'restrictions_match', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: Regular expression, which must not be matched by the attribute value<sup>11</sup>The PHP function preg_match is used for comparison..
      */
      array('name' => 'restrictions_not_match', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'restrictions_not_match', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: Definition of the attribute's input control in the HTML form<sup>11</sup>The interpretation of the input_type is done by DefaultControlRenderer or its subclasses..
      */
      array('name' => 'input_type', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'input_type', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'select#async:InputType', 'display_type' => 'text'),
     /* 
      * Value description: The attribute's application datatype. This can be used in the application to group attributes and execute special logic on them.
      */
      array('name' => 'app_data_type', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'app_data_type', 'db_data_type' => 'VARCHAR(255)', 'default' => 'DATATYPE_ATTRIBUTE', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: The atribute's database type. This will be used in the table definition. e.g. INT, VARCHAR, TEXT, ...
      */
      array('name' => 'db_data_type', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'db_data_type', 'db_data_type' => 'VARCHAR(255)', 'default' => 'VARCHAR(255)', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: Declares, if the attribute is editable in the UI. The backend can always edit atributes
      */
      array('name' => 'is_editable', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'is_editable', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'select#fix:true[true]|false[false]', 'display_type' => 'text'),
     /* 
      * Value description: The name of the database column. If not given the attribute name will be used.
      */
      array('name' => 'column_name', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'column_name', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: his reppresent the default value that a property takes automagically.
      */
      array('name' => 'default', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'default', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: this is the type of this property (e.g. string. int, etc.). not necessary
      */
      array('name' => 'PropertyType', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'propertytype', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: the name of this object.
      */
      array('name' => 'Name', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'name', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: the actual description of the object.
      */
      array('name' => 'Notes', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'notes', 'db_data_type' => 'TEXT', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => true, 'input_type' => 'fckeditor', 'display_type' => 'text'),
     /* 
      * Value description: the creation date of this object
      */
      array('name' => 'created', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'created', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => false, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: the user that created this object
      */
      array('name' => 'creator', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'creator', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => false, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: the last user that edited this object
      */
      array('name' => 'last_editor', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'last_editor', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => false, 'input_type' => 'text', 'display_type' => 'text'),
     /* 
      * Value description: the date when this object was modified
      */
      array('name' => 'modified', 'app_data_type' => DATATYPE_ATTRIBUTE, 'column_name' => 'modified', 'db_data_type' => 'VARCHAR(255)', 'default' => '', 'restrictions_match' => '', 'restrictions_not_match' => '', 'restrictions_description' => '', 'is_editable' => false, 'input_type' => 'text', 'display_type' => 'text')
    );
    $nodeDef['_ref'] = array
    (
    );
    $nodeDef['_parents'] = array
    (
      array('type' => 'ChiNode', 'is_navigable' => true, 'table_name' => 'ChiNode', 'pk_columns' => array('id'), 'fk_columns' => 'Composition'),
      array('type' => 'ChiController', 'is_navigable' => true, 'table_name' => 'ChiController', 'pk_columns' => array('id'), 'fk_columns' => 'fk_chicontroller_id'),
      array('type' => 'ChiSystem', 'is_navigable' => true, 'table_name' => 'ChiSystem', 'pk_columns' => array('id'), 'fk_columns' => 'Composition')
    );
    $nodeDef['_children'] = array
    (
    );
    return $nodeDef;
  }
}
?>
