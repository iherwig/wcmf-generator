<?php
/*
 * Copyright (c) 2009 The Olympos Development Team.
 * 
 * http://sourceforge.net/projects/olympos/
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by wCMFGenerator 3.0.0018 from requirements.uml on Tue Jan 05 15:36:17 CET 2010. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.ChiBase.php");

/**
 * @class ActivitySet
 * ActivitySet description: An activity set contains all the element owned by an activity diagramm.
 *
 * @author 
 * @version 1.0
 */
class ActivitySetBase extends ChiBase
{
    function ActivitySetBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::__construct($oid, 'ActivitySet');
      else
        parent::__construct($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ActivitySet");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("An activity set contains all the element owned by an activity diagramm.");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_chibusinessusecasecore_id') $displayName = Message::get("fk_chibusinessusecasecore_id");
      if ($name == 'fk_package_id') $displayName = Message::get("fk_package_id");
      if ($name == 'fk_chibusinessusecase_id') $displayName = Message::get("fk_chibusinessusecase_id");
      if ($name == 'Status') $displayName = Message::get("Status");
      if ($name == 'Alias') $displayName = Message::get("Alias");
      if ($name == 'Author') $displayName = Message::get("Author");
      if ($name == 'Version') $displayName = Message::get("Version");
      if ($name == 'Name') $displayName = Message::get("Name");
      if ($name == 'Notes') $displayName = Message::get("Notes");
      if ($name == 'created') $displayName = Message::get("created");
      if ($name == 'creator') $displayName = Message::get("creator");
      if ($name == 'last_editor') $displayName = Message::get("last_editor");
      if ($name == 'modified') $displayName = Message::get("modified");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_chibusinessusecasecore_id') $description = Message::get("");
      if ($name == 'fk_package_id') $description = Message::get("");
      if ($name == 'fk_chibusinessusecase_id') $description = Message::get("");
      if ($name == 'Status') $description = Message::get("");
      if ($name == 'Alias') $description = Message::get("the Project Id of this object.");
      if ($name == 'Author') $description = Message::get("");
      if ($name == 'Version') $description = Message::get("the model version of this object");
      if ($name == 'Name') $description = Message::get("the name of this object.");
      if ($name == 'Notes') $description = Message::get("the actual description of the object.");
      if ($name == 'created') $description = Message::get("the creation date of this object");
      if ($name == 'creator') $description = Message::get("the user that created this object");
      if ($name == 'last_editor') $description = Message::get("the last user that edited this object");
      if ($name == 'modified') $description = Message::get("the date when this object was modified");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter for properties
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkChibusinessusecasecoreId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chibusinessusecasecore_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chibusinessusecasecore_id', DATATYPE_IGNORE);
    }
    function setFkChibusinessusecasecoreId($fk_chibusinessusecasecore_id)
    {
      return $this->setValue('fk_chibusinessusecasecore_id', $fk_chibusinessusecasecore_id, DATATYPE_IGNORE);
    }
    function getFkPackageId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_package_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_package_id', DATATYPE_IGNORE);
    }
    function setFkPackageId($fk_package_id)
    {
      return $this->setValue('fk_package_id', $fk_package_id, DATATYPE_IGNORE);
    }
    function getFkChibusinessusecaseId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chibusinessusecase_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chibusinessusecase_id', DATATYPE_IGNORE);
    }
    function setFkChibusinessusecaseId($fk_chibusinessusecase_id)
    {
      return $this->setValue('fk_chibusinessusecase_id', $fk_chibusinessusecase_id, DATATYPE_IGNORE);
    }
    function getSortkey()
    {
      return $this->getValue('sortkey', DATATYPE_IGNORE);
    }
    function setSortkey($sortkey)
    {
      return $this->setValue('sortkey', $sortkey, DATATYPE_IGNORE);
    }
    /**
     * Getter/Setter for related objects
     */
    function __call($name, $arguments)
    {
      // foreign key: ChiBusinessUseCase
      if ($name == 'getChiBusinessUseCaseOID')
      {
        $fkValue = $this->getValue('fk_chibusinessusecase_id', DATATYPE_IGNORE);
        if ($fkValue != null) {
          return PersistenceFacade::composeOID(array('type' => 'ChiBusinessUseCase', 'id' => array($fkValue)));
        }
        else {
          return null;
        }
      }
      if ($name == 'setChiBusinessUseCase')
      {
        $node = &$arguments[0];
        if ($node != null)
        {
          if (!is_a($node, 'node') && !is_a($node, 'Node')) {
            call_user_func_array(array(parent, 'setChiBusinessUseCase'), $arguments);
          }
          else {
            $this->setValue('fk_chibusinessusecase_id', $node->getDBID(), DATATYPE_IGNORE);
          }
        }
        return;
      }
      // foreign key: Package
      if ($name == 'getPackageOID')
      {
        $fkValue = $this->getValue('fk_package_id', DATATYPE_IGNORE);
        if ($fkValue != null) {
          return PersistenceFacade::composeOID(array('type' => 'Package', 'id' => array($fkValue)));
        }
        else {
          return null;
        }
      }
      if ($name == 'setPackage')
      {
        $node = &$arguments[0];
        if ($node != null)
        {
          if (!is_a($node, 'node') && !is_a($node, 'Node')) {
            call_user_func_array(array(parent, 'setPackage'), $arguments);
          }
          else {
            $this->setValue('fk_package_id', $node->getDBID(), DATATYPE_IGNORE);
          }
        }
        return;
      }
      // foreign key: ChiBusinessUseCaseCore
      if ($name == 'getChiBusinessUseCaseCoreOID')
      {
        $fkValue = $this->getValue('fk_chibusinessusecasecore_id', DATATYPE_IGNORE);
        if ($fkValue != null) {
          return PersistenceFacade::composeOID(array('type' => 'ChiBusinessUseCaseCore', 'id' => array($fkValue)));
        }
        else {
          return null;
        }
      }
      if ($name == 'setChiBusinessUseCaseCore')
      {
        $node = &$arguments[0];
        if ($node != null)
        {
          if (!is_a($node, 'node') && !is_a($node, 'Node')) {
            call_user_func_array(array(parent, 'setChiBusinessUseCaseCore'), $arguments);
          }
          else {
            $this->setValue('fk_chibusinessusecasecore_id', $node->getDBID(), DATATYPE_IGNORE);
          }
        }
        return;
      }
      // parent: ChiBusinessUseCase
      if ($name == 'getChiBusinessUseCaseParents') {
        return $this->getParentsEx(null, 'ChiBusinessUseCase', null, null);
      }
      // parent: Package
      if ($name == 'getPackageParents') {
        return $this->getParentsEx(null, 'Package', null, null);
      }
      // parent: ChiBusinessUseCaseCore
      if ($name == 'getChiBusinessUseCaseCoreParents') {
        return $this->getParentsEx(null, 'ChiBusinessUseCaseCore', null, null);
      }
      // child: ChiObject
      if ($name == 'getChiObjectList')
      {
        Log::warn("use of deprecated method getChiObjectList. use getChiObjectChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->getChiObjectChildren();
      }
      if ($name == 'getChiObjectChildren') {
        return $this->getChildrenEx(null, 'ChiObject', array('fk_activityset_id' => $this->getDBID()), null, false);
      }
      // child: Activity
      if ($name == 'getActivityList')
      {
        Log::warn("use of deprecated method getActivityList. use getActivityChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->getActivityChildren();
      }
      if ($name == 'getActivityChildren') {
        return $this->getChildrenEx(null, 'Activity', array('fk_activityset_id' => $this->getDBID()), null, false);
      }
      // child: ActivityDecision
      if ($name == 'getActivityDecisionList')
      {
        Log::warn("use of deprecated method getActivityDecisionList. use getActivityDecisionChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->getActivityDecisionChildren();
      }
      if ($name == 'getActivityDecisionChildren') {
        return $this->getChildrenEx(null, 'ActivityDecision', array('fk_activityset_id' => $this->getDBID()), null, false);
      }
      // child: ActivityReceive
      if ($name == 'getActivityReceiveList')
      {
        Log::warn("use of deprecated method getActivityReceiveList. use getActivityReceiveChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->getActivityReceiveChildren();
      }
      if ($name == 'getActivityReceiveChildren') {
        return $this->getChildrenEx(null, 'ActivityReceive', array('fk_activityset_id' => $this->getDBID()), null, false);
      }
      // child: ActivitySend
      if ($name == 'getActivitySendList')
      {
        Log::warn("use of deprecated method getActivitySendList. use getActivitySendChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->getActivitySendChildren();
      }
      if ($name == 'getActivitySendChildren') {
        return $this->getChildrenEx(null, 'ActivitySend', array('fk_activityset_id' => $this->getDBID()), null, false);
      }
      // child: ActivityInitial
      if ($name == 'getActivityInitialList')
      {
        Log::warn("use of deprecated method getActivityInitialList. use getActivityInitialChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->getActivityInitialChildren();
      }
      if ($name == 'getActivityInitialChildren') {
        return $this->getChildrenEx(null, 'ActivityInitial', array('fk_activityset_id' => $this->getDBID()), null, false);
      }
      // child: ActivityFinal
      if ($name == 'getActivityFinalList')
      {
        Log::warn("use of deprecated method getActivityFinalList. use getActivityFinalChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->getActivityFinalChildren();
      }
      if ($name == 'getActivityFinalChildren') {
        return $this->getChildrenEx(null, 'ActivityFinal', array('fk_activityset_id' => $this->getDBID()), null, false);
      }
      // child: ProductionRuleSet
      if ($name == 'getProductionRuleSetList')
      {
        Log::warn("use of deprecated method getProductionRuleSetList. use getProductionRuleSetChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->getProductionRuleSetChildren();
      }
      if ($name == 'getProductionRuleSetChildren') {
        return $this->getChildrenEx(null, 'ProductionRuleSet', array('fk_activityset_id' => $this->getDBID()), null, false);
      }
      // child: Figure
      if ($name == 'getFigureList')
      {
        Log::warn("use of deprecated method getFigureList. use getFigureChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->getFigureChildren();
      }
      if ($name == 'getFigureChildren') {
        return $this->getChildrenEx(null, 'Figure', array('fk_activityset_id' => $this->getDBID()), null, false);
      }
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties, $useRegExp=true)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties, $useRegExp);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
