<?php
/**
 * This file was generated by wCMFGenerator 3.0.0004 from ./model/cwm.uml on Wed Feb 18 17:47:22 CET 2009. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.EntityBase.php");

/**
 * @class ActivitySet
 * ActivitySet description: An activity set contains all the element owned by an activity diagramm.
 *
 * @author 
 * @version 1.0
 */
class ActivitySetBase extends EntityBase
{
    function ActivitySetBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::EntityBase($oid, 'ActivitySet');
      else
        parent::EntityBase($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ActivitySet");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("An activity set contains all the element owned by an activity diagramm.");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_chibusinessusecasecore_id') $displayName = Message::get("fk_chibusinessusecasecore_id");
      if ($name == 'fk_chibusinessusecase_id') $displayName = Message::get("fk_chibusinessusecase_id");
      if ($name == 'created') $displayName = Message::get("created");
      if ($name == 'creator') $displayName = Message::get("creator");
      if ($name == 'last_editor') $displayName = Message::get("last_editor");
      if ($name == 'modified') $displayName = Message::get("modified");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_chibusinessusecasecore_id') $description = Message::get("");
      if ($name == 'fk_chibusinessusecase_id') $description = Message::get("");
      if ($name == 'created') $description = Message::get("the creation date of this object");
      if ($name == 'creator') $description = Message::get("the user that created this object");
      if ($name == 'last_editor') $description = Message::get("the last user that edited this object");
      if ($name == 'modified') $description = Message::get("the date when this object was modified");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkChibusinessusecasecoreId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chibusinessusecasecore_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chibusinessusecasecore_id', DATATYPE_IGNORE);
    }
    function setFkChibusinessusecasecoreId($fk_chibusinessusecasecore_id)
    {
      return $this->setValue('fk_chibusinessusecasecore_id', $fk_chibusinessusecasecore_id, DATATYPE_IGNORE);
    }
    function getFkChibusinessusecaseId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chibusinessusecase_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chibusinessusecase_id', DATATYPE_IGNORE);
    }
    function setFkChibusinessusecaseId($fk_chibusinessusecase_id)
    {
      return $this->setValue('fk_chibusinessusecase_id', $fk_chibusinessusecase_id, DATATYPE_IGNORE);
    }
    function getChiBusinessUseCaseOID()
    {
      $fkValue = $this->getValue('fk_chibusinessusecase_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiBusinessUseCase', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiBusinessUseCase(&$node)
    {
      if ($node != null)
        $this->setValue('fk_chibusinessusecase_id', $node->getDBID(), DATATYPE_IGNORE);
    }
    function getChiBusinessUseCaseCoreOID()
    {
      $fkValue = $this->getValue('fk_chibusinessusecasecore_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiBusinessUseCaseCore', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiBusinessUseCaseCore(&$node)
    {
      if ($node != null)
        $this->setValue('fk_chibusinessusecasecore_id', $node->getDBID(), DATATYPE_IGNORE);
    }
    function getChiBusinessUseCaseParents()
    {
      return $this->getParentsEx(null, 'ChiBusinessUseCase', null, null);
    }
    function getChiBusinessUseCaseCoreParents()
    {
      return $this->getParentsEx(null, 'ChiBusinessUseCaseCore', null, null);
    }
    /**
     * @deprecated use getActivityChildren() instead
     */
    function getActivityList()
    {
      Message::log("use of deprecated method getActivityList. use getActivityChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getActivityChildren();
    }
    function getActivityChildren()
    {
      return $this->getChildrenEx(null, 'Activity', array('fk_activityset_id' => $this->getDBID()), null);
    }
    /**
     * @deprecated use getActivityDecisionChildren() instead
     */
    function getActivityDecisionList()
    {
      Message::log("use of deprecated method getActivityDecisionList. use getActivityDecisionChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getActivityDecisionChildren();
    }
    function getActivityDecisionChildren()
    {
      return $this->getChildrenEx(null, 'ActivityDecision', array('fk_activityset_id' => $this->getDBID()), null);
    }
    /**
     * @deprecated use getActivityReceiveChildren() instead
     */
    function getActivityReceiveList()
    {
      Message::log("use of deprecated method getActivityReceiveList. use getActivityReceiveChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getActivityReceiveChildren();
    }
    function getActivityReceiveChildren()
    {
      return $this->getChildrenEx(null, 'ActivityReceive', array('fk_activityset_id' => $this->getDBID()), null);
    }
    /**
     * @deprecated use getActivitySendChildren() instead
     */
    function getActivitySendList()
    {
      Message::log("use of deprecated method getActivitySendList. use getActivitySendChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getActivitySendChildren();
    }
    function getActivitySendChildren()
    {
      return $this->getChildrenEx(null, 'ActivitySend', array('fk_activityset_id' => $this->getDBID()), null);
    }
    /**
     * @deprecated use getActivityInitialChildren() instead
     */
    function getActivityInitialList()
    {
      Message::log("use of deprecated method getActivityInitialList. use getActivityInitialChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getActivityInitialChildren();
    }
    function getActivityInitialChildren()
    {
      return $this->getChildrenEx(null, 'ActivityInitial', array('fk_activityset_id' => $this->getDBID()), null);
    }
    /**
     * @deprecated use getActivityFinalChildren() instead
     */
    function getActivityFinalList()
    {
      Message::log("use of deprecated method getActivityFinalList. use getActivityFinalChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getActivityFinalChildren();
    }
    function getActivityFinalChildren()
    {
      return $this->getChildrenEx(null, 'ActivityFinal', array('fk_activityset_id' => $this->getDBID()), null);
    }
    /**
     * @deprecated use getFigureChildren() instead
     */
    function getFigureList()
    {
      Message::log("use of deprecated method getFigureList. use getFigureChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getFigureChildren();
    }
    function getFigureChildren()
    {
      return $this->getChildrenEx(null, 'Figure', array('fk_activityset_id' => $this->getDBID()), null);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
