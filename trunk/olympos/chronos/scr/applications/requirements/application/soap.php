<?php
/**
 * This file was generated by wCMFGenerator 2.6.1.0019 from model/requirements.xmi on 05.09.08 13:08. 
 * Manual modifications should be placed inside the protected regions.
 * NOTE: This file was created in the application root directory to 
 *       ensure that everything is working correctly
 */
require_once("base_dir.php");  
require_once(BASE."wcmf/lib/presentation/class.Application.php");
require_once(BASE."wcmf/lib/security/class.AuthUser.php");
require_once(BASE."wcmf/3rdparty/nusoap/lib/nusoap.php");
require_once(BASE."wcmf/lib/util/class.Message.php");
require_once(BASE."wcmf/lib/presentation/class.ActionMapper.php");
require_once(BASE."wcmf/lib/presentation/class.Request.php");
// PROTECTED REGION ID(/soap/Import) START
// PROTECTED REGION END

$NAMESPACE = 'http://wcmf.sourceforge.net';
$server = new soap_server();
$server->configureWSDL('SOAPService', $NAMESPACE);
$server->wsdl->schemaTargetNamespace = $NAMESPACE;

$server->wsdl->addComplexType(
    'OidList',
    'complexType',
    'array',
    '',
    'SOAP-ENC:Array',
    array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'xsd:string[]')
    ),
    'xsd:string'
);
$server->wsdl->addComplexType(
    'ObjectList',
    'complexType',
    'array',
    '',
    'SOAP-ENC:Array',
    array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:object[]')
    ),
    'tns:object'
);
$server->wsdl->addComplexType('object', 'complexType', 'struct', 'sequence', '',
    array(
        'type' => array('name' => 'type', 'type' => 'xsd:string'),
        'oid' => array('name' => 'oid', 'type' => 'xsd:string'),
        'displayName' => array('name' => 'displayName', 'type' => 'xsd:string')
    )
);


/**
 * WSDL definition for NMFeatureRequirements
 */
$server->wsdl->addComplexType('NMFeatureRequirements', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chifeature_id' => array('name' => 'fk_chifeature_id', 'type' => 'xsd:string'),
        'fk_chirequirement_id' => array('name' => 'fk_chirequirement_id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMFeatureRequirementsList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMFeatureRequirements[]')
    ),
    'tns:NMFeatureRequirements'
);
$server->register('getNMFeatureRequirementsList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:NMFeatureRequirementsList'), $NAMESPACE);
  
$server->register('createNMFeatureRequirements',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'NMFeatureRequirements'=>'tns:NMFeatureRequirements', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readNMFeatureRequirements',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:NMFeatureRequirements'), $NAMESPACE);
  
$server->register('updateNMFeatureRequirements',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'NMFeatureRequirements'=>'tns:NMFeatureRequirements', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteNMFeatureRequirements',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiGoal
 */
$server->wsdl->addComplexType('ChiGoal', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chigoal_id' => array('name' => 'fk_chigoal_id', 'type' => 'xsd:string'),
        'Priority' => array('name' => 'Priority', 'type' => 'xsd:string'),
        'Value_Name' => array('name' => 'Value_Name', 'type' => 'xsd:string'),
        'Value_ammount' => array('name' => 'Value_ammount', 'type' => 'xsd:string'),
        'Value_Goal' => array('name' => 'Value_Goal', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'ChiGoal' => array('name' => 'ChiGoal', 'type' => 'tns:ChiGoalList'),
        'ChiRequirement' => array('name' => 'ChiRequirement', 'type' => 'tns:ChiRequirementList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiGoalList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiGoal[]')
    ),
    'tns:ChiGoal'
);
$server->register('getChiGoalList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiGoalList'), $NAMESPACE);
  
$server->register('createChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiGoal'=>'tns:ChiGoal', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiGoal'), $NAMESPACE);
  
$server->register('updateChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiGoal'=>'tns:ChiGoal', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiRequirement
 */
$server->wsdl->addComplexType('ChiRequirement', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_chigoal_id' => array('name' => 'fk_chigoal_id', 'type' => 'xsd:string'),
        'fk_chirequirement_id' => array('name' => 'fk_chirequirement_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'reqType' => array('name' => 'reqType', 'type' => 'xsd:string'),
        'Priority' => array('name' => 'Priority', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Proofreader' => array('name' => 'Proofreader', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'ChiRequirement' => array('name' => 'ChiRequirement', 'type' => 'tns:ChiRequirementList'),
        'ChiIssue' => array('name' => 'ChiIssue', 'type' => 'tns:ChiIssueList'),
        'NMFeatureRequirements' => array('name' => 'NMFeatureRequirements', 'type' => 'tns:NMFeatureRequirementsList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiRequirementList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiRequirement[]')
    ),
    'tns:ChiRequirement'
);
$server->register('getChiRequirementList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiRequirementList'), $NAMESPACE);
  
$server->register('createChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirement'=>'tns:ChiRequirement', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiRequirement'), $NAMESPACE);
  
$server->register('updateChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirement'=>'tns:ChiRequirement', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiFeature
 */
$server->wsdl->addComplexType('ChiFeature', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Proofreader' => array('name' => 'Proofreader', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'NMFeatureRequirements' => array('name' => 'NMFeatureRequirements', 'type' => 'tns:NMFeatureRequirementsList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiFeatureList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiFeature[]')
    ),
    'tns:ChiFeature'
);
$server->register('getChiFeatureList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiFeatureList'), $NAMESPACE);
  
$server->register('createChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeature'=>'tns:ChiFeature', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiFeature'), $NAMESPACE);
  
$server->register('updateChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeature'=>'tns:ChiFeature', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiIssue
 */
$server->wsdl->addComplexType('ChiIssue', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_chirequirement_id' => array('name' => 'fk_chirequirement_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Responsible' => array('name' => 'Responsible', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiIssueList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiIssue[]')
    ),
    'tns:ChiIssue'
);
$server->register('getChiIssueList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiIssueList'), $NAMESPACE);
  
$server->register('createChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiIssue'=>'tns:ChiIssue', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiIssue'), $NAMESPACE);
  
$server->register('updateChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiIssue'=>'tns:ChiIssue', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiFeatureStatus
 */
$server->wsdl->addComplexType('ChiFeatureStatus', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiFeatureStatusList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiFeatureStatus[]')
    ),
    'tns:ChiFeatureStatus'
);
$server->register('getChiFeatureStatusList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiFeatureStatusList'), $NAMESPACE);
  
$server->register('createChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeatureStatus'=>'tns:ChiFeatureStatus', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiFeatureStatus'), $NAMESPACE);
  
$server->register('updateChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeatureStatus'=>'tns:ChiFeatureStatus', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiRequirementStatus
 */
$server->wsdl->addComplexType('ChiRequirementStatus', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiRequirementStatusList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiRequirementStatus[]')
    ),
    'tns:ChiRequirementStatus'
);
$server->register('getChiRequirementStatusList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiRequirementStatusList'), $NAMESPACE);
  
$server->register('createChiRequirementStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirementStatus'=>'tns:ChiRequirementStatus', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiRequirementStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiRequirementStatus'), $NAMESPACE);
  
$server->register('updateChiRequirementStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirementStatus'=>'tns:ChiRequirementStatus', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiRequirementStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiRequirementType
 */
$server->wsdl->addComplexType('ChiRequirementType', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiRequirementTypeList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiRequirementType[]')
    ),
    'tns:ChiRequirementType'
);
$server->register('getChiRequirementTypeList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiRequirementTypeList'), $NAMESPACE);
  
$server->register('createChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirementType'=>'tns:ChiRequirementType', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiRequirementType'), $NAMESPACE);
  
$server->register('updateChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirementType'=>'tns:ChiRequirementType', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**  
 * SOAP Method getNMFeatureRequirementsList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getNMFeatureRequirementsList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'NMFeatureRequirements'));
// PROTECTED REGION ID(soap/Methods/getNMFeatureRequirementsList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createNMFeatureRequirements
 * @param login The login name
 * @param password The login password
 * @param NMFeatureRequirements The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createNMFeatureRequirements($login, $password, $NMFeatureRequirements, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'NMFeatureRequirements',  PersistenceFacade::composeOID(array('type' => 'NMFeatureRequirements')) => $NMFeatureRequirements, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createNMFeatureRequirements) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readNMFeatureRequirements 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readNMFeatureRequirements($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readNMFeatureRequirements) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateNMFeatureRequirements 
 * @param login The login name
 * @param password The login password
 * @param NMFeatureRequirements The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateNMFeatureRequirements($login, $password, $NMFeatureRequirements, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $NMFeatureRequirements, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateNMFeatureRequirements) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteNMFeatureRequirements
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteNMFeatureRequirements($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteNMFeatureRequirements) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiGoalList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiGoalList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiGoal'));
// PROTECTED REGION ID(soap/Methods/getChiGoalList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiGoal
 * @param login The login name
 * @param password The login password
 * @param ChiGoal The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiGoal($login, $password, $ChiGoal, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiGoal',  PersistenceFacade::composeOID(array('type' => 'ChiGoal')) => $ChiGoal, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiGoal) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiGoal 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiGoal($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiGoal) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiGoal 
 * @param login The login name
 * @param password The login password
 * @param ChiGoal The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiGoal($login, $password, $ChiGoal, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiGoal, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiGoal) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiGoal
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiGoal($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiGoal) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiRequirementList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiRequirementList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiRequirement'));
// PROTECTED REGION ID(soap/Methods/getChiRequirementList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiRequirement
 * @param login The login name
 * @param password The login password
 * @param ChiRequirement The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiRequirement($login, $password, $ChiRequirement, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiRequirement',  PersistenceFacade::composeOID(array('type' => 'ChiRequirement')) => $ChiRequirement, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiRequirement) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiRequirement 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiRequirement($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiRequirement) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiRequirement 
 * @param login The login name
 * @param password The login password
 * @param ChiRequirement The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiRequirement($login, $password, $ChiRequirement, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiRequirement, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiRequirement) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiRequirement
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiRequirement($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiRequirement) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiFeatureList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiFeatureList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiFeature'));
// PROTECTED REGION ID(soap/Methods/getChiFeatureList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiFeature
 * @param login The login name
 * @param password The login password
 * @param ChiFeature The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiFeature($login, $password, $ChiFeature, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiFeature',  PersistenceFacade::composeOID(array('type' => 'ChiFeature')) => $ChiFeature, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiFeature) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiFeature 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiFeature($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiFeature) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiFeature 
 * @param login The login name
 * @param password The login password
 * @param ChiFeature The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiFeature($login, $password, $ChiFeature, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiFeature, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiFeature) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiFeature
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiFeature($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiFeature) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiIssueList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiIssueList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiIssue'));
// PROTECTED REGION ID(soap/Methods/getChiIssueList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiIssue
 * @param login The login name
 * @param password The login password
 * @param ChiIssue The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiIssue($login, $password, $ChiIssue, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiIssue',  PersistenceFacade::composeOID(array('type' => 'ChiIssue')) => $ChiIssue, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiIssue) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiIssue 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiIssue($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiIssue) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiIssue 
 * @param login The login name
 * @param password The login password
 * @param ChiIssue The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiIssue($login, $password, $ChiIssue, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiIssue, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiIssue) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiIssue
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiIssue($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiIssue) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiFeatureStatusList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiFeatureStatusList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiFeatureStatus'));
// PROTECTED REGION ID(soap/Methods/getChiFeatureStatusList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiFeatureStatus
 * @param login The login name
 * @param password The login password
 * @param ChiFeatureStatus The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiFeatureStatus($login, $password, $ChiFeatureStatus, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiFeatureStatus',  PersistenceFacade::composeOID(array('type' => 'ChiFeatureStatus')) => $ChiFeatureStatus, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiFeatureStatus) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiFeatureStatus 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiFeatureStatus($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiFeatureStatus) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiFeatureStatus 
 * @param login The login name
 * @param password The login password
 * @param ChiFeatureStatus The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiFeatureStatus($login, $password, $ChiFeatureStatus, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiFeatureStatus, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiFeatureStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiFeatureStatus
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiFeatureStatus($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiFeatureStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiRequirementStatusList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiRequirementStatusList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiRequirementStatus'));
// PROTECTED REGION ID(soap/Methods/getChiRequirementStatusList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiRequirementStatus
 * @param login The login name
 * @param password The login password
 * @param ChiRequirementStatus The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiRequirementStatus($login, $password, $ChiRequirementStatus, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiRequirementStatus',  PersistenceFacade::composeOID(array('type' => 'ChiRequirementStatus')) => $ChiRequirementStatus, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiRequirementStatus) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiRequirementStatus 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiRequirementStatus($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiRequirementStatus) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiRequirementStatus 
 * @param login The login name
 * @param password The login password
 * @param ChiRequirementStatus The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiRequirementStatus($login, $password, $ChiRequirementStatus, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiRequirementStatus, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiRequirementStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiRequirementStatus
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiRequirementStatus($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiRequirementStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiRequirementTypeList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiRequirementTypeList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiRequirementType'));
// PROTECTED REGION ID(soap/Methods/getChiRequirementTypeList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiRequirementType
 * @param login The login name
 * @param password The login password
 * @param ChiRequirementType The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiRequirementType($login, $password, $ChiRequirementType, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiRequirementType',  PersistenceFacade::composeOID(array('type' => 'ChiRequirementType')) => $ChiRequirementType, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiRequirementType) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiRequirementType 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiRequirementType($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiRequirementType) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiRequirementType 
 * @param login The login name
 * @param password The login password
 * @param ChiRequirementType The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiRequirementType($login, $password, $ChiRequirementType, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiRequirementType, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiRequirementType) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiRequirementType
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiRequirementType($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiRequirementType) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**
 * WSDL definition for ChiBusinessPartnerPassive
 */
$server->wsdl->addComplexType('ChiBusinessPartnerPassive', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessPartnerPassiveList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessPartnerPassive[]')
    ),
    'tns:ChiBusinessPartnerPassive'
);
$server->register('getChiBusinessPartnerPassiveList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessPartnerPassiveList'), $NAMESPACE);
  
$server->register('createChiBusinessPartnerPassive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartnerPassive'=>'tns:ChiBusinessPartnerPassive', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessPartnerPassive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessPartnerPassive'), $NAMESPACE);
  
$server->register('updateChiBusinessPartnerPassive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartnerPassive'=>'tns:ChiBusinessPartnerPassive', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessPartnerPassive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiWorker
 */
$server->wsdl->addComplexType('ChiWorker', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiWorkerList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiWorker[]')
    ),
    'tns:ChiWorker'
);
$server->register('getChiWorkerList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiWorkerList'), $NAMESPACE);
  
$server->register('createChiWorker',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorker'=>'tns:ChiWorker', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiWorker',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiWorker'), $NAMESPACE);
  
$server->register('updateChiWorker',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorker'=>'tns:ChiWorker', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiWorker',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiWorkerExternal
 */
$server->wsdl->addComplexType('ChiWorkerExternal', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'is_OfflineUser' => array('name' => 'is_OfflineUser', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiWorkerExternalList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiWorkerExternal[]')
    ),
    'tns:ChiWorkerExternal'
);
$server->register('getChiWorkerExternalList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiWorkerExternalList'), $NAMESPACE);
  
$server->register('createChiWorkerExternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorkerExternal'=>'tns:ChiWorkerExternal', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiWorkerExternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiWorkerExternal'), $NAMESPACE);
  
$server->register('updateChiWorkerExternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorkerExternal'=>'tns:ChiWorkerExternal', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiWorkerExternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiWorkerInternal
 */
$server->wsdl->addComplexType('ChiWorkerInternal', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiWorkerInternalList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiWorkerInternal[]')
    ),
    'tns:ChiWorkerInternal'
);
$server->register('getChiWorkerInternalList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiWorkerInternalList'), $NAMESPACE);
  
$server->register('createChiWorkerInternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorkerInternal'=>'tns:ChiWorkerInternal', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiWorkerInternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiWorkerInternal'), $NAMESPACE);
  
$server->register('updateChiWorkerInternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorkerInternal'=>'tns:ChiWorkerInternal', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiWorkerInternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for Actor
 */
$server->wsdl->addComplexType('Actor', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ActorList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Actor[]')
    ),
    'tns:Actor'
);
$server->register('getActorList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ActorList'), $NAMESPACE);
  
$server->register('createActor',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Actor'=>'tns:Actor', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readActor',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Actor'), $NAMESPACE);
  
$server->register('updateActor',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Actor'=>'tns:Actor', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteActor',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiBusinessProcess
 */
$server->wsdl->addComplexType('ChiBusinessProcess', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_model_id' => array('name' => 'fk_model_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'ChiBusinessUseCase' => array('name' => 'ChiBusinessUseCase', 'type' => 'tns:ChiBusinessUseCaseList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessProcessList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessProcess[]')
    ),
    'tns:ChiBusinessProcess'
);
$server->register('getChiBusinessProcessList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessProcessList'), $NAMESPACE);
  
$server->register('createChiBusinessProcess',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessProcess'=>'tns:ChiBusinessProcess', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessProcess',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessProcess'), $NAMESPACE);
  
$server->register('updateChiBusinessProcess',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessProcess'=>'tns:ChiBusinessProcess', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessProcess',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiBusinessUseCase
 */
$server->wsdl->addComplexType('ChiBusinessUseCase', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'PrimaryActor' => array('name' => 'PrimaryActor', 'type' => 'xsd:string'),
        'OtherActors' => array('name' => 'OtherActors', 'type' => 'xsd:string'),
        'GoalInContext' => array('name' => 'GoalInContext', 'type' => 'xsd:string'),
        'Scope' => array('name' => 'Scope', 'type' => 'xsd:string'),
        'Level' => array('name' => 'Level', 'type' => 'xsd:string'),
        'Stakeholders' => array('name' => 'Stakeholders', 'type' => 'xsd:string'),
        'Precondition' => array('name' => 'Precondition', 'type' => 'xsd:string'),
        'Trigger' => array('name' => 'Trigger', 'type' => 'xsd:string'),
        'MainSuccessScenario' => array('name' => 'MainSuccessScenario', 'type' => 'xsd:string'),
        'Extensions' => array('name' => 'Extensions', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessUseCaseList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessUseCase[]')
    ),
    'tns:ChiBusinessUseCase'
);
$server->register('getChiBusinessUseCaseList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessUseCaseList'), $NAMESPACE);
  
$server->register('createChiBusinessUseCase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessUseCase'=>'tns:ChiBusinessUseCase', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessUseCase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessUseCase'), $NAMESPACE);
  
$server->register('updateChiBusinessUseCase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessUseCase'=>'tns:ChiBusinessUseCase', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessUseCase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiBusinessUseCaseCore
 */
$server->wsdl->addComplexType('ChiBusinessUseCaseCore', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'PrimaryActor' => array('name' => 'PrimaryActor', 'type' => 'xsd:string'),
        'OtherActors' => array('name' => 'OtherActors', 'type' => 'xsd:string'),
        'GoalInContext' => array('name' => 'GoalInContext', 'type' => 'xsd:string'),
        'Scope' => array('name' => 'Scope', 'type' => 'xsd:string'),
        'Level' => array('name' => 'Level', 'type' => 'xsd:string'),
        'Stakeholders' => array('name' => 'Stakeholders', 'type' => 'xsd:string'),
        'Precondition' => array('name' => 'Precondition', 'type' => 'xsd:string'),
        'Trigger' => array('name' => 'Trigger', 'type' => 'xsd:string'),
        'MainSuccessScenario' => array('name' => 'MainSuccessScenario', 'type' => 'xsd:string'),
        'Extensions' => array('name' => 'Extensions', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessUseCaseCoreList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessUseCaseCore[]')
    ),
    'tns:ChiBusinessUseCaseCore'
);
$server->register('getChiBusinessUseCaseCoreList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessUseCaseCoreList'), $NAMESPACE);
  
$server->register('createChiBusinessUseCaseCore',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessUseCaseCore'=>'tns:ChiBusinessUseCaseCore', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessUseCaseCore',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessUseCaseCore'), $NAMESPACE);
  
$server->register('updateChiBusinessUseCaseCore',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessUseCaseCore'=>'tns:ChiBusinessUseCaseCore', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessUseCaseCore',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiBusinessPartner
 */
$server->wsdl->addComplexType('ChiBusinessPartner', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessPartnerList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessPartner[]')
    ),
    'tns:ChiBusinessPartner'
);
$server->register('getChiBusinessPartnerList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessPartnerList'), $NAMESPACE);
  
$server->register('createChiBusinessPartner',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartner'=>'tns:ChiBusinessPartner', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessPartner',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessPartner'), $NAMESPACE);
  
$server->register('updateChiBusinessPartner',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartner'=>'tns:ChiBusinessPartner', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessPartner',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiBusinessPartnerActive
 */
$server->wsdl->addComplexType('ChiBusinessPartnerActive', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessPartnerActiveList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessPartnerActive[]')
    ),
    'tns:ChiBusinessPartnerActive'
);
$server->register('getChiBusinessPartnerActiveList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessPartnerActiveList'), $NAMESPACE);
  
$server->register('createChiBusinessPartnerActive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartnerActive'=>'tns:ChiBusinessPartnerActive', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessPartnerActive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessPartnerActive'), $NAMESPACE);
  
$server->register('updateChiBusinessPartnerActive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartnerActive'=>'tns:ChiBusinessPartnerActive', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessPartnerActive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**  
 * SOAP Method getChiBusinessPartnerPassiveList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessPartnerPassiveList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessPartnerPassive'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessPartnerPassiveList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessPartnerPassive
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartnerPassive The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessPartnerPassive($login, $password, $ChiBusinessPartnerPassive, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessPartnerPassive',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessPartnerPassive')) => $ChiBusinessPartnerPassive, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessPartnerPassive) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessPartnerPassive 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessPartnerPassive($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessPartnerPassive) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessPartnerPassive 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartnerPassive The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessPartnerPassive($login, $password, $ChiBusinessPartnerPassive, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessPartnerPassive, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessPartnerPassive) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessPartnerPassive
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessPartnerPassive($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessPartnerPassive) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiWorkerList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiWorkerList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiWorker'));
// PROTECTED REGION ID(soap/Methods/getChiWorkerList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiWorker
 * @param login The login name
 * @param password The login password
 * @param ChiWorker The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiWorker($login, $password, $ChiWorker, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiWorker',  PersistenceFacade::composeOID(array('type' => 'ChiWorker')) => $ChiWorker, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiWorker) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiWorker 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiWorker($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiWorker) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiWorker 
 * @param login The login name
 * @param password The login password
 * @param ChiWorker The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiWorker($login, $password, $ChiWorker, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiWorker, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiWorker) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiWorker
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiWorker($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiWorker) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiWorkerExternalList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiWorkerExternalList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiWorkerExternal'));
// PROTECTED REGION ID(soap/Methods/getChiWorkerExternalList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiWorkerExternal
 * @param login The login name
 * @param password The login password
 * @param ChiWorkerExternal The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiWorkerExternal($login, $password, $ChiWorkerExternal, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiWorkerExternal',  PersistenceFacade::composeOID(array('type' => 'ChiWorkerExternal')) => $ChiWorkerExternal, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiWorkerExternal) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiWorkerExternal 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiWorkerExternal($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiWorkerExternal) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiWorkerExternal 
 * @param login The login name
 * @param password The login password
 * @param ChiWorkerExternal The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiWorkerExternal($login, $password, $ChiWorkerExternal, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiWorkerExternal, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiWorkerExternal) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiWorkerExternal
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiWorkerExternal($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiWorkerExternal) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiWorkerInternalList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiWorkerInternalList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiWorkerInternal'));
// PROTECTED REGION ID(soap/Methods/getChiWorkerInternalList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiWorkerInternal
 * @param login The login name
 * @param password The login password
 * @param ChiWorkerInternal The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiWorkerInternal($login, $password, $ChiWorkerInternal, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiWorkerInternal',  PersistenceFacade::composeOID(array('type' => 'ChiWorkerInternal')) => $ChiWorkerInternal, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiWorkerInternal) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiWorkerInternal 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiWorkerInternal($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiWorkerInternal) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiWorkerInternal 
 * @param login The login name
 * @param password The login password
 * @param ChiWorkerInternal The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiWorkerInternal($login, $password, $ChiWorkerInternal, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiWorkerInternal, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiWorkerInternal) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiWorkerInternal
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiWorkerInternal($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiWorkerInternal) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getActorList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getActorList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Actor'));
// PROTECTED REGION ID(soap/Methods/getActorList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createActor
 * @param login The login name
 * @param password The login password
 * @param Actor The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createActor($login, $password, $Actor, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Actor',  PersistenceFacade::composeOID(array('type' => 'Actor')) => $Actor, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createActor) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readActor 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readActor($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readActor) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateActor 
 * @param login The login name
 * @param password The login password
 * @param Actor The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateActor($login, $password, $Actor, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Actor, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateActor) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteActor
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteActor($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteActor) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiBusinessProcessList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessProcessList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessProcess'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessProcessList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessProcess
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessProcess The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessProcess($login, $password, $ChiBusinessProcess, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessProcess',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessProcess')) => $ChiBusinessProcess, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessProcess) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessProcess 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessProcess($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessProcess) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessProcess 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessProcess The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessProcess($login, $password, $ChiBusinessProcess, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessProcess, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessProcess) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessProcess
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessProcess($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessProcess) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiBusinessUseCaseList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessUseCaseList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessUseCase'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessUseCaseList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessUseCase
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessUseCase The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessUseCase($login, $password, $ChiBusinessUseCase, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessUseCase',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessUseCase')) => $ChiBusinessUseCase, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessUseCase) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessUseCase 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessUseCase($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessUseCase) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessUseCase 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessUseCase The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessUseCase($login, $password, $ChiBusinessUseCase, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessUseCase, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessUseCase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessUseCase
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessUseCase($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessUseCase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiBusinessUseCaseCoreList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessUseCaseCoreList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessUseCaseCore'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessUseCaseCoreList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessUseCaseCore
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessUseCaseCore The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessUseCaseCore($login, $password, $ChiBusinessUseCaseCore, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessUseCaseCore',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessUseCaseCore')) => $ChiBusinessUseCaseCore, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessUseCaseCore) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessUseCaseCore 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessUseCaseCore($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessUseCaseCore) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessUseCaseCore 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessUseCaseCore The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessUseCaseCore($login, $password, $ChiBusinessUseCaseCore, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessUseCaseCore, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessUseCaseCore) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessUseCaseCore
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessUseCaseCore($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessUseCaseCore) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiBusinessPartnerList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessPartnerList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessPartner'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessPartnerList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessPartner
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartner The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessPartner($login, $password, $ChiBusinessPartner, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessPartner',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessPartner')) => $ChiBusinessPartner, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessPartner) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessPartner 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessPartner($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessPartner) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessPartner 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartner The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessPartner($login, $password, $ChiBusinessPartner, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessPartner, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessPartner) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessPartner
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessPartner($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessPartner) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiBusinessPartnerActiveList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessPartnerActiveList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessPartnerActive'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessPartnerActiveList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessPartnerActive
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartnerActive The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessPartnerActive($login, $password, $ChiBusinessPartnerActive, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessPartnerActive',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessPartnerActive')) => $ChiBusinessPartnerActive, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessPartnerActive) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessPartnerActive 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessPartnerActive($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessPartnerActive) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessPartnerActive 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartnerActive The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessPartnerActive($login, $password, $ChiBusinessPartnerActive, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessPartnerActive, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessPartnerActive) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessPartnerActive
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessPartnerActive($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessPartnerActive) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**
 * WSDL definition for Adodbseq
 */
$server->wsdl->addComplexType('Adodbseq', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('AdodbseqList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Adodbseq[]')
    ),
    'tns:Adodbseq'
);
$server->register('getAdodbseqList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:AdodbseqList'), $NAMESPACE);
  
$server->register('createAdodbseq',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Adodbseq'=>'tns:Adodbseq', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readAdodbseq',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Adodbseq'), $NAMESPACE);
  
$server->register('updateAdodbseq',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Adodbseq'=>'tns:Adodbseq', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteAdodbseq',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for Locktable
 */
$server->wsdl->addComplexType('Locktable', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_user_id' => array('name' => 'fk_user_id', 'type' => 'xsd:string'),
        'objectid' => array('name' => 'objectid', 'type' => 'xsd:string'),
        'sessionid' => array('name' => 'sessionid', 'type' => 'xsd:string'),
        'since' => array('name' => 'since', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('LocktableList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Locktable[]')
    ),
    'tns:Locktable'
);
$server->register('getLocktableList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:LocktableList'), $NAMESPACE);
  
$server->register('createLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Locktable'=>'tns:Locktable', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Locktable'), $NAMESPACE);
  
$server->register('updateLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Locktable'=>'tns:Locktable', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for NMUserRole
 */
$server->wsdl->addComplexType('NMUserRole', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_role_id' => array('name' => 'fk_role_id', 'type' => 'xsd:string'),
        'fk_user_id' => array('name' => 'fk_user_id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMUserRoleList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMUserRole[]')
    ),
    'tns:NMUserRole'
);
$server->register('getNMUserRoleList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:NMUserRoleList'), $NAMESPACE);
  
$server->register('createNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'NMUserRole'=>'tns:NMUserRole', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:NMUserRole'), $NAMESPACE);
  
$server->register('updateNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'NMUserRole'=>'tns:NMUserRole', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for RoleRDB
 */
$server->wsdl->addComplexType('RoleRDB', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'NMUserRole' => array('name' => 'NMUserRole', 'type' => 'tns:NMUserRoleList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('RoleRDBList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:RoleRDB[]')
    ),
    'tns:RoleRDB'
);
$server->register('getRoleRDBList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:RoleRDBList'), $NAMESPACE);
  
$server->register('createRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'RoleRDB'=>'tns:RoleRDB', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:RoleRDB'), $NAMESPACE);
  
$server->register('updateRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'RoleRDB'=>'tns:RoleRDB', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for UserRDB
 */
$server->wsdl->addComplexType('UserRDB', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'login' => array('name' => 'login', 'type' => 'xsd:string'),
        'password' => array('name' => 'password', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'firstname' => array('name' => 'firstname', 'type' => 'xsd:string'),
        'config' => array('name' => 'config', 'type' => 'xsd:string'),
        'Locktable' => array('name' => 'Locktable', 'type' => 'tns:LocktableList'),
        'NMUserRole' => array('name' => 'NMUserRole', 'type' => 'tns:NMUserRoleList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('UserRDBList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:UserRDB[]')
    ),
    'tns:UserRDB'
);
$server->register('getUserRDBList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:UserRDBList'), $NAMESPACE);
  
$server->register('createUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'UserRDB'=>'tns:UserRDB', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:UserRDB'), $NAMESPACE);
  
$server->register('updateUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'UserRDB'=>'tns:UserRDB', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**  
 * SOAP Method getAdodbseqList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getAdodbseqList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Adodbseq'));
// PROTECTED REGION ID(soap/Methods/getAdodbseqList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createAdodbseq
 * @param login The login name
 * @param password The login password
 * @param Adodbseq The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createAdodbseq($login, $password, $Adodbseq, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Adodbseq',  PersistenceFacade::composeOID(array('type' => 'Adodbseq')) => $Adodbseq, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createAdodbseq) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readAdodbseq 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readAdodbseq($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readAdodbseq) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateAdodbseq 
 * @param login The login name
 * @param password The login password
 * @param Adodbseq The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateAdodbseq($login, $password, $Adodbseq, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Adodbseq, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateAdodbseq) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteAdodbseq
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteAdodbseq($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteAdodbseq) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getLocktableList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getLocktableList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Locktable'));
// PROTECTED REGION ID(soap/Methods/getLocktableList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createLocktable
 * @param login The login name
 * @param password The login password
 * @param Locktable The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createLocktable($login, $password, $Locktable, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Locktable',  PersistenceFacade::composeOID(array('type' => 'Locktable')) => $Locktable, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createLocktable) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readLocktable 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readLocktable($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readLocktable) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateLocktable 
 * @param login The login name
 * @param password The login password
 * @param Locktable The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateLocktable($login, $password, $Locktable, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Locktable, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateLocktable) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteLocktable
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteLocktable($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteLocktable) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getNMUserRoleList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getNMUserRoleList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'NMUserRole'));
// PROTECTED REGION ID(soap/Methods/getNMUserRoleList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createNMUserRole
 * @param login The login name
 * @param password The login password
 * @param NMUserRole The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createNMUserRole($login, $password, $NMUserRole, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'NMUserRole',  PersistenceFacade::composeOID(array('type' => 'NMUserRole')) => $NMUserRole, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createNMUserRole) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readNMUserRole 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readNMUserRole($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readNMUserRole) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateNMUserRole 
 * @param login The login name
 * @param password The login password
 * @param NMUserRole The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateNMUserRole($login, $password, $NMUserRole, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $NMUserRole, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateNMUserRole) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteNMUserRole
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteNMUserRole($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteNMUserRole) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getRoleRDBList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getRoleRDBList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'RoleRDB'));
// PROTECTED REGION ID(soap/Methods/getRoleRDBList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createRoleRDB
 * @param login The login name
 * @param password The login password
 * @param RoleRDB The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createRoleRDB($login, $password, $RoleRDB, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'RoleRDB',  PersistenceFacade::composeOID(array('type' => 'RoleRDB')) => $RoleRDB, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createRoleRDB) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readRoleRDB 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readRoleRDB($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readRoleRDB) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateRoleRDB 
 * @param login The login name
 * @param password The login password
 * @param RoleRDB The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateRoleRDB($login, $password, $RoleRDB, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $RoleRDB, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateRoleRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteRoleRDB
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteRoleRDB($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteRoleRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getUserRDBList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getUserRDBList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'UserRDB'));
// PROTECTED REGION ID(soap/Methods/getUserRDBList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createUserRDB
 * @param login The login name
 * @param password The login password
 * @param UserRDB The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createUserRDB($login, $password, $UserRDB, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'UserRDB',  PersistenceFacade::composeOID(array('type' => 'UserRDB')) => $UserRDB, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createUserRDB) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readUserRDB 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readUserRDB($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readUserRDB) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateUserRDB 
 * @param login The login name
 * @param password The login password
 * @param UserRDB The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateUserRDB($login, $password, $UserRDB, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $UserRDB, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateUserRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteUserRDB
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteUserRDB($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteUserRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**
 * WSDL definition for ChiAuthors
 */
$server->wsdl->addComplexType('ChiAuthors', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Role' => array('name' => 'Role', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiAuthorsList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiAuthors[]')
    ),
    'tns:ChiAuthors'
);
$server->register('getChiAuthorsList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiAuthorsList'), $NAMESPACE);
  
$server->register('createChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiAuthors'=>'tns:ChiAuthors', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiAuthors'), $NAMESPACE);
  
$server->register('updateChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiAuthors'=>'tns:ChiAuthors', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiNode
 */
$server->wsdl->addComplexType('ChiNode', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chicontroller_id' => array('name' => 'fk_chicontroller_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'ChiValue' => array('name' => 'ChiValue', 'type' => 'tns:ChiValueList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiNodeList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiNode[]')
    ),
    'tns:ChiNode'
);
$server->register('getChiNodeList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiNodeList'), $NAMESPACE);
  
$server->register('createChiNode',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiNode'=>'tns:ChiNode', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiNode',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiNode'), $NAMESPACE);
  
$server->register('updateChiNode',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiNode'=>'tns:ChiNode', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiNode',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiController
 */
$server->wsdl->addComplexType('ChiController', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'ChiNode' => array('name' => 'ChiNode', 'type' => 'tns:ChiNodeList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiControllerList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiController[]')
    ),
    'tns:ChiController'
);
$server->register('getChiControllerList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiControllerList'), $NAMESPACE);
  
$server->register('createChiController',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiController'=>'tns:ChiController', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiController',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiController'), $NAMESPACE);
  
$server->register('updateChiController',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiController'=>'tns:ChiController', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiController',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiView
 */
$server->wsdl->addComplexType('ChiView', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiViewList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiView[]')
    ),
    'tns:ChiView'
);
$server->register('getChiViewList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiViewList'), $NAMESPACE);
  
$server->register('createChiView',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiView'=>'tns:ChiView', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiView',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiView'), $NAMESPACE);
  
$server->register('updateChiView',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiView'=>'tns:ChiView', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiView',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiValue
 */
$server->wsdl->addComplexType('ChiValue', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chinode_id' => array('name' => 'fk_chinode_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiValueList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiValue[]')
    ),
    'tns:ChiValue'
);
$server->register('getChiValueList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiValueList'), $NAMESPACE);
  
$server->register('createChiValue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiValue'=>'tns:ChiValue', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiValue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiValue'), $NAMESPACE);
  
$server->register('updateChiValue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiValue'=>'tns:ChiValue', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiValue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**  
 * SOAP Method getChiAuthorsList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiAuthorsList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiAuthors'));
// PROTECTED REGION ID(soap/Methods/getChiAuthorsList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiAuthors
 * @param login The login name
 * @param password The login password
 * @param ChiAuthors The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiAuthors($login, $password, $ChiAuthors, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiAuthors',  PersistenceFacade::composeOID(array('type' => 'ChiAuthors')) => $ChiAuthors, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiAuthors) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiAuthors 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiAuthors($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiAuthors) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiAuthors 
 * @param login The login name
 * @param password The login password
 * @param ChiAuthors The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiAuthors($login, $password, $ChiAuthors, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiAuthors, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiAuthors) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiAuthors
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiAuthors($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiAuthors) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiNodeList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiNodeList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiNode'));
// PROTECTED REGION ID(soap/Methods/getChiNodeList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiNode
 * @param login The login name
 * @param password The login password
 * @param ChiNode The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiNode($login, $password, $ChiNode, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiNode',  PersistenceFacade::composeOID(array('type' => 'ChiNode')) => $ChiNode, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiNode) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiNode 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiNode($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiNode) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiNode 
 * @param login The login name
 * @param password The login password
 * @param ChiNode The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiNode($login, $password, $ChiNode, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiNode, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiNode) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiNode
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiNode($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiNode) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiControllerList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiControllerList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiController'));
// PROTECTED REGION ID(soap/Methods/getChiControllerList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiController
 * @param login The login name
 * @param password The login password
 * @param ChiController The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiController($login, $password, $ChiController, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiController',  PersistenceFacade::composeOID(array('type' => 'ChiController')) => $ChiController, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiController) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiController 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiController($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiController) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiController 
 * @param login The login name
 * @param password The login password
 * @param ChiController The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiController($login, $password, $ChiController, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiController, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiController) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiController
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiController($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiController) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiViewList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiViewList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiView'));
// PROTECTED REGION ID(soap/Methods/getChiViewList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiView
 * @param login The login name
 * @param password The login password
 * @param ChiView The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiView($login, $password, $ChiView, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiView',  PersistenceFacade::composeOID(array('type' => 'ChiView')) => $ChiView, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiView) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiView 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiView($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiView) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiView 
 * @param login The login name
 * @param password The login password
 * @param ChiView The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiView($login, $password, $ChiView, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiView, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiView) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiView
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiView($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiView) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiValueList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiValueList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiValue'));
// PROTECTED REGION ID(soap/Methods/getChiValueList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiValue
 * @param login The login name
 * @param password The login password
 * @param ChiValue The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiValue($login, $password, $ChiValue, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiValue',  PersistenceFacade::composeOID(array('type' => 'ChiValue')) => $ChiValue, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiValue) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiValue 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiValue($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiValue) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiValue 
 * @param login The login name
 * @param password The login password
 * @param ChiValue The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiValue($login, $password, $ChiValue, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiValue, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiValue) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiValue
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiValue($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiValue) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**
 * WSDL definition for ChiBase
 */
$server->wsdl->addComplexType('ChiBase', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBaseList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBase[]')
    ),
    'tns:ChiBase'
);
$server->register('getChiBaseList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBaseList'), $NAMESPACE);
  
$server->register('createChiBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBase'=>'tns:ChiBase', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBase'), $NAMESPACE);
  
$server->register('updateChiBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBase'=>'tns:ChiBase', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for EntityBase
 */
$server->wsdl->addComplexType('EntityBase', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('EntityBaseList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:EntityBase[]')
    ),
    'tns:EntityBase'
);
$server->register('getEntityBaseList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:EntityBaseList'), $NAMESPACE);
  
$server->register('createEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'EntityBase'=>'tns:EntityBase', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:EntityBase'), $NAMESPACE);
  
$server->register('updateEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'EntityBase'=>'tns:EntityBase', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for EntityBaseExtended
 */
$server->wsdl->addComplexType('EntityBaseExtended', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('EntityBaseExtendedList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:EntityBaseExtended[]')
    ),
    'tns:EntityBaseExtended'
);
$server->register('getEntityBaseExtendedList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:EntityBaseExtendedList'), $NAMESPACE);
  
$server->register('createEntityBaseExtended',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'EntityBaseExtended'=>'tns:EntityBaseExtended', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readEntityBaseExtended',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:EntityBaseExtended'), $NAMESPACE);
  
$server->register('updateEntityBaseExtended',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'EntityBaseExtended'=>'tns:EntityBaseExtended', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteEntityBaseExtended',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for Package
 */
$server->wsdl->addComplexType('Package', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_model_id' => array('name' => 'fk_model_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'ChiFeature' => array('name' => 'ChiFeature', 'type' => 'tns:ChiFeatureList'),
        'Diagram' => array('name' => 'Diagram', 'type' => 'tns:DiagramList'),
        'Package' => array('name' => 'Package', 'type' => 'tns:PackageList'),
        'ChiGoal' => array('name' => 'ChiGoal', 'type' => 'tns:ChiGoalList'),
        'Actor' => array('name' => 'Actor', 'type' => 'tns:ActorList'),
        'ChiRequirement' => array('name' => 'ChiRequirement', 'type' => 'tns:ChiRequirementList'),
        'ChiIssue' => array('name' => 'ChiIssue', 'type' => 'tns:ChiIssueList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('PackageList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Package[]')
    ),
    'tns:Package'
);
$server->register('getPackageList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:PackageList'), $NAMESPACE);
  
$server->register('createPackage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Package'=>'tns:Package', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readPackage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Package'), $NAMESPACE);
  
$server->register('updatePackage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Package'=>'tns:Package', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deletePackage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for Diagram
 */
$server->wsdl->addComplexType('Diagram', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Width' => array('name' => 'Width', 'type' => 'xsd:string'),
        'Height' => array('name' => 'Height', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('DiagramList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Diagram[]')
    ),
    'tns:Diagram'
);
$server->register('getDiagramList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:DiagramList'), $NAMESPACE);
  
$server->register('createDiagram',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Diagram'=>'tns:Diagram', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readDiagram',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Diagram'), $NAMESPACE);
  
$server->register('updateDiagram',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Diagram'=>'tns:Diagram', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteDiagram',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for Model
 */
$server->wsdl->addComplexType('Model', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'Package' => array('name' => 'Package', 'type' => 'tns:PackageList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ModelList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Model[]')
    ),
    'tns:Model'
);
$server->register('getModelList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ModelList'), $NAMESPACE);
  
$server->register('createModel',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Model'=>'tns:Model', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readModel',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Model'), $NAMESPACE);
  
$server->register('updateModel',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Model'=>'tns:Model', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteModel',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**  
 * SOAP Method getChiBaseList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBaseList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBase'));
// PROTECTED REGION ID(soap/Methods/getChiBaseList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBase
 * @param login The login name
 * @param password The login password
 * @param ChiBase The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBase($login, $password, $ChiBase, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBase',  PersistenceFacade::composeOID(array('type' => 'ChiBase')) => $ChiBase, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBase) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBase 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBase($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBase) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBase 
 * @param login The login name
 * @param password The login password
 * @param ChiBase The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBase($login, $password, $ChiBase, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBase, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBase
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBase($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getEntityBaseList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getEntityBaseList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'EntityBase'));
// PROTECTED REGION ID(soap/Methods/getEntityBaseList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createEntityBase
 * @param login The login name
 * @param password The login password
 * @param EntityBase The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createEntityBase($login, $password, $EntityBase, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'EntityBase',  PersistenceFacade::composeOID(array('type' => 'EntityBase')) => $EntityBase, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createEntityBase) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readEntityBase 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readEntityBase($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readEntityBase) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateEntityBase 
 * @param login The login name
 * @param password The login password
 * @param EntityBase The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateEntityBase($login, $password, $EntityBase, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $EntityBase, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateEntityBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteEntityBase
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteEntityBase($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteEntityBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getEntityBaseExtendedList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getEntityBaseExtendedList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'EntityBaseExtended'));
// PROTECTED REGION ID(soap/Methods/getEntityBaseExtendedList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createEntityBaseExtended
 * @param login The login name
 * @param password The login password
 * @param EntityBaseExtended The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createEntityBaseExtended($login, $password, $EntityBaseExtended, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'EntityBaseExtended',  PersistenceFacade::composeOID(array('type' => 'EntityBaseExtended')) => $EntityBaseExtended, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createEntityBaseExtended) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readEntityBaseExtended 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readEntityBaseExtended($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readEntityBaseExtended) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateEntityBaseExtended 
 * @param login The login name
 * @param password The login password
 * @param EntityBaseExtended The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateEntityBaseExtended($login, $password, $EntityBaseExtended, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $EntityBaseExtended, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateEntityBaseExtended) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteEntityBaseExtended
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteEntityBaseExtended($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteEntityBaseExtended) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getPackageList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getPackageList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Package'));
// PROTECTED REGION ID(soap/Methods/getPackageList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createPackage
 * @param login The login name
 * @param password The login password
 * @param Package The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createPackage($login, $password, $Package, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Package',  PersistenceFacade::composeOID(array('type' => 'Package')) => $Package, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createPackage) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readPackage 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readPackage($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readPackage) START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updatePackage 
 * @param login The login name
 * @param password The login password
 * @param Package The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updatePackage($login, $password, $Package, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Package, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updatePackage) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deletePackage
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deletePackage($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deletePackage) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getDiagramList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getDiagramList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Diagram'));
// PROTECTED REGION ID(soap/Methods/getDiagramList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createDiagram
 * @param login The login name
 * @param password The login password
 * @param Diagram The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createDiagram($login, $password, $Diagram, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Diagram',  PersistenceFacade::composeOID(array('type' => 'Diagram')) => $Diagram, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createDiagram) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readDiagram 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readDiagram($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readDiagram) START
	$result = doSoapCall();
  // extract the childoids, parentoids properties
  $node = $result->getValue('node');
  $node['parentoids'] = $node['properties']['parentoids'];
  $node['childoids'] = $node['properties']['childoids'];
	return $node;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateDiagram 
 * @param login The login name
 * @param password The login password
 * @param Diagram The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateDiagram($login, $password, $Diagram, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Diagram, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateDiagram) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteDiagram
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteDiagram($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteDiagram) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getModelList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getModelList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Model'));
// PROTECTED REGION ID(soap/Methods/getModelList) START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createModel
 * @param login The login name
 * @param password The login password
 * @param Model The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createModel($login, $password, $Model, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Model',  PersistenceFacade::composeOID(array('type' => 'Model')) => $Model, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createModel) START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readModel 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readModel($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readModel) START
	$result = doSoapCall();
  // extract the childoids, parentoids properties
  $node = $result->getValue('node');
  $node['parentoids'] = $node['properties']['parentoids'];
  $node['childoids'] = $node['properties']['childoids'];
	return $node;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateModel 
 * @param login The login name
 * @param password The login password
 * @param Model The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateModel($login, $password, $Model, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Model, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateModel) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteModel
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteModel($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteModel) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


$server->register('search',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'searchterm'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);

/**  
 * SOAP Method search 
 * @param login The login name
 * @param password The login password
 * @param searchterm The search term
 * @return string
 */  
function search($login, $password, $searchterm)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'searchterm' => $searchterm, 'usr_action' => 'soapSearch'));
	$result = doSoapCall();
	return $result->getValue('soapResult');
}  


$server->register('advancedSearch',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'type'=>'xsd:string', 'query'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);

/**  
 * SOAP Method advancedSearch 
 * @param login The login name
 * @param password The login password
 * @param type The type to search for
 * @param query The query definition (@see StringQuery)
 * @return string
 */  
function advancedSearch($login, $password, $type, $query)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'type' => $type, 'query' => $query, 'usr_action' => 'soapAdvancedSearch'));
	$result = doSoapCall();
	return $result->getValue('soapResult');
}  


// Use the request to (try to) invoke the service
$HTTP_RAW_POST_DATA = isset($HTTP_RAW_POST_DATA) ? $HTTP_RAW_POST_DATA : '';
$server->service($HTTP_RAW_POST_DATA);



/**
 * Do the soap call using the ActionMapper
 * @return The Response instance from the executed Controller
 */
function doSoapCall()
{
  // initialize the application
  $application = &Application::getInstance();
  $callParams = &$application->initialize('include/', 'config.ini', 'ExitController', '', $_GET['usr_action'], MSG_FORMAT_SOAP);

  // set the error handler
  $GLOBALS['MESSAGE_ERROR_HANDLER'] = "onError";
  
  // login with the data given in the request
  $session = &SessionData::getInstance();
  $objectFactory = &ObjectFactory::getInstance();
  $authUser = new AuthUser();
  if ($authUser->login($_GET['login'], $_GET['password']))
  {
    // login succeeded, store the user in the session
    $session->set('auth_user', $authUser);
  
    // process the requested action
    $request = new Request(
      $callParams['controller'], 
      $callParams['context'], 
      $callParams['action'], 
      $callParams['data']
    );
    $request->setFormat(MSG_FORMAT_SOAP);
    $request->setResponseFormat(MSG_FORMAT_SOAP);
    $response = &ActionMapper::processAction($request);
    $error = $response->getValue('errorMsg');
    if (strlen($error) > 0)
      Message::error($error);
  }
  else
    Message::error("Login failed");

  // cleanup
  $lockManager = &LockManager::getInstance();
  $lockManager->releaseAllLocks();
  $session->destroy();
      
  return $response;
}

/**
 * Global error handling function. Assigned to MESSAGE_ERROR_HANDLER 
 * which means it is called by Message::error()
 * @param message The error message
 * @param file The php file in which the error occured (optional)
 * @param line The line in the php file in which the error occured (optional)
 * @return The value
 */
function onError($message, $file='', $line='') 
{ 
  global $server;
  $server->fault('SOAP-ENV:SERVER', $message, '', Message::getStackTrace());
  Message::log($message." (".$file.", ".$line.").\n".Message::getStackTrace());
}
?>

