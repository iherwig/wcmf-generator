<project default="zip">
	<property file="build.properties" />
	
	<taskdef name="extractJsLinks" classname="net.sourceforge.olympos.ant.ExtractJsLinks" classpath="lib/ChronosBuildAnt.jar" />
	<taskdef name="replaceSectionsByLinks" classname="net.sourceforge.olympos.ant.ReplaceSectionsByLinks" classpath="lib/ChronosBuildAnt.jar" />
	<taskdef name="jsmin" classname="net.matthaynes.jsmin.JSMin_Task" classpath="lib/jsmin.0.2.4.jar" />
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpath="lib/svnant/svnant.jar:lib/svnant/svnClientAdapter.jar:lib/svnant/svnjavahl.jar:lib/svnant/svnkit.jar" /> 

	<target name="checkDirs">
		<available property="guiAvailable" file="${gui.dir}" type="dir" />
		<fail unless="guiAvailable" message="source directory ${gui.dir} not available."/>

		<available property="applicationAvailable" file="${application.dir}" type="dir" />
		<fail unless="applicationAvailable" message="source directory ${application.dir} not available."/>

		<available property="wcmfAvailable" file="${wcmf.dir}" type="dir" />
		<fail unless="wcmfAvailable" message="source directory ${wcmf.dir} not available."/>

		<available property="ChronosLibAvailable" file="${ChronosLib.dir}" type="dir" />
		<fail unless="ChronosLibAvailable" message="source directory ${ChronosLib.dir} not available."/>

		<available property="cweAvailable" file="${cwe.dir}" type="dir" />
		<fail unless="cweAvailable" message="source directory ${cwe.dir} not available."/>

		<available property="BrowserAvailable" file="${Browser.dir}" type="dir" />
		<fail unless="BrowserAvailable" message="source directory ${Browser.dir} not available."/>

		<available property="generatorAvailable" file="${generator.dir}" type="dir" />
		<fail unless="generatorAvailable" message="source directory ${generator.dir} not available."/>
	</target>
	
	<target name="clean">
		<delete includeemptydirs="true" verbose="false" failonerror="false">
			<fileset dir="${build.dir}" includes="**/*" />
		</delete>
	</target>
	
	<target name="mkdirs">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}/generator"/>
	</target>
	
	<target name="export" depends="checkDirs, clean, mkdirs">
		<svn>
			<export srcpath="${gui.dir}" destpath="${build.dir}/gui" />
			<export srcpath="${application.dir}" destpath="${build.dir}/application" />
			<export srcpath="${wcmf.dir}" destpath="${build.dir}/wcmf" />
			<export srcpath="${ChronosLib.dir}" destpath="${build.dir}/ChronosLib" />
			<export srcpath="${cwe.dir}" destpath="${build.dir}/cwe" />
			<export srcpath="${Browser.dir}" destpath="${build.dir}/Browser" />
		</svn>
	</target>
	
	<target name="generator" depends="checkDirs, clean, mkdirs">
		<property name="redist.dir.absolute" location="${build.dir}/generator"/>
		<ant inheritall="false" inheritrefs="false" dir="${generator.dir}/build" antfile="build.xml">
			<property name="redist.dir" value="${redist.dir.absolute}" />
		</ant>
	</target>
	
	<target name="delete" depends="export">
		<delete verbose="true" includeemptydirs="true">
			<fileset dir="${build.dir}">
				<include name="*/.settings/**/*"/>
				<include name="*/.settings"/>
				<include name="wcmf/blank/**/*"/>
				<include name="wcmf/blank"/>
				<include name="*/.project"/>
				<include name="gui/updaterevision.bat"/>
			</fileset>
		</delete>
	</target>
	
	<target name="resetServerIni" depends="export">
		<fileset id="server.ini" dir="${build.dir}">
			<include name="application/include/server.ini"/>
		</fileset>
		<replaceregexp match="dbHostName\s=\s.*" replace="dbHostName = localhost">
			<fileset refid="server.ini"/>
		</replaceregexp>
		<replaceregexp match="dbName\s=\s.*" replace="dbName = cwm">
			<fileset refid="server.ini"/>
		</replaceregexp>
		<replaceregexp match="dbPassword\s=\s.*" replace="dbPassword = cwm">
			<fileset refid="server.ini"/>
		</replaceregexp>
		<replaceregexp match="dbType\s=\s.*" replace="dbType = mysql">
			<fileset refid="server.ini"/>
		</replaceregexp>
		<replaceregexp match="dbUserName\s=\s.*" replace="dbUserName = cwm">
			<fileset refid="server.ini"/>
		</replaceregexp>
		<replaceregexp match="executable\s=\s.*" replace="executable = /path/to/ChronosGenerator.jar">
			<fileset refid="server.ini"/>
		</replaceregexp>
	</target>
	
	<target name="resetDebug.gui" depends="export">
		<replaceregexp match="([a-zA-Z0-9]+).Config.debug\s+=\s+true;" replace="\1.Config.debug = false;">
			<fileset dir="${build.dir}">
				<include name="gui/js/uwm/Config.js"/>
			</fileset>
		</replaceregexp>
	</target>
	
	<target name="setRevision.gui" depends="export">
		<svn svnkit="true">
			<wcversion path="${gui.dir}" prefix="gui."/>
		</svn>
		
		<replaceregexp
			match="uwm\.Constants\.SVN_REVISION\s*=\s*&quot;[0-9]+&quot;;" 
			replace="uwm.Constants.SVN_REVISION = &quot;${gui.revision.max}&quot;;"
			file="${build.dir}/gui/js/uwm/Constants.js"
		/>
	</target>
		
	<target name="minimize.gui" depends="setRevision.gui, resetDebug.gui">
		<property name="index.html" value="${build.dir}/gui/index.html"/>

		<property name="cwm-large.js" value="${build.dir}/gui/js/cwm-large.js"/>
		<extractJsLinks htmlfile="${index.html}" sectionname="CWM" jsfileset="cwmFileSet" />
		<concat fixlastline="true" destfile="${cwm-large.js}">
			<fileset refid="cwmFileSet">
			</fileset>
		</concat>
		<jsmin srcfile="${cwm-large.js}" destfile="${build.dir}/gui/js/cwm.js" />
	
		<property name="uwm-large.js" value="${build.dir}/gui/js/uwm-large.js"/>
		<extractJsLinks htmlfile="${index.html}" sectionname="UWM" jsfileset="uwmFileSet" />
		<concat fixlastline="true" destfile="${uwm-large.js}">
			<fileset refid="uwmFileSet">
			</fileset>
		</concat>
		<jsmin srcfile="${uwm-large.js}" destfile="${build.dir}/gui/js/uwm.js" />
	
		<property name="cwb-large.js" value="${build.dir}/gui/js/cwb-large.js"/>
		<extractJsLinks htmlfile="${index.html}" sectionname="CWB" jsfileset="cwbFileSet" />
		<concat fixlastline="true" destfile="${cwb-large.js}">
			<fileset refid="cwbFileSet">
			</fileset>
		</concat>
		<jsmin srcfile="${cwb-large.js}" destfile="${build.dir}/gui/js/cwb.js" />
	
		<property name="index.html.tmp" value="${build.dir}/index.html"/>
		<replaceSectionsByLinks srcfile="${index.html}" dstfile="${index.html.tmp}">
			<mapping sectionname="CWM" linkurl="js/cwm.js" />
			<mapping sectionname="UWM" linkurl="js/uwm.js" />
			<mapping sectionname="CWB" linkurl="js/cwb.js" />
		</replaceSectionsByLinks>
		
		<move file="${index.html.tmp}" tofile="${index.html}" overwrite="true" />
		
		<property name="Config.js" value="${build.dir}/gui/js/uwm/Config.js"/>
		<property name="Config.js.tmp" value="${build.dir}/Config.js"/>
		
		<move file="${Config.js}" tofile="${Config.js.tmp}"/>
		
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}/gui">
				<include name="js/**/*.js"/>
				<exclude name="js/cwm.js"/>
				<exclude name="js/uwm.js"/>
				<exclude name="js/cwb.js"/>
			</fileset>
			<fileset dir="${build.dir}/gui/js/cwm"/>
			<fileset dir="${build.dir}/gui/js/uwm"/>
		</delete>
		
		<mkdir dir="${build.dir}/gui/js/uwm"/>
		
		<move file="${Config.js.tmp}" tofile="${Config.js}" />
	</target>
	
	<target name="zip" depends="generator, delete, minimize.gui, resetServerIni">
		<tstamp/>
		
		<zip destfile="${zip.file.prefix}-${version}-${DSTAMP}.zip">
			<zipfileset dir="${build.dir}">
			</zipfileset>
		</zip>
	</target>
</project>