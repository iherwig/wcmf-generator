<project name="Chronos Generator" default="redist" basedir=".">
	<property file="build.properties"/>
	<property name="cartridge.absolute.build.dir" location="${cartridge.build.dir}"/>
	<property name="template.absolute.build.dir" location="${template.build.dir}"/>
	<property name="lib.absolute.build.dir" location="${lib.build.dir}"/>
	<property name="build.absolute.dir" location="${build.dir}"/>
	
	<path id="lib.path">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="clean">
		<delete includeemptydirs="true" verbose="false" failonerror="false">
			<fileset dir="${build.dir}" includes="**/*" />
			<fileset dir="${redist.dir}" includes="**/*" />
		</delete>
	</target>
	
	<target name="create-dirs" depends="clean">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${lib.build.dir}"/>
		<mkdir dir="${cartridge.build.dir}"/>
		<mkdir dir="${template.build.dir}"/>
		<mkdir dir="${redist.dir}"/>
	</target>

	<target name="build-cartridges" depends="create-dirs">
		<subant antfile="build.xml" inheritall="true" inheritrefs="true" genericantfile="cartridge.xml">
			<dirset dir="${cartridge.dir}" includes="*"/>
		</subant>
	</target>
	
	<target name="build-templates" depends="build-cartridges">
		<subant antfile="build.xml" inheritall="true" inheritrefs="true" genericantfile="template.xml">
			<dirset dir="${template.dir}" includes="*"/>
		</subant>
	</target>
	
	<target name="compile" depends="build-templates">
		<tstamp/>
		<javac encoding="utf-8" srcdir="${source.dir}" destdir="${build.dir}" debug="${debug}" excludesfile="compile-excludes">
			<classpath>
				<path refid="lib.path"/>
			</classpath>
		</javac>
	</target>

	<target name="buildinfo" depends="compile">
		<propertyfile file="${build.info}"
		 comment="Build Information File - DO NOT MODIFY">
		    <entry key="version"
		     value="${version}"/>
		    <entry key="build"
		     type="int" default="0000"
		     operation="+" pattern="0000"/>
		</propertyfile>		
	    <property file="${build.info}"/>
	</target>

	<target name="build-cwe-check">
		<condition property="cwe.build.from.source">
			<and>
				<available file="${cwe.source.dir}" property="cwe.source.available"/>
				<available file="${ChronosLib.source.dir}" property="ChronosLib.source.available"/>
			</and>
		</condition>

		<mkdir dir="${build.dir}/wcmf"/>
	</target>
	
	<target name="build-cwe-source" depends="build-cwe-check" if="cwe.build.from.source">
		<zip destfile="${build.dir}/wcmf/cwe.zip">
			<zipfileset dir="${cwe.source.dir}" prefix="cwe">
				<exclude name="**/.svn"/>
				<exclude name=".project"/>
				<exclude name=".settings/**"/>
				<exclude name="jsDoc"/>
			</zipfileset>
			<zipfileset dir="${ChronosLib.source.dir}" prefix="ChronosLib">
				<exclude name="**/.svn"/>
				<exclude name=".project"/>
				<exclude name=".settings/**"/>
				<exclude name="JIT/**"/>
				<exclude name="draw2d/**"/>
			</zipfileset>
		</zip>
	</target>
	
	<target name="build-cwe-copy" depends="build-cwe-check" unless="cwe.build.from.source">
		<antcall target="copy-zipped-libs"/>
	</target>
	
	<target name="build-cwe" depends="build-cwe-source, build-cwe-copy"/>
	
	<target name="copy-zipped-libs" unless="copy-zipped-libs-ran">
		<copy todir="${build.dir}/" verbose="false">
			<fileset dir=".">
				<include name="wcmf/**/*.*"/>
			</fileset>
		</copy>
	</target>
	
	<target name="build-wcmf-check">
		<available file="${wcmf.source.dir}" property="wcmf.build.from.source"/>

		<mkdir dir="${build.dir}/wcmf"/>
	</target>
	
	<target name="build-wcmf-source" depends="build-wcmf-check" if="wcmf.build.from.source">
		<zip destfile="${build.dir}/wcmf/wcmf.zip">
			<zipfileset dir="${wcmf.source.dir}">
				<exclude name="**/.svn"/>
				<exclude name=".*"/>
				<exclude name=".settings/**"/>
				<exclude name="blank/include/admin.ini"/>
				<exclude name="blank/include/config.ini"/>
			</zipfileset>
			<zipfileset dir="${res.dir}" prefix="blank/include">
				<include name="admin.ini"/>
				<include name="config.ini"/>
			</zipfileset>
		</zip>
	</target>
	
	<target name="build-wcmf-copy" depends="build-wcmf-check" unless="wcmf.build.from.source">
		<antcall target="copy-zipped-libs"/>
	</target>

	<target name="build-wcmf" depends="build-wcmf-source, build-wcmf-copy"/>
		
	<target name="redist" depends="buildinfo, build-cwe, build-wcmf">
		<!-- copy all libs ... -->
		<copy todir="${redist.libdir}" verbose="false">
			<fileset dir="${lib.dir}">
				<include name="**/*.*"/>
			</fileset>
			<fileset dir="${lib.build.dir}">
				<include name="**/*.*"/>
			</fileset>
		</copy>

		<manifestclasspath property="lib.list" jarfile="${redist.dir}/${jar.file}">
			<classpath>
				<fileset dir="${redist.libdir}"/>
			</classpath>
		</manifestclasspath>
		
		<jar jarfile="${redist.dir}/${jar.file}">
			<fileset dir="${build.dir}">
				<include name="**/*.class"/>
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="net.sourceforge.olympos.oaw.Generator"/>
				<attribute name="wCMFGenerator-Version" value="${version}.${build}"/>
				<attribute name="Class-Path" value=". ${lib.list}"/>
		   </manifest>
		</jar>

		<!-- copy all files ... -->
		<copy todir="${redist.dir}/" verbose="false">
			<fileset dir="${source.dir}">
				<include name="common/**/*.*"/>
				<include name="metamodel/**/*.*"/>
				<include name="**/*.properties"/>
			</fileset>
			<fileset dir=".">
				<include name="${build.info}"/>
			</fileset>
			<fileset file="${res.dir}/run.bat" />
		</copy>
		<copy todir="${redist.dir}/cartridge" verbose="false">
			<fileset dir="${cartridge.build.dir}" />
		</copy>
		<copy todir="${redist.dir}" verbose="false">
			<fileset dir="${build.dir}">
				<include name="wcmf/**/*"/>
			</fileset>
		</copy>

		<zip destfile="${zip.dir}/ChronosGenerator-${version}.zip" basedir="${redist.dir}"/>
	</target>

</project>
