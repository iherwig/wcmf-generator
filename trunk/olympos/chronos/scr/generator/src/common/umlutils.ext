import uml;

extension org::openarchitectureware::uml2::utils;

extension common::util;

/**
 * Get the xmi:id of an element
 */
String getId(uml::Element this) : this.xmiId();

/**
 * Get the author of an element
 * TODO: check if this is supported in a profile / supported by other tools than ea
 */
String getAuthor(uml::Element this) : "";

/**
 * Get the version of an element
 * TODO: check if this is supported in a profile / supported by other tools than ea
 */
String getVersion(uml::Element this) : "1.0";

/**
 * Get the comment of an element joined with linebreaks
 */
String getComment(uml::Element this) : join(this.ownedComment.body, "\\n").replaceAll("(\\r)", "");

/**
 * Get the comment of an element joined with the given separator
 */
String getComment(uml::Element this, String separator) : this.getComment().replaceAll("(\\n)", separator);

/**
 * Get the role names of a class (names of association ends)
 */
cached List[String] getRoleNames(uml::Type this) :
	this.getAssociations().memberEnd.select(e|e.type == this).name.reject(e|e.length == 0).add(this.name).toSet()
;

/**
 * Get the role name of a property
 */
String getRoleName(uml::Property this) :
	this.name.isNullOrEmpty() ? this.type.name : this.name
;

/**
 * Get the subclasses of a class
 */
List[uml::Class] getSubClasses(uml::Class this) : 
	this.getModel().allOwnedElements().typeSelect(uml::Class).select(e|e.getGenerals().contains(this));

/**
 * Check if the given class has a super class
 */
boolean hasSuperClass(uml::Class this) : !this.superClass.isEmpty;

/**
 * Get the (first) superclass of a class
 */
uml::Class getSuperClass(uml::Class this) : this.superClass.first();

/**
 * Check if a class inherits from another
 */
Boolean isInheritingFrom(uml::Class this, uml::Class other) :
	this.superClass.contains(other) ? true : 
		this.superClass.exists(e|this.isInheritingFrom(e))
;

/**
 * Get the package name of the class
 */
/*
//Commented out because of dependency to RootPackage()
String getFullPackageName(uml::Class cls) :  
	cls.package!=null ? getPackageName(cls.package).replaceFirst(RootPackage()+".", "") : "";
*/

/**
 * Check if an association is bidirectional
 */	
boolean isBidirectional(uml::Association assoc) :
	assoc.memberEnd.size==2 && assoc.memberEnd.forAll(e|e.isNavigable())
;

/**
 * Check if an association is a composition
 */	
boolean isComposition(uml::Property p) :
	p.opposite.aggregation.compareTo(uml::AggregationKind::composite) == 0
;

/**
 * Check if an association is an aggregation
 */	
boolean isAggregation(uml::Property p) :
	p.opposite.aggregation.compareTo(uml::AggregationKind::shared) == 0
;

/**
 * Get a tagged value
 */
Object getTaggedValue(uml::Element this, String st, String name) :
	JAVA net.sourceforge.olympos.oaw.extend.UMLHelper.getTaggedValue(org.eclipse.uml2.uml.Element, java.lang.String, java.lang.String)
;

/**
 * Get the class that owns the given property
 */
uml::Class getOwningClass(uml::Property this) : 
	this.owner
;

/**
 * Private functions
 */ 
 
/**
 * Get the fully qualified name of the package
 */
private cached String getPackageName(uml::Package pck) :
	(pck.nestingPackage!=null && !uml::Model.isInstance(pck.nestingPackage)) ? getPackageName(pck.nestingPackage)+"."+pck.name : pck.name
;