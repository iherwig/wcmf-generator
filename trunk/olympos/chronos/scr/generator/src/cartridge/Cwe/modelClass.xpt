«IMPORT uml»
«IMPORT Chronos»

«EXTENSION common::util»
«EXTENSION common::umlutils»

«EXTENSION cartridge::ChiCmf::extensions::umlutils»
«EXTENSION cartridge::ChiCmf::extensions::naming»
«EXTENSION cartridge::ChiCmf::extensions::util»

«EXTENSION cartridge::ChiCmf::extensions::ChiNode»
«EXTENSION cartridge::ChiCmf::extensions::ChiValue»
«EXTENSION cartridge::ChiCmf::extensions::globals»

«EXTENSION cartridge::Cwe::util»

«DEFINE root FOR uml::Model»
	«EXPAND modelClass FOREACH this.getModelClasses()»
«ENDDEFINE»

«DEFINE modelClass FOR Chronos::ChiNode»
	«info("Creating class " + this.name)»
	«FILE "js/application/" + this.getFullPackageName().asPath() + "/" + this.name + ".class.js"»
/*
 * Copyright (c) 2009 The Olympos Development Team.
 * 
 * http://sourceforge.net/projects/olympos/
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code, this
 * entire header must remain intact.
 */
Ext.namespace("application.«this.getFullPackageName()»");

application.«this.getFullPackageName()».«this.name» = function() {
	application.«this.getFullPackageName()».«this.name».superclass.constructor.call(this, arguments);
	
	this.cweModelElementId = "«this.name»";
	this.name = "«this.name»";
	this.treeIconClass = "«this.name»TreeIcon16x16";
	this.owningPackageId = "«this.owner.getCwePackageName()»";
	
	«EXPAND recordDefinition FOR this»
	
	«EXPAND relations FOR this»
};

Ext.extend(application.«this.getFullPackageName()».«this.name», cwe.model.ModelClass);

«EXPAND getGridColumns FOR this»

«EXPAND getEditorItems FOR this»

«EXPAND getLabel FOR this»

cwe.model.ModelClassContainer.getInstance().registerClass(new application.«this.getFullPackageName()».«this.name»());
	«ENDFILE»
«ENDDEFINE»

«DEFINE recordDefinition FOR Chronos::ChiNode»
	this.recordDefinition = [
	«FOREACH this.getChiAttributes() AS currValue SEPARATOR ", "»
		{
			name : "«currValue.name»",
			mapping : "«currValue.name»"
		}
	«ENDFOREACH»
	
	«IF this.getChiAttributes().size > 0 && (this.getNotAbstractParentNodes().size > 0 || this.getNotAbstractChildNodes().size > 0)»
		,
	«ENDIF»
	
	«FOREACH this.getNotAbstractParentNodes() AS currParent SEPARATOR ", "»
		{
			name : "parent«currParent.getRoleName()»",
			mapping: "parent«currParent.getRoleName()»"
		}
	«ENDFOREACH»
	
	«IF this.getNotAbstractParentNodes().size > 0 && this.getNotAbstractChildNodes().size > 0»
		,
	«ENDIF»
	
	«FOREACH this.getNotAbstractChildNodes() AS currChild SEPARATOR ", "»
		{
			name : "child«currChild.getRoleName()»",
			mapping : "child«currChild.getRoleName()»"
		}
	«ENDFOREACH»
	];
«ENDDEFINE»

«DEFINE relations FOR Chronos::ChiNode»
	this.relations = {
	«FOREACH this.getNotAbstractParentNodes() AS currParent SEPARATOR ", "»
		"parent«currParent.getRoleName()»" : {
			isParent : true,
			targetModelClassId : "«currParent.type.name»"
		}
	«ENDFOREACH»

	«IF (this.getNotAbstractParentNodes().size > 0) && (this.getNotAbstractChildNodes().size > 0)»
		,
	«ENDIF»
	
	«FOREACH this.getNotAbstractChildNodes() AS currChild SEPARATOR ", "»
		"child«currChild.getRoleName()»" : {
			isParent : false,
			targetModelClassId : "«currChild.type.name»"
		}
	«ENDFOREACH»
	};
«ENDDEFINE»

«DEFINE getGridColumns FOR Chronos::ChiNode»
application.«this.getFullPackageName()».«this.name».prototype.getGridColumns = function() {
	return [
	«IF this.getChiAttributes().size > 0»
		«FOREACH this.getChiAttributes() AS currValue SEPARATOR ", "»
			{
			    header : "«currValue.name»",
			    dataIndex : "«currValue.name»",
			    width : 100,
			    sortable : «this.is_searchable.boolString() == "true" ? "true" : "false"»,
			    editor: «EXPAND getGridEditor FOR currValue»
			}
		«ENDFOREACH»
	«ENDIF»
	];
};
«ENDDEFINE»

«DEFINE getGridEditor FOR Chronos::ChiValue»
	«LET this.input_type.split("#").first().getExtJsInputType() AS inputType»
		«IF this.is_editable.boolString() == "false" || inputType == "HtmlEditor"-»
			new cwe.modelgrid.DummyField()
		«ELSEIF inputType == "ComboBox"-»
			new cwe.editor.control.«getComboBoxClass(this.input_type)»({
				«getComboBoxConfig(this.input_type)»
			})
		«ELSE-»
			new cwe.editor.control.«inputType»({})
		«ENDIF-»
	«ENDLET»
«ENDDEFINE»

«DEFINE getEditorItems FOR Chronos::ChiNode»
application.«this.getFullPackageName()».«this.name».prototype.getEditorItems = function() {
	return [
	«IF this.getChiAttributes().size > 0»
		new cwe.editor.control.PropertiesFieldSet({
			items: [
		«FOREACH this.getChiAttributes() AS currValue SEPARATOR ", "»
			«EXPAND getEditor FOR currValue»
		«ENDFOREACH»
		]})
		
		«IF this.getNotAbstractParentNodes().size > 0 || this.getNotAbstractChildNodes().size > 0»
			,
		«ENDIF»
	«ENDIF»
	
	«IF this.getNotAbstractParentNodes().size > 0 || this.getNotAbstractChildNodes().size > 0»
		new cwe.editor.control.AssociationsFieldSet({
			items: [
		«FOREACH this.getNotAbstractParentNodes() AS currParent SEPARATOR ", "»
			«EXPAND association(true) FOR currParent»
		«ENDFOREACH»
		
		«IF this.getNotAbstractParentNodes().size > 0 && this.getNotAbstractChildNodes().size > 0»
			,
		«ENDIF»
		
		«FOREACH this.getNotAbstractChildNodes() AS currChild SEPARATOR ", "»
			«EXPAND association(false) FOR currChild»
		«ENDFOREACH»
		
		]})
	«ENDIF»
 ];
};
«ENDDEFINE»

«DEFINE getEditor FOR Chronos::ChiValue»
	«LET this.input_type.split("#").first().getExtJsInputType() AS inputType»
		«IF inputType == "ComboBox"-»
	new cwe.editor.control.«getComboBoxClass(this.input_type)»({
		«ELSE-»
	new cwe.editor.control.«inputType»({
 		«ENDIF-»
		fieldLabel: "«this.name»",
		name: "«this.name»",
		dataIndex: "«this.name»",
		«IF inputType == "ComboBox"»«getComboBoxConfig(this.input_type)»,«ENDIF»
		«IF this.is_editable.boolString() == "false"»
			«IF inputType == "ComboBox"»
				disabled: true,
			«ELSE»
				readOnly: true,
			«ENDIF»
		«ENDIF»
		toolTip: "«this.getComment().sanitizeJsString()»"
	}) 
	«ENDLET»
«ENDDEFINE»

«DEFINE association(Boolean isParent) FOR uml::Property»
	«IF this.getUpper() == 1»
		new cwe.editor.control.SingleAssociate( {
	«ELSE»
		new cwe.editor.control.MultipleAssociate( {
	«ENDIF»
		«LET isParent ? "parent" : "child" AS relationString»
			fieldLabel : "«relationString»«this.getRoleName()»",
			name : "«relationString»«this.getRoleName()»",
			dataIndex : "«relationString»«this.getRoleName()»",
			targetCweModelElementId : "«this.type.name»",
			isParent : «isParent ? "true" : "false"»
		«ENDLET»
	})
«ENDDEFINE»

«DEFINE getLabel FOR Chronos::ChiNode»
/**
 * Returns the label of an object of this Model Class.
 * 
 * @param {cwe.model.ModelRecord}
 *            record The record of this Model Class to extract the label from.
 * @return The label of an object of this Model Class.
 * @type String
 */
application.«this.getFullPackageName()».«this.name».prototype.getLabel = function(record) {
	return record.get("«this.display_value»");
};
«ENDDEFINE»
