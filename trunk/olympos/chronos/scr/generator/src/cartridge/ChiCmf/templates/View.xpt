«IMPORT uml»
«IMPORT Chronos»

«EXTENSION common::util»
«EXTENSION common::umlutils»

«EXTENSION cartridge::ChiCmf::extensions::globals»
«EXTENSION cartridge::ChiCmf::extensions::naming»
«EXTENSION cartridge::ChiCmf::extensions::umlutils»
«EXTENSION cartridge::ChiCmf::extensions::util»

«EXTENSION cartridge::ChiCmf::extensions::ChiNode»
«EXTENSION cartridge::ChiCmf::extensions::ChiView»

«REM» This template expands the view files -----------------------«ENDREM»
«DEFINE file FOR ChiView-»
	«FILE this.getFullPackageName().asPath()+"/"+name.asTemplateFile()-»
<!--
  This file was generated by ChronosGenerator «GeneratorVersion()» from «ModelFile()» on «Date()». 
  Manual modifications should be placed inside the protected regions.
-->
«PROTECT CSTART "<!-- " CEND " -->" ID this.getFullPackageName().asPath()+"/"+name.asTemplateFile()+"/Body"»
«IF this.getChiNodes().size == 1-»
	«FOREACH this.getChiNodes() AS curNode-»
{include file="lib:application/views/include/docheader.tpl"}
<head>
{include file="lib:application/views/include/header.tpl"}
<script>
  function init()
  {ldelim}
    Ext.QuickTips.init();
{if $viewMode == 'detail'}
    var grids = [];
    var columDefs = [];
    var buttonDefs = [];
    
    // parents
«FOREACH curNode.getParentNodesRecursive() AS curParent-»
	«IF !((ChiNode)curParent.type).isAbstract-»
    // «curParent.getRoleName()»
    {assign var="template" value=$possibleparents.«curParent.getRoleName()»}
    {assign var="parent" value=$template->getProperty('assignedParent')}
    {if $parent}
      {assign var="parentid" value=$parent->getDBID()}
    {else}
      {assign var="parentid" value=''}
    {/if}
    {if $template->hasValue('sortkey')}{assign var="ddRows" value="true"}{else}{assign var="ddRows" value="false"}{/if}
    
    grids['«curParent.getRoleName()»Parent'] = new wcmf.grid.Grid();
    // column definitions
    var curColumnDefs = [];
    {count_items varname="numColumns" array=$template->getDisplayValues(true)}
    {math equation="361/x" x=$numColumns assign="columnWidth" format="%d"}
    {foreach key=name item=value from=$template->getDisplayValues(true)}
    curColumnDefs.push({ldelim}id:"{$name}", dataIndex:"{$name}", header:"{$name}", width:{$columnWidth}, sortable:true, renderer:grids['«curParent.getRoleName()»Parent'].renderColumnDefault.createDelegate(grids['«curParent.getRoleName()»Parent']){rdelim});
    {/foreach}
    columDefs['«curParent.getRoleName()»Parent'] = curColumnDefs;
    // button definitions
    var curButtonDefs = [];
    {if $template->getProperty('canAssociate') == true}
      var dlg«curParent.getRoleName()»Parent = new AssociateDialog();
      curButtonDefs.push({ldelim}icon:'images/link.png', cls:'x-btn-icon', tooltip:{ldelim}text:'{translate text="Associate selected"}'{rdelim}, handler:function(){ldelim}dlg«curParent.getRoleName()»Parent.show('«curParent.getRoleName()»', grids['«curParent.getRoleName()»Parent'], '{$node->getOID()}', 'parent', true);{rdelim}{rdelim});
    {/if}
    buttonDefs['«curParent.getRoleName()»Parent'] = curButtonDefs;
    // grid initialization
    grids['«curParent.getRoleName()»Parent'].init('{$template->getObjectDisplayName()}', '«curParent.getRoleName()»', "{$obfuscator->obfuscate($nodeUtil->getParentQuery('«curParent.getRoleName()»', $node))}", columDefs['«curParent.getRoleName()»Parent'], {ldelim}paging:false, autoheight:true, singleSelect:true, ddRows:{$ddRows}{rdelim}, [new wcmf.grid.EditAction(){if $template->getProperty('composition') == false}, new wcmf.grid.DeleteAction(){/if}], buttonDefs['«curParent.getRoleName()»Parent']);
    grids['«curParent.getRoleName()»Parent'].getGridImpl().applyToMarkup('«curParent.getRoleName()»ParentGrid');
    grids['«curParent.getRoleName()»Parent'].load();
	«ENDIF-»
«ENDFOREACH-»

    // children
«FOREACH curNode.getChildNodesRecursive() AS curChild-»
	«IF !((ChiNode)curChild.type).isAbstract-»
    // «curChild.getRoleName()»
    {assign var="template" value=$possiblechildren.«curChild.getRoleName()»}
    {assign var="realSubject" value=$template}
    {if $template->getProperty('realSubject')}
      {assign var="realSubject" value=$template->getProperty('realSubject')}
    {/if}
    {if $template->hasValue('sortkey')}{assign var="ddRows" value="true"}{else}{assign var="ddRows" value="false"}{/if}

    grids['«curChild.getRoleName()»Child'] = new wcmf.grid.Grid();
    // column definitions
    var curColumnDefs = [];
    {count_items varname="numColumns" array=$realSubject->getDisplayValues(true)}
    {math equation="361/x" x=$numColumns assign="columnWidth" format="%d"}
    {foreach key=name item=value from=$realSubject->getDisplayValues(true)}
    curColumnDefs.push({ldelim}id:"{$name}", dataIndex:"{$name}", header:"{$name}", width:{$columnWidth}, sortable:true, renderer:grids['«curChild.getRoleName()»Child'].renderColumnDefault.createDelegate(grids['«curChild.getRoleName()»Child']){rdelim});
    {/foreach}
    columDefs['«curChild.getRoleName()»Child'] = curColumnDefs;
    // button definitions
    var curButtonDefs = [];
    {if $template->getProperty('canCreate')}
      {assign var="poid" value=$node->getOID()}
      {if $template->getProperty('composition') || $template->getProperty('aggregation')}
      curButtonDefs.push({ldelim}icon:'images/new.png', cls:'x-btn-icon', tooltip:{ldelim}text:'{translate text="Create new %1%" r1=$nodeUtil->getDisplayNameFromType($realSubject->getType())}'{rdelim}, 
        handler:function(){ldelim}doSetParent('{$poid}'); doNew('{$realSubject->getType()}'); setContext('{$realSubject->getType()}'); submitAction('new');{rdelim}{rdelim});
      {/if}
      {if !$template->getProperty('composition')}
      var dlg«curChild.getRoleName()»Child = new AssociateDialog();
      curButtonDefs.push({ldelim}icon:'images/link.png', cls:'x-btn-icon', tooltip:{ldelim}text:'{translate text="Associate selected"}'{rdelim}, 
        handler:function(){ldelim}dlg«curChild.getRoleName()»Child.show('{$realSubject->getType()}', grids['«curChild.getRoleName()»Child'], '{$poid}', 'child', false);{rdelim}{rdelim});
      {/if}
    {/if}
    buttonDefs['«curChild.getRoleName()»Child'] = curButtonDefs;
    // grid initialization
    grids['«curChild.getRoleName()»Child'].init('{$realSubject->getObjectDisplayName()}', '«curChild.getRoleName()»', '{$obfuscator->obfuscate($nodeUtil->getChildQuery($node, '«curChild.getRoleName()»'))}', columDefs['«curChild.getRoleName()»Child'], {ldelim}paging:true, autoheight:true, singleSelect:true, ddRows:{$ddRows}{rdelim}, [new wcmf.grid.EditAction(), {if $template->getProperty('canCreate')}new wcmf.grid.DuplicateAction(), {/if}new wcmf.grid.DeleteAction()], buttonDefs['«curChild.getRoleName()»Child'], {ldelim}poid:'{$node->getOID()}'{rdelim});
    grids['«curChild.getRoleName()»Child'].getGridImpl().applyToMarkup('«curChild.getRoleName()»ChildGrid');
    grids['«curChild.getRoleName()»Child'].load();
	«ENDIF-»
«ENDFOREACH-»
{else}
  {if $rootTemplateNode}
    {if $rootTemplateNode->hasValue('sortkey')}{assign var="ddRows" value="true"}{else}{assign var="ddRows" value="false"}{/if}

    var grid = new wcmf.grid.Grid();
    // column definitions
    var columDefs = [];
    {count_items varname="numColumns" array=$rootTemplateNode->getDisplayValues(true)}
    {math equation="575/x" x=$numColumns assign="columnWidth" format="%d"}
    {foreach key=name item=value from=$rootTemplateNode->getDisplayValues(true)}
    columDefs.push({ldelim}id:"{$name}", dataIndex:"{$name}", header:"{$name}", width:{$columnWidth}, sortable:true, renderer:grid.renderColumnDefault.createDelegate(grid){rdelim});
    {/foreach}
    // button definitions
    var buttonDefs = [];
    buttonDefs.push({ldelim}icon:'images/new.png', cls:'x-btn-icon', tooltip:{ldelim}text:'{translate text="Create new %1%" r1=$nodeUtil->getDisplayNameFromType($rootType)}'{rdelim}, handler:function(){ldelim}doSetParent('{$oid}'); doNew('{$rootType}'); submitAction('new');{rdelim}{rdelim});
    // grid initialization
    grid.init('{$nodeUtil->getDisplayNameFromType($rootType)}', '{$rootType}', '{$obfuscator->obfuscate($nodeUtil->getNodeQuery($rootType))}', columDefs, {ldelim}paging:true, autoheight:true, singleSelect:true, ddRows:{$ddRows}{rdelim}, [new wcmf.grid.EditAction(), new wcmf.grid.DuplicateAction(), new wcmf.grid.DeleteAction()], buttonDefs);
    grid.getGridImpl().applyToMarkup('{$rootType}Grid');
    grid.load();
  {/if}
{/if}
  {rdelim}
</script>
</head>
<body onload="init();">
<div id="page">
{include file="lib:application/views/include/formheader.tpl"}
{include file="lib:application/views/include/title.tpl"}

<div id="tabnav">
{include file="lib:application/views/include/root_type_tabs.tpl" rootType=$rootType}
</div>

{include file="lib:application/views/include/navigation.tpl"}
{include file="lib:application/views/include/error.tpl" displayMessageDialog="false"}

{if $lockMsg != ''}
<div class="hint">{translate text="some objects are locked"} (<a href="javascript:displayMsg();">details</a>)</div>
<div class="hint" id="msg">{$lockMsg}</div>
{/if}

{if $viewMode == 'detail'}

{*------------------------------- Detail View -------------------------------*}

<div id="leftcol">

{*------ Edit ------*}
<div class="contentblock">
	<h2 title="{translate text="object ID"}: {$oid|default:"-"}">{$nodeUtil->getDisplayValue($node, true)}&nbsp;</h2>
	<span class="spacer"></span>
«FOREACH curNode.getChiValuesRecursive() AS curValue-»
	«IF curValue.app_data_type != "DATATYPE_IGNORE"-»
	<span class="dottedSeparator"></span>
	<span class="left" title="{$node->getValueDescription('«curValue.name»')}">{$node->getValueDisplayName('«curValue.name»')}</span>
	<span class="right">{$nodeUtil->getInputControl($node, '«curValue.name»')}</span>
	«ENDIF-»
«ENDFOREACH-»
«FOREACH curNode.getChiValueRefs() AS curReference-»
	<span class="dottedSeparator"></span>
	<span class="left" title="{$node->getValueDescription('«curReference.name»')}">{$node->getValueDisplayName('«curReference.name»')}</span>
	<span class="right">{$nodeUtil->getInputControl($node, '«curReference.name»')}</span>
«ENDFOREACH-»
	<span class="spacer"></span>
«FOREACH curNode.getParentNodesRecursive() AS curParent-»
  {assign var="template" value=$possibleparents.«curParent.getRoleName()»}
  {assign var="parent" value=$template->getProperty('assignedParent')}
  {if $parent}
    {assign var="parentoid" value=$parent->getOID()}
    {assign var="parenttype" value=$nodeUtil->getDisplayNameFromType($parent->getType())}
  {else}
    {assign var="parentoid" value=''}
    {translate text="Root" varname="parenttype"}
  {/if}
  {translate text="Create new '%1%' under '%2%'" r1=$nodeUtil->getDisplayNameFromType($node->getType()) r2=$parenttype varname="createText"}
  <span class="all"><a href="javascript:doSetParent('{$parentoid}'); doNew('{$node->getType()}'); setContext('{$node->getType()}'); submitAction('new');"><img src="images/new.png" 
    alt="{$createText}" title="{$createText}" border="0"> {$createText}</a></span>
«ENDFOREACH-»
«IF curNode.getParentNodesRecursive().size == 0-»
  {translate text="Create new %1%" r1=$nodeUtil->getDisplayNameFromType($node->getType()) varname="createText"}
  <span class="all"><a href="javascript:doSetParent(''); doNew('{$node->getType()}'); setContext('{$node->getType()}'); submitAction('new');"><img src="images/new.png" 
    alt="{$createText}" title="{$createText}" border="0"> {$createText}</a></span>
«ENDIF-»
</div>

</div>
<div id="rightcol">

{*------ Parents ------*}
«FOREACH curNode.getParentNodesRecursive() AS curParent-»
	«IF !((ChiNode)curParent.type).isAbstract-»
<!-- «curParent.getRoleName()» -->
<div class="contentblock">
  <div id="«curParent.getRoleName()»ParentGrid" style="border:1px solid #99bbe8;overflow: hidden; width: 445px;"></div>
</div>
	«ENDIF-»
«ENDFOREACH-»

{*------ Children grouped by type ------*}
«FOREACH curNode.getChildNodesRecursive() AS curChild-»
	«IF !((ChiNode)curChild.type).isAbstract-»
<!-- «curChild.getRoleName()» -->
<div class="contentblock">
  <div id="«curChild.getRoleName()»ChildGrid" style="border:1px solid #99bbe8;overflow: hidden; width: 445px;"></div>
</div>
	«ENDIF-»
«ENDFOREACH-»

</div>

{else}
{*------------------------------- Overview -------------------------------*}

<div class="contentblock">
  <div id="{$rootType}Grid" style="border:1px solid #99bbe8;overflow: hidden; width: 665px;"></div>
</div>

{/if}

{include file="lib:application/views/include/footer.tpl"}
«ENDFOREACH-»
«ELSE-»
«this.name.asTemplateFile()-»
«ENDIF»
«ENDPROTECT»
«ENDFILE-»
«ENDDEFINE»
