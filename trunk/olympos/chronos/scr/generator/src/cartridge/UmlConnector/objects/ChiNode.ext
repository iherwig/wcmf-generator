import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::umlutils;
extension common::util;

extension cartridge::UmlConnector::connections;
extension cartridge::UmlConnector::connectionsToCwm;

extension cartridge::UmlConnector::objects::Operation;
extension cartridge::UmlConnector::objects::ChiValue;

uml::Class convert(cwm::ChiNode n):
	//(new uml::Class).owned
	let uc = new uml::Class : {
		uc.setName("ChiNode:" + n.id) ->
		uc.ownedOperation.addAll(n.operation.convert()) ->
		uc.ownedAttribute.addAll(n.chiValue.convert())
	} ->
	uc
;

Void establishConnections(cwm::ChiNode b, uml::Model um):
	let uc = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == "ChiNode:" + b.id).first(): (
		b.child.select(e|e.targetType == "ChiView").establishConnectionsToClass(uc, um, "contains", uml::AggregationKind::composite, uml::AggregationKind::none, false, false) ->
		b.manyToMany.select(e|e.targetType == "ChiNode" && e.relationType == "generalization").establishGeneralizationToClass(uc, um) ->
		b.manyToMany.select(e|e.targetType == "ChiNode" && e.relationType == "aggregation").establishConnectionsToClass(uc, um, null, uml::AggregationKind::shared, uml::AggregationKind::none) ->
		b.manyToMany.select(e|e.targetType == "ChiNode" && e.relationType == "composition").establishConnectionsToClass(uc, um, null, uml::AggregationKind::composite, uml::AggregationKind::none) ->
		b.manyToMany.select(e|e.targetType == "ChiNode" && e.relationType == "association").establishConnectionsToClass(uc, um, null, uml::AggregationKind::none, uml::AggregationKind::none) ->
		b.child.select(e|e.targetType == "ChiObject").establishConnectionsToClass(uc, um)
	)
;

Void transferValues(cwm::ChiNode c, uml::Model um):
	//(new uml::LiteralBoolean).setVa
	let uc = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == "ChiNode:" + c.id).first(): (
		let comment = new uml::Comment : (
			c.chiValue.transferValues(um) ->
			c.operation.transferValues(um) ->
	
			uc.applyStereotype("Chronos::ChiNode") ->
			uc.setTaggedValue("Chronos::ChiNode", "table_name", c.tableName) ->
			uc.setTaggedValue("Chronos::ChiNode", "pk_name", c.pkName) ->
			uc.setTaggedValue("Chronos::ChiNode", "orderby", c.orderby) ->
			uc.setTaggedValue("Chronos::ChiNode", "parent_order", c.parentOrder) ->
			uc.setTaggedValue("Chronos::ChiNode", "child_order", c.childOrder) ->
			uc.setTaggedValue("Chronos::ChiNode", "display_value", c.displayValue) ->
			//uc.setTaggedValue("Chronos::ChiNode", "is_ordered", c.isOrdered == "true") ->
			//uc.setTaggedValue("Chronos::ChiNode", "is_soap", c.isSoap == "true") ->
			//uc.setTaggedValue("Chronos::ChiNode", "is_searchable", c.isSearchable == "true") ->
			uc.setTaggedValue("Chronos::ChiNode", "initparams", c.initparams) ->
			uc.setTaggedValue("Chronos::ChiNode", "Author", c.author) ->
			uc.setTaggedValue("Chronos::ChiNode", "Status", c.status) ->
			uc.setTaggedValue("Chronos::ChiNode", "Alias", c.alias) ->
			uc.setTaggedValue("Chronos::ChiNode", "Version", c.version) ->
			uc.setName(c.name) ->
			c.notes != null ? (
				comment.setBody(c.notes) ->
				comment.annotatedElement.add(uc) ->
				uc.ownedComment.add(comment)
			) : Void ->
			uc.setTaggedValue("Chronos::ChiNode", "created", c.created) ->
			uc.setTaggedValue("Chronos::ChiNode", "creator", c.creator) ->
			uc.setTaggedValue("Chronos::ChiNode", "last_editor", c.lastEditor) ->
			uc.setTaggedValue("Chronos::ChiNode", "modified", c.modified)
		)
	)
;

Void propagateNames(uml::Class this):
	this.getOwnEnds().correctName()
;

Void correctName(uml::Property this):
	this.name.isNullOrEmpty() ? (
		this.setName(this.type.name.toFirstLower())
	) :
		Void
;

cwm::ChiNode convertToCwm(Chronos::ChiNode c) :
	let un = new cwm::ChiNode : (
		un.chiValue.addAll(c.ownedAttribute.typeSelect(Chronos::ChiValue).convertToCwm()) ->
		un.operation.addAll(c.ownedOperation.convertToCwm()) ->
	
		un.setId(c.getId()) ->
		un.setTableName(c.getTaggedValue("Chronos::ChiNode", "table_name").toString()) ->
		un.setPkName(c.getTaggedValue("Chronos::ChiNode", "pk_name").toString()) ->
		un.setOrderby(c.getTaggedValue("Chronos::ChiNode", "orderby").toString()) ->
		un.setParentOrder(c.getTaggedValue("Chronos::ChiNode", "parent_order").toString()) ->
		un.setChildOrder(c.getTaggedValue("Chronos::ChiNode", "child_order").toString()) ->
		un.setDisplayValue(c.getTaggedValue("Chronos::ChiNode", "display_value").toString()) ->
		//un.setIsOrdered(c.getValue(c.getAppliedStereotype("Chronos::ChiNode"), "is_ordered")) ->
		//un.setIsSoap(c.getValue(c.getAppliedStereotype("Chronos::ChiNode"), "is_soap")) ->
		//un.setIsSearchable(c.getValue(c.getAppliedStereotype("Chronos::ChiNode"), "is_searchable")) ->
		un.setInitparams(c.getTaggedValue("Chronos::ChiNode", "initparams").toString()) ->
		un.setAuthor(c.getTaggedValue("Chronos::ChiNode", "Author").toString()) ->
		un.setStatus(c.getTaggedValue("Chronos::ChiNode", "Status").toString()) ->
		un.setAlias(c.getTaggedValue("Chronos::ChiNode", "Alias").toString()) ->
		un.setVersion(c.getTaggedValue("Chronos::ChiNode", "Version").toString()) ->
		un.setName(c.name) ->
		un.setNotes(c.getComment()) ->
		un.setCreated(c.getTaggedValue("Chronos::ChiNode", "created").toString()) ->
		un.setCreator(c.getTaggedValue("Chronos::ChiNode", "creator").toString()) ->
		un.setLastEditor(c.getTaggedValue("Chronos::ChiNode", "last_editor").toString()) ->
		un.setModified(c.getTaggedValue("Chronos::ChiNode", "modified").toString()) ->

		un.child.addAll(c.getAssociations().memberEnd.select(e|e.type != c).type.typeSelect(Chronos::ChiView).convertToChild())
		//Commented out until wCMF remodeling of relations
		//Prevents import from finishing
		//un.manyToMany.addAll(((List[uml::Class]) c.getGenerals()).convertToMany("generalization")) ->
		//un.manyToMany.addAll(c.getAssociations().select(e|e.ownedEnd.get(0).type == c).convertToMany(c))
	) ->
	un
;
