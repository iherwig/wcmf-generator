import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::umlutils;

extension cartridge::UmlConnector::connections;
extension cartridge::UmlConnector::connectionsToCwm;

uml::Actor convert(cwm::ChiBusinessPartnerPassive b):
	let uc = new uml::Actor : {
		uc.setName("ChiBusinessPartnerPassive:" + b.id)
	} ->
	uc
;

Void establishConnections(cwm::ChiBusinessPartnerPassive b, uml::Model um):
	let uc = um.allOwnedElements().typeSelect(uml::Actor).select(e|e.name == "ChiBusinessPartnerPassive:" + b.id).first(): (
		b.manyToMany.select(e|e.targetType == "ChiBusinessUseCase").establishConnectionsToUseCase(uc, um, "participates in", uml::AggregationKind::none, uml::AggregationKind::none, true, false) ->
		b.manyToMany.select(e|e.targetType == "ChiBusinessUseCaseCore").establishConnectionsToUseCase(uc, um, "participates in", uml::AggregationKind::none, uml::AggregationKind::none, true, false) ->
		b.child.select(e|e.targetType == "ChiBusinessPartnerPassive").establishGeneralizationToActor(uc, um)
	)
;

Void transferValues(cwm::ChiBusinessPartnerPassive c, uml::Model um):
	//(new uml::Class).setT
	let uc = um.allOwnedElements().typeSelect(uml::Actor).select(e|e.name == "ChiBusinessPartnerPassive:" + c.id).first(): (
		let comment = new uml::Comment : (
			uc.applyStereotype("Chronos::ChiBusinessPartnerPassive") ->
			uc.setTaggedValue("Chronos::ChiBusinessPartnerPassive", "Author", c.author) ->
			uc.setTaggedValue("Chronos::ChiBusinessPartnerPassive", "Status", c.status) ->
			uc.setTaggedValue("Chronos::ChiBusinessPartnerPassive", "Alias", c.alias) ->
			uc.setTaggedValue("Chronos::ChiBusinessPartnerPassive", "Version", c.version) ->
			uc.setName(c.name) ->
			c.notes != null ? (
				comment.setBody(c.notes) ->
				comment.annotatedElement.add(uc) ->
				uc.ownedComment.add(comment)
			) : Void ->
			uc.setTaggedValue("Chronos::ChiBusinessPartnerPassive", "created", c.created) ->
			uc.setTaggedValue("Chronos::ChiBusinessPartnerPassive", "creator", c.creator) ->
			uc.setTaggedValue("Chronos::ChiBusinessPartnerPassive", "last_editor", c.lastEditor) ->
			uc.setTaggedValue("Chronos::ChiBusinessPartnerPassive", "modified", c.modified)
		)
	)
;

cwm::ChiBusinessPartnerPassive convertToCwm(Chronos::ChiBusinessPartnerPassive c) :
	let un = new cwm::ChiBusinessPartnerPassive : (
		un.setId(c.getId()) ->
		un.setAuthor(c.getTaggedValue("Chronos::ChiBusinessPartnerPassive", "Author").toString()) ->
		un.setStatus(c.getTaggedValue("Chronos::ChiBusinessPartnerPassive", "Status").toString()) ->
		un.setAlias(c.getTaggedValue("Chronos::ChiBusinessPartnerPassive", "Alias").toString()) ->
		un.setVersion(c.getTaggedValue("Chronos::ChiBusinessPartnerPassive", "Version").toString()) ->
		un.setName(c.name) ->
		un.setNotes(c.getComment()) ->
		un.setCreated(c.getTaggedValue("Chronos::ChiBusinessPartnerPassive", "created").toString()) ->
		un.setCreator(c.getTaggedValue("Chronos::ChiBusinessPartnerPassive", "creator").toString()) ->
		un.setLastEditor(c.getTaggedValue("Chronos::ChiBusinessPartnerPassive", "last_editor").toString()) ->
		un.setModified(c.getTaggedValue("Chronos::ChiBusinessPartnerPassive", "modified").toString())-> 

		un.manyToMany.addAll(c.getAssociations().memberEnd.select(e|e.type != c).type.typeSelect(Chronos::ChiBusinessUseCase).convertToMany()) ->
		un.child.addAll(c.getGenerals().convertToChild())
	) ->
	un
;
