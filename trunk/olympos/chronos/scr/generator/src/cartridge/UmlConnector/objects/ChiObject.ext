import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::util;
extension common::umlutils;

extension cartridge::UmlConnector::connections;
extension cartridge::UmlConnector::connectionsToCwm;

//A cwm::ChiObject is converted to a uml::DataStoreNode
uml::OpaqueAction convert(cwm::ChiObject a):
	//(new uml::OpaqueAction
	let uc = new uml::DataStoreNode : {
		uc.setName("ChiObject:" + a.id)
	} ->
	uc
;

Void establishConnections(cwm::ChiObject b, uml::Model um):
	let uc = um.allOwnedElements().typeSelect(uml::DataStoreNode).select(e|e.name == "ChiObject:" + b.id).first(): (
		Void
	)
;

Void transferValues(cwm::ChiObject c, uml::Model um):
	//(new uml::DataStoreNode).inS
	let uc = um.allOwnedElements().typeSelect(uml::DataStoreNode).select(e|e.name == "ChiObject:" + c.id).first(): (
		let comment = new uml::Comment : (
			uc.setName(c.name) ->
			c.notes != null ? (
				comment.setBody(c.notes) ->
				comment.annotatedElement.add(uc) ->
				uc.ownedComment.add(comment)
			) : Void
/*
			!c.objectStatus.isNullOrEmpty() ? (
				um.allOwnedElements().typeSelect(uml::State).selectFirst(e|e.name == c.objectStatus) != null ? (
					uc.inState.add(um.allOwnedElements().typeSelect(uml::State).selectFirst(e|e.name == c.objectStatus))
				) : (
					uc.inState.add((new uml::State).setName(c.objectStatus))
				)
			) : (
				Void
			)
*/
	/*
			uc.applyStereotype("Chronos::Activity") ->
			uc.setTaggedValue("Chronos::Activity", "Status", c.status) ->
			uc.setTaggedValue("Chronos::Activity", "Author", c.author) ->
			uc.setTaggedValue("Chronos::Activity", "Alias", c.alias) ->
			uc.setTaggedValue("Chronos::Activity", "Version", c.version) ->
	
			uc.setTaggedValue("Chronos::Activity", "created", c.created) ->
			uc.setTaggedValue("Chronos::Activity", "creator", c.creator) ->
			uc.setTaggedValue("Chronos::Activity", "last_editor", c.lastEditor) ->
			uc.setTaggedValue("Chronos::Activity", "modified", c.modified)
	*/
		)
	)
;

cwm::Activity convertToCwm(uml::DataStoreNode c) :
	//(new uml::OpaqueAction).
	let un = new cwm::ChiObject : (
		un.setId(c.getId()) ->
		un.setName(c.name) ->
		un.setNotes(c.getComment())
		
		//un.setObjectState(c.inState.first().name)
/*
		un.setAuthor(c.getTaggedValue("Chronos::Activity", "Author").toString()) ->
		un.setStatus(c.getTaggedValue("Chronos::Activity", "Status").toString()) ->
		un.setAlias(c.getTaggedValue("Chronos::Activity", "Alias").toString()) ->
		un.setVersion(c.getTaggedValue("Chronos::Activity", "Version").toString()) ->

		un.setCreated(c.getTaggedValue("Chronos::Activity", "created").toString()) ->
		un.setCreator(c.getTaggedValue("Chronos::Activity", "creator").toString()) ->
		un.setLastEditor(c.getTaggedValue("Chronos::Activity", "last_editor").toString()) ->
		un.setModified(c.getTaggedValue("Chronos::Activity", "modified").toString())
*/
	) ->
	un
;
