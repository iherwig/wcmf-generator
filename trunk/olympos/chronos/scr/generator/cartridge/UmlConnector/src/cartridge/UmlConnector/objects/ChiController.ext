import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::umlutils;

extension cartridge::UmlConnector::connections;
extension cartridge::UmlConnector::connectionsToCwm;

extension cartridge::UmlConnector::objects::Operation;
extension cartridge::UmlConnector::objects::ChiActionKey;

uml::Class convert(cwm::ChiController c):
	let uc = new uml::Class : {
		uc.setName("ChiController:" + c.id) ->
		uc.ownedOperation.addAll(c.operation.convert())
	} ->
	uc
;

Void establishConnections(cwm::ChiController b, uml::Model um):
	let uc = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == "ChiController:" + b.id).first(): (
		b.manyToMany.select(e|e.targetType == "ChiController" && e.relationType == "generalization").establishGeneralizationToClass(uc, um) ->
		b.manyToMany.select(e|e.targetType == "ChiController" && e.relationType == "association").establishActionKey(uc, um, false) ->
		b.manyToMany.select(e|e.targetType == "ChiView" && e.relationType == "association").establishActionKey(uc, um, true) ->
		b.child.select(e|e.targetType == "ChiNode").establishConnectionsToClass(uc, um, "instantiates", uml::AggregationKind::none, uml::AggregationKind::none, true, false) 
		
//		b.nmChiControllerActionKeyChiController.addAllActionKeys(uc) ->
//		b.nmChiControllerActionKeyChiView.addAllActionKeys(uc)
		//Duplicate in connection list
		//r.manyToMany.select(e|e.targetType == "ChiController" && e.relationType == "Association").establishConnectionsToClass(uc, um, null, uml::AggregationKind::none, uml::AggregationKind::none, false, false)
	)
;

Void transferValues(cwm::ChiController c, uml::Model um):
	//(new uml::Class).setT
	let uc = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == "ChiController:" + c.id).first(): (
		let comment = new uml::Comment : (
			c.operation.transferValues(um) ->

			uc.applyStereotype("Chronos::ChiController") ->
			uc.setTaggedValue("Chronos::ChiController", "Author", c.author) ->
			uc.setTaggedValue("Chronos::ChiController", "Status", c.status) ->
			uc.setTaggedValue("Chronos::ChiController", "Alias", c.alias) ->
			uc.setTaggedValue("Chronos::ChiController", "Version", c.version) ->
			uc.setName(c.name) ->
			c.notes != null ? (
				comment.setBody(c.notes) ->
				comment.annotatedElement.add(uc) ->
				uc.ownedComment.add(comment)
			) : Void ->
			uc.setTaggedValue("Chronos::ChiController", "created", c.created) ->
			uc.setTaggedValue("Chronos::ChiController", "creator", c.creator) ->
			uc.setTaggedValue("Chronos::ChiController", "last_editor", c.lastEditor) ->
			uc.setTaggedValue("Chronos::ChiController", "modified", c.modified)
		)
	)
;

cwm::ChiController convertToCwm(Chronos::ChiController c) :
	let un = new cwm::ChiController : (
		un.operation.addAll(c.ownedOperation.convertToCwm()) ->

		un.setId(c.getId()) ->
		un.setAuthor(c.getTaggedValue("Chronos::ChiController", "Author").toString()) ->
		un.setStatus(c.getTaggedValue("Chronos::ChiController", "Status").toString()) ->
		un.setAlias(c.getTaggedValue("Chronos::ChiController", "Alias").toString()) ->
		un.setVersion(c.getTaggedValue("Chronos::ChiController", "Version").toString()) ->
		un.setName(c.name) ->
		un.setNotes(c.getComment()) ->
		un.setCreated(c.getTaggedValue("Chronos::ChiController", "created").toString()) ->
		un.setCreator(c.getTaggedValue("Chronos::ChiController", "creator").toString()) ->
		un.setLastEditor(c.getTaggedValue("Chronos::ChiController", "last_editor").toString()) ->
		un.setModified(c.getTaggedValue("Chronos::ChiController", "modified").toString()) ->

		un.manyToMany.addAll(((List[uml::Class]) c.getGenerals()).convertToMany("Generalization"))
	) ->
	un
;
