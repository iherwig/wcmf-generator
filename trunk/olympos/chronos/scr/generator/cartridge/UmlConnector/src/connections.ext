import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::util;
extension common::umlutils;

Void establishConnectionsToUseCase(cwm::ManyToMany ch, uml::Actor parentActor, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new cwm::ManyToMany).name
	let childUseCase = um.allOwnedElements().typeSelect(uml::UseCase).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childUseCase != null
		? (
			let conn = parentActor.createAssociation(parentNav, parentAK, "", 1, 1, childUseCase, childNav, childAK, "", 1, 1):
				conn.setName(ch.name)
		) : (
			Void
		)
	)
;

Void establishConnectionsToActor(cwm::Child ch, uml::UseCase parentUseCase, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let childActor = um.allOwnedElements().typeSelect(uml::Actor).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childActor != null
		? (
			let conn = parentUseCase.createAssociation(parentNav, parentAK, "", 1, 1, childActor, childNav, childAK, "", 1, 1):
				conn.setName(label)
		) : (
			Void
		)
	)
;

Void establishConnectionsToClass(cwm::Child ch, uml::Class parentClass, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let conn = parentClass.createAssociation(parentNav, parentAK, "", 1, 1, childClass, childNav, childAK, "", 1, 1):
				conn.setName(label)
		) : (
			Void
		)
	)
;

Void establishConnectionsToClass(cwm::ManyToMany ch, uml::Class parentClass, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK) :
	//(new cwm::ManyToMany).sou
	//(new uml::Association).navigableOwnedEnd
	//(new uml::Property).n
	//(new uml::Class).isM
	let childClass = um.allOwnedElements().typeSelect(uml::Class).selectFirst(e|e.name == ch.targetType + ":" + ch.targetOid): (
		childClass != null
		? (
			let parentLower = getLowerMultiplicity(ch.sourceMultiplicity):
			let parentUpper = getUpperMultiplicity(ch.sourceMultiplicity):
			let parentNav = getNavigability(ch.sourceNavigability):
			let childLower = getLowerMultiplicity(ch.targetMultiplicity):
			let childUpper = getUpperMultiplicity(ch.targetMultiplicity):
			let childNav = getNavigability(ch.targetNavigability):

			let isManyToMany = childClass.name.split(":").first() == "ChiNodeManyToMany":
			let realParentLower = isManyToMany ? childLower : childLower:
			let realParentUpper = isManyToMany ? childUpper : childUpper:
			let realChildLower = isManyToMany ? parentLower : parentLower:
			let realChildUpper = isManyToMany ? parentUpper : parentUpper:
			let realParentAK = isManyToMany ? parentAK : parentAK:
			let realChildAK = isManyToMany ? childAK : childAK:
			let realParentNav = isManyToMany ? parentNav : parentNav:
			let realChildNav = isManyToMany ? childNav : childNav:

			let conn = parentClass.createAssociation(realParentNav, realParentAK, "", realParentLower, realParentUpper, childClass, realChildNav, realChildAK, "", realChildLower, realChildUpper):
				conn.applyStereotype("Chronos::ChiAssociation") ->
				conn.setName(ch.name)
		) : (
			Void
		)
	)
;

Integer getLowerMultiplicity(String multiplicity):
	JAVA net.sourceforge.olympos.oaw.extend.Multiplicity.getLower(java.lang.String)
;

Integer getUpperMultiplicity(String multiplicity):
	JAVA net.sourceforge.olympos.oaw.extend.Multiplicity.getUpper(java.lang.String)
;

Boolean getNavigability(String navigability):
	navigability.trim().toLowerCase() == "true" || navigability.trim().toLowerCase() == "navigable" ? true : false
;

Void establishConnectionsToClass(cwm::Child ch, uml::Class parentClass, uml::Model um):
	//(new uml::DataStoreNode).settt
	let childClass = um.allOwnedElements().typeSelect(uml::DataStoreNode).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			childClass.setType(parentClass)
		) : (
			Void
		)
	)
;
Void establishConnectionsToClass(cwm::Child ch, uml::Class parentClass, uml::Model um):
	//(new uml::DataStoreNode).settt
	let childClass = um.allOwnedElements().typeSelect(uml::DataStoreNode).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			childClass.setType(parentClass)
		) : (
			Void
		)
	)
;

Void establishConnectionsToClass(cwm::ManyToMany ch, uml::Class parentClass, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let conn = parentClass.createAssociation(parentNav, parentAK, "", 1, 1, childClass, childNav, childAK, "", 1, 1):
				conn.setName(ch.name)
		) : (
			Void
		)
	)
;

Void establishDependencyFromClass(cwm::Child ch, uml::Class parentClass, uml::Model um, String label) :
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let conn = childClass.createDependency(parentClass):
				conn.setName(label)
		) : (
			Void
		)
	)
;

Void establishRealizationToClass(cwm::ManyToMany mtm, uml::Class parentClass, uml::Model um, String label) :
	//(new uml::Generalization).t
	//(new uml::Class).gener
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == mtm.targetType + ":" + mtm.targetOid).first(): (
		childClass != null
		? {
			let rel = new uml::Realization : (
				rel.supplier.add(parentClass) ->
				rel.client.add(childClass) ->
				rel.setName(mtm.name)
			) ->
			parentClass.getNearestPackage().packagedElement.add(rel)
			//parentClass.general.add(childClass)
		} : {
			Void
		}
	)
;

Void establishRealizationToUseCase(cwm::Child ch, uml::Class parentClass, uml::Model um, String label) :
	//(new uml::Class).parents().add()
	let childUseCase = um.allOwnedElements().typeSelect(uml::UseCase).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childUseCase != null
		? {
			let rel = new uml::Realization : (
				rel.supplier.add(parentClass) ->
				rel.client.add(childUseCase) ->
				rel.setName(label)
			) ->
			parentClass.getNearestPackage().packagedElement.add(rel)
		} : {
			Void
		}
	)
;

Void establishConnectionsToOpaqueAction(cwm::ManyToMany ch, uml::AcceptEventAction parent, uml::Model um, String label) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::OpaqueAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (

			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(ch.name)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToOpaqueAction(cwm::ManyToMany ch, uml::InitialNode parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::OpaqueAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (

			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(ch.name)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToActivityFinalNode(cwm::ManyToMany ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::ActivityFinalNode).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(ch.name)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToOpaqueAction(cwm::ManyToMany ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::OpaqueAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(ch.name)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToDataStore(cwm::ManyToMany ch, uml::OpaqueAction parent, uml::Model um, String label):
	let child = um.allOwnedElements().typeSelect(uml::DataStoreNode).selectFirst(e|e.name == ch.targetType + ":" + ch.targetOid):
	child != null
	? (
		let conn = new uml::ObjectFlow:
		conn.setSource(parent) ->
		conn.setTarget(child) ->
		conn.setName(ch.name) ->
		parent.activity.edge.add(conn)
	) : (
		Void
	)
;

Void establishConnectionsFromProductionRuleSet(cwm::Child ch, uml::Activity parent, uml::Model um, String label):
	let child = um.allOwnedElements().typeSelect(uml::ActivityNode).selectFirst(e|e.name == ch.targetType + ":" + ch.targetOid):
	child != null ? (
		let rel = new uml::Realization : (
			rel.supplier.add(parent) ->
			rel.client.add(child) ->
			rel.setName(label)
		) ->
		parent.getNearestPackage().packagedElement.add(rel)
	) : (
		Void
	)
;

Void establishConnectionsToDecisionNode(cwm::ManyToMany ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::DecisionNode).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(ch.name)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToSendSignalAction(cwm::ManyToMany ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::SendSignalAction).
	let child = um.allOwnedElements().typeSelect(uml::SendSignalAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(ch.name)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

/*
Void establishConnectionsToClass(cwm::Child ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::OpaqueAction).crsetN
	let child = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = parent.createAssociation(parentNav, parentAK, "", 1, 1, child, childNav, childAK, "", 1, 1):
				conn.setName(label)
		) : (
			Void
		)
	)
;
*/

Void establishConnectionsToAcceptEventAction(cwm::ManyToMany ch, uml::SendSignalAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::AcceptEventAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(ch.name)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToAcceptEventAction(cwm::ManyToMany ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::AcceptEventAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(ch.name)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToOpaqueAction(cwm::ManyToMany ch, uml::DecisionNode parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::DecisionNode).activity.
	let child = um.allOwnedElements().typeSelect(uml::OpaqueAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(ch.name)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToOpaqueAction(cwm::ManyToMany ch, uml::DataStoreNode parent, uml::Model um, String label) :
	let child = um.allOwnedElements().typeSelect(uml::OpaqueAction).selectFirst(e|e.name == ch.targetType + ":" + ch.targetOid): (
		child != null
		? (
			let conn = new uml::ObjectFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(ch.name)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishGeneralizationToActor(cwm::Child ch, uml::Actor parentActor, uml::Model um) :
	//(new uml::Generalization).set
	let childClass = um.allOwnedElements().typeSelect(uml::Actor).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let rel = new uml::Generalization : (
				rel.setSpecific(childClass) ->
				rel.setGeneral(parentActor)
			)
		) : (
			Void
		)
	)
;

Void establishGeneralizationToClass(cwm::ManyToMany ch, uml::Class parentClass, uml::Model um) :
	//(new uml::Generalization).set
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let rel = new uml::Generalization : (
				rel.setSpecific(parentClass) ->
				rel.setGeneral(childClass)
			)
		) : (
			Void
		)
	)
;

Void establishGeneralizationFromUseCase(cwm::Child ch, uml::UseCase parentUseCase, uml::Model um) :
	//(new uml::Generalization).set
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let rel = new uml::Generalization : (
				rel.setSpecific(childClass) ->
				rel.setGeneral(parentUseCase)
			)
		) : (
			Void
		)
	)
;

Void propagateNames(uml::Class this):
	this.getOwnEnds().correctName()
;

Void correctName(uml::Property this):
//	this.name.isNullOrEmpty() ? (
//		this.setName(this.type.name.toFirstLower())
//	) :
		Void
;
