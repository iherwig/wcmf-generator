import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::umlutils;
extension common::util;

extension cartridge::UmlConnector::connections;
extension cartridge::UmlConnector::connectionsToCwm;

//A cwm::Activity is converted to a uml::OpaqueAction
uml::OpaqueAction convert(cwm::Activity a):
	//(new uml::OpaqueAction
	let uc = new uml::OpaqueAction : {
		uc.setName("Activity:" + a.id)
	} ->
	uc
;

Void establishConnections(cwm::Activity b, uml::Model um):
	let uc = um.allOwnedElements().typeSelect(uml::OpaqueAction).select(e|e.name == "Activity:" + b.id).first(): (
		b.manyToMany.select(e|e.targetRole == "ActivityFinal").establishConnectionsToActivityFinalNode(uc, um, null, uml::AggregationKind::none, uml::AggregationKind::none, false, true) ->
		b.manyToMany.select(e|e.targetRole == "AControlFlowTarget").establishConnectionsToOpaqueAction(uc, um, null, uml::AggregationKind::none, uml::AggregationKind::none, false, true) ->
		b.manyToMany.select(e|e.targetRole == "ADControlFlowTarget").establishConnectionsToDecisionNode(uc, um, null, uml::AggregationKind::none, uml::AggregationKind::none, false, true) ->
		b.manyToMany.select(e|e.targetRole == "ASControlFlowTarget").establishConnectionsToSendSignalAction(uc, um, null, uml::AggregationKind::none, uml::AggregationKind::none, false, true) ->

		//TODO: why was this implemented as ARControlFlowSource? 
		//b.manyToMany.select(e|e.targetRole == "ARControlFlowSource").establishConnectionsToAcceptEventAction(uc, um, null, uml::AggregationKind::none, uml::AggregationKind::none, false, true) ->
		b.manyToMany.select(e|e.targetRole == "ARControlFlowTarget").establishConnectionsToAcceptEventAction(uc, um, null, uml::AggregationKind::none, uml::AggregationKind::none, false, true) ->
		
		//TODO: add ChiObjectObjectFlowTarget again
		b.manyToMany.select(e|e.targetRole == "ChiObjectObjectFlowTarget").establishConnectionsToDataStore(uc, um, null)
	)
;

Void transferValues(cwm::Activity c, uml::Model um):
	//(new uml::Class).setT
	let uc = um.allOwnedElements().typeSelect(uml::OpaqueAction).select(e|e.name == "Activity:" + c.id).first(): (
		let comment = new uml::Comment : (
			uc.setName(c.name) ->
			c.notes != null ? (
				comment.setBody(c.notes) ->
				comment.annotatedElement.add(uc) ->
				uc.ownedComment.add(comment)
			) : Void
	/*
			uc.applyStereotype("Chronos::Activity") ->
			uc.setTaggedValue("Chronos::Activity", "Status", c.status) ->
			uc.setTaggedValue("Chronos::Activity", "Author", c.author) ->
			uc.setTaggedValue("Chronos::Activity", "Alias", c.alias) ->
			uc.setTaggedValue("Chronos::Activity", "Version", c.version) ->
	
			uc.setTaggedValue("Chronos::Activity", "created", c.created) ->
			uc.setTaggedValue("Chronos::Activity", "creator", c.creator) ->
			uc.setTaggedValue("Chronos::Activity", "last_editor", c.lastEditor) ->
			uc.setTaggedValue("Chronos::Activity", "modified", c.modified)
	*/
		)
	)
;

cwm::Activity convertToCwm(uml::OpaqueAction c) :
	//(new uml::OpaqueAction).
	let un = new cwm::Activity : (
		un.setId(c.getId()) ->
		un.setName(c.name) ->
		un.setNotes(c.getComment()) ->
/*
		un.setAuthor(c.getTaggedValue("Chronos::Activity", "Author").toString()) ->
		un.setStatus(c.getTaggedValue("Chronos::Activity", "Status").toString()) ->
		un.setAlias(c.getTaggedValue("Chronos::Activity", "Alias").toString()) ->
		un.setVersion(c.getTaggedValue("Chronos::Activity", "Version").toString()) ->

		un.setCreated(c.getTaggedValue("Chronos::Activity", "created").toString()) ->
		un.setCreator(c.getTaggedValue("Chronos::Activity", "creator").toString()) ->
		un.setLastEditor(c.getTaggedValue("Chronos::Activity", "last_editor").toString()) ->
		un.setModified(c.getTaggedValue("Chronos::Activity", "modified").toString())
*/
		//un.child.addAll(c.outgoing.target.typeSelect(uml::ActivityFinalNode).convertToChild()) ->
		un.manyToMany.addAll(c.outgoing.target.typeSelect(uml::ActivityFinalNode).convertToMany()) ->

		//un.child.addAll(c.outgoing.target.typeSelect(uml::OpaqueAction).convertToChild()) ->
		un.manyToMany.addAll(c.outgoing.target.typeSelect(uml::OpaqueAction).convertToMany()) ->

		un.manyToMany.addAll(c.outgoing.target.typeSelect(uml::DecisionNode).convertToMany()) ->
		
		//un.child.addAll(c.outgoing.target.typeSelect(uml::SendSignalAction).convertToChild()) ->
		un.manyToMany.addAll(c.outgoing.target.typeSelect(uml::SendSignalAction).convertToMany()) ->

		//un.child.addAll(c.outgoing.target.typeSelect(uml::AcceptEventAction).convertToChild()) ->
		un.manyToMany.addAll(c.outgoing.target.typeSelect(uml::AcceptEventAction).convertToMany())

		// TODO: check why relation to uml::Class is needed -> in the export (establishConnections) there is no such thing
		//un.child.addAll(c.outgoing.target.typeSelect(uml::Class).convertToChild())
		
		// TODO: ChiObjectObjectFlowTarget is missing (Relation to ChiObject)
	) ->
	un
;
