import uml;
import Chronos;

extension common::util;

extension cartridge::ChronosCommon::usecases::ChiBusinessUseCase;

boolean hasFeature(Chronos::ChiBusinessUseCase this):
	this.getFeature() != null
;

boolean hasScope(Chronos::ChiBusinessUseCase this):
	!this.Scope.isNullOrEmpty()
;

boolean hasGoalInContext(Chronos::ChiBusinessUseCase this):
	!this.GoalInContext.isNullOrEmpty()
;

boolean hasTriggerEqInitial(Chronos::ChiBusinessUseCase this):
	this.getInitial().name == this.Trigger
;

boolean hasMainSuccessScenarioEqFinal(Chronos::ChiBusinessUseCase this):
	this.getFinals().exists(e|e.name == this.MainSuccessScenario)
;

boolean isPrimaryActorActive(Chronos::ChiBusinessUseCase this):
	!Chronos::ChiBusinessPartnerPassive.isInstance(this.getPrimaryActor())
;

boolean hasActivitySet(Chronos::ChiBusinessUseCase this):
	this.getActivitySets().size > 0
;

boolean hasActor(Chronos::ChiBusinessUseCase this):
	this.getActors().size > 0
;

boolean hasTrigger(Chronos::ChiBusinessUseCase this):
	!this.Trigger.isNullOrEmpty()
;

boolean hasMainSuccessScenario(Chronos::ChiBusinessUseCase this):
	!this.MainSuccessScenario.isNullOrEmpty()
;

boolean hasPrimaryActor(Chronos::ChiBusinessUseCase this):
	this.getPrimaryActor() != null
;
