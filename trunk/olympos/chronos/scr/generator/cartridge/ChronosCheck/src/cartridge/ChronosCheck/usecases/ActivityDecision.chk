import Chronos;
import Ouranos;
import uml;

extension common::util;
extension common::umlutils;

extension cartridge::ChronosCommon::usecases::ActivityNode;
extension cartridge::ChronosCommon::usecases::DecisionNode;

extension cartridge::ChronosCheck::usecases::ActivityDecision;

context uml::DecisionNode ERROR
	"ActivityDecision must have a non-empty name: " + this.fullQualifiedName():
	this.hasName()
;

context uml::DecisionNode ERROR
	"ActivityDecision must have a unique name within its ActivitySet: " + this.fullQualifiedName():
	this.hasUniqueName()
;

context uml::DecisionNode ERROR
	"ActivityDecision must have at least one incoming and two outgoing arrows: " + this.fullQualifiedName():
	this.hasOneIncomingGe2Outgoing()
;

context uml::DecisionNode ERROR
	"All arrows exiting from an ActivityDecision must have unique names: " + this.fullQualifiedName():
	this.hasUniqueOutgoing()
;

context uml::DecisionNode ERROR
	"ActivityDecision must have at most one ProductionRuleSet:" + this.fullQualifiedName():
	this.hasOneProductionRuleset()
;

context uml::DecisionNode if this.getProductionRuleset() == null ERROR
	"An ActivityDecision with no ProductionRuleSet must be preceded by an Activity: " + this.fullQualifiedName():
	this.hasPreActivity()
;

context uml::DecisionNode if this.getProductionRuleset() != null ERROR
	"All ActivityDecision associated with the same ProductionRuleSet must be consecutive: " + this.fullQualifiedName():
	this.isProductionRulesetConsecutive()	
;

context uml::DecisionNode if this.getProductionRuleset() != null ERROR
	"At most one ActivityDecision may be associated with the same ProductionRuleSet: " + this.fullQualifiedName():
	this.isSingleWithingProductionRuleset()
;

context uml::DecisionNode if this.isLoop() ERROR
	"Loop type ActivityDecision must have at least one incoming LoopContinue and exactly one outgoing LoopStart arrow: " + this.fullQualifiedName():
	this.hasRequiredLoopArrows()
;

context uml::DecisionNode if this.isLoop() ERROR
	"Loop type ActivityDecision must have the following predecessors: Activity('get list') -> ChiObject('list') -> Activity('evaluate list') -> ActivityDecision: " + this.fullQualifiedName():
	this.hasRequiredLoopPredecessors()
;

context uml::DecisionNode if this.isLoop() ERROR
	"Loop type ActivityDecision must have the following successors: ActivityDecision -> Activity('get list element') -> ChiObject('list element'): " + this.fullQualifiedName():
	this.hasRequiredLoopSuccessors()
;	


context uml::DecisionNode if this.isLoop() ERROR
	"Loop type ActivityDecision must be in same ProductionRuleSet as its required predecessors and successors: Activity('get list') -> ChiObject('list') -> Activity('evaluate list') -> ActivityDecision -> Activity('get list element'): " + this.fullQualifiedName():
	this.hasRequiredLoopProductionRuleset()
;
