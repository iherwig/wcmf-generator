«IMPORT uml»
«IMPORT Chronos»

«EXTENSION common::util»
«EXTENSION common::umlutils»
«EXTENSION common::naming»

«EXTENSION cartridge::ChiCmf::extensions::globals»
«EXTENSION cartridge::ChronosCommon::naming»
«EXTENSION cartridge::ChiCmf::extensions::umlutils»
«EXTENSION cartridge::ChiCmf::extensions::util»

«EXTENSION cartridge::ChronosCommon::domain::ChiNode»
«EXTENSION cartridge::ChronosCommon::domain::ChiValue»
«EXTENSION cartridge::ChronosCommon::domain::ChiValueRef»

«REM» This template expands the mapper files ---------------------«ENDREM»

«DEFINE file FOR ChiNode»
	«FOREACH this.getRoleNames() AS curRoleName-»
		«FILE this.getFullPackageName().asPath()+"/"+curRoleName.asMapper().asClassFile()-»
<?php
«HeaderText()»
/**
 * This file was generated by ChronosGenerator «GeneratorVersion()» from «ModelFile()» on «Date()». 
 * Manual modifications should be placed inside the protected regions.
 */
«IF curRoleName == this.name-»
require_once(BASE."wcmf/lib/model/mapper/class.NodeUnifiedRDBMapper.php");
«ELSE-»
require_once(BASE."«this.getFullPackageName().asPath()»/«this.name.asMapper().asClassFile()»");
«ENDIF-»
require_once(BASE."«this.getFullPackageName().asPath()»/«curRoleName.asClassFile()»");

/**
 * @class «curRoleName.asMapper()»
 * «curRoleName.asMapper()» maps «curRoleName» Nodes to the database.
 * «curRoleName» description: «this.getComment("\n * ")»
 *
 * @author «this.getAuthor()»
 * @version «this.getVersion()»
 */
class «curRoleName.asMapper()» extends «IF curRoleName == this.name»NodeUnifiedRDBMapper«ELSE»«this.name.asMapper()»«ENDIF»
{
  /**
   * @see RDBMapper::getType()
   */
  function getType()
  {
    return '«curRoleName»';
  }
  /**
   * @see NodeRDBMapper::createObject()
   */
  function &createObject($oid=null)
  {
    return new «curRoleName»($oid);
  }
«IF curRoleName == this.name-»
  /**
   * @see NodeUnifiedRDBMapper::getTableName()
   */
  function getTableName()
  {
    return '«getTableName()»';
  }
  /**
   * @see PersistenceMapper::getPkNames()
   */
  function getPkNames()
  {
    return «EXPAND primaryKeyArrayExtended»;
  }
  /**
   * @see NodeUnifiedRDBMapper::getMyFKColumnNameImpl()
   */
  function getMyFKColumnNameImpl($parentType)
  {
  	// start from the most specific
«FOREACH this.getRoleNames() AS curRole-»
	«FOREACH this.getParentNodesRecursive() AS curParent-»
		«IF curParent.getOtherEnd().getRoleName() == curRole-»
    if ($this->getType() == '«curRole»' && $parentType == '«curParent.type.name»') return '«curParent.getFKName()»';
    	«ENDIF-»
    «ENDFOREACH-»
«ENDFOREACH-»
«FOREACH this.getParentNodesRecursive() AS curParent-»
	«FOREACH curParent.type.getRoleNames() AS curParentRole-»
		«FOREACH this.getParentNodesRecursive() AS curRole-»
			«IF curParentRole == curRole.getRoleName() && curRole.getFKName() == curParent.getFKName()-»
    if ($parentType == '«curParentRole»') return '«curParent.getFKName()»';
    		«ENDIF-»
    	«ENDFOREACH-»
	«ENDFOREACH-»
«ENDFOREACH-»
    return '';
  }
  /**
   * @see NodeUnifiedRDBMapper::getOrderBy()
   */
  function getOrderBy()
  {
    return array(«IF this.getOrderByColumn() != ""»'«this.getOrderByColumn()»'«ENDIF»);
  }
  /**
   * @see NodeUnifiedRDBMapper::getObjectDefinitionImpl()
   */
  function getObjectDefinitionImpl()
  {
    $nodeDef = array();
    $nodeDef['_properties'] = array
    (
«IF this.metaType.toString().contains("ChiManyToMany")-»
      «EXPAND manyToManyProperty FOR this-»
«ENDIF-»
      array('name' => 'is_searchable', 'value' => «this.is_searchable.boolString()»),
«IF this.display_value != ""-»
      array('name' => 'display_value', 'value' => '«this.display_value»'),
«ENDIF-»
«IF this.parent_order != ""-»
      array('name' => 'parent_order', 'value' => '«this.parent_order»'),
«ENDIF-»
«IF this.child_order != ""-»
      array('name' => 'child_order', 'value' => '«this.child_order»'),
«ENDIF-»
«PROTECT CSTART "// " CEND "" ID (this.getFullPackageName().asPath()+"/"+this.name.asMapper().asClassFile()+"/Properties").asProtectedRegionId()»
«ENDPROTECT»
    );
    $nodeDef['_datadef'] = array
    (
«EXPAND values-»
	«IF this.getOrderByColumn() == "sortkey"-»
      // Value description: Sort key for ordering
      array('name' => 'sortkey', 'app_data_type' => DATATYPE_IGNORE, 'column_name' => 'sortkey', 'db_data_type' => 'INT(11)', «REM»NOBR«ENDREM-»
'default' => '', 'restrictions_match' => '[0-9]*', 'is_editable' => true, 'input_type' => 'text[class="tiny"]')
	«ENDIF-»
    );
    $nodeDef['_ref'] = array
    (
«EXPAND references-»
    );
    $nodeDef['_parents'] = array
    (
«EXPAND parents-»
    );
    $nodeDef['_children'] = array
    (
«EXPAND children-»
    );
    return $nodeDef;
  }
«ENDIF-»
}
?>
«ENDFILE-»
«ENDFOREACH-»
«ENDDEFINE»

«REM» parentType -------------------------------------------------«ENDREM»
«DEFINE parentType FOR ChiNode-»
	«IF this.name.isNullOrEmpty()»
    return null; // no parent type
    «ELSE-»
		«IF this.getParentNodesRecursive().size == 1-»
			«FOREACH this.getParentNodesRecursive() AS curParentNode»
    return '«curParentNode.getRoleName()»'; // parent mapper type
			«ENDFOREACH-»
		«ELSE»
    // This type is connected to more than one parents so we decided to leave this
    // field blank and add foreign key relations as attributes.
    return null;
    	«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«REM» manyToManyProperty -----------------------------------------«ENDREM»
«DEFINE manyToManyProperty FOR ChiNode-»
      array('name' => 'manyToMany', 'value' => array(«FOREACH this.getParentNodes() AS curParent SEPARATOR ', '»'«curParent.getRoleName()»'«ENDFOREACH»)),
«ENDDEFINE»

«REM» values -----------------------------------------------------«ENDREM»
«DEFINE values FOR ChiNode-»
	«FOREACH this.getChiValuesRecursive() AS curValue ITERATOR Index1-»
     /* 
      * Value description: «curValue.getComment(" ")»
      */
      array('name' => '«curValue.name»', 'app_data_type' => «curValue.app_data_type», 'column_name' => '«curValue.getColumnName()»', «REM»NOBR«ENDREM-»
'db_data_type' => '«curValue.db_data_type.replaceAll("\\'", "\\\\'")»', 'default' => '«curValue.defaultValue.stringValue()»', 'restrictions_match' => '«curValue.restrictions_match»', «REM»NOBR«ENDREM-»
'restrictions_not_match' => '«curValue.restrictions_not_match»', 'restrictions_description' => '«curValue.restrictions_description»', «REM»NOBR«ENDREM-»
'is_editable' => «curValue.is_editable.boolString()», 'input_type' => '«curValue.input_type»', 'display_type' => '«curValue.display_type»')«REM»NOBR«ENDREM-»
«IF Index1.counter1 < this.getChiValuesRecursive().size || this.getOrderByColumn() == "sortkey"»,«ENDIF»
	«ENDFOREACH-»
«ENDDEFINE»

«REM» references -------------------------------------------------«ENDREM»
«DEFINE references FOR ChiNode-»
	«FOREACH this.getChiValueRefs() AS curReference ITERATOR Index1-»
     /* 
      * Value description: «this.getComment(" ")» 
      */
      array('name' => '«curReference.name»', 'ref_type' => '«curReference.getReferencedNode().name»', 'ref_value' => '«curReference.getReferencedValue().name»', «REM»NOBR«ENDREM-»
'ref_table' => '«curReference.getReferencedNode().getTableName()»', 'id_column' => '«curReference.getReferencedNode().getPKName()»', «REM»NOBR«ENDREM-»
'fk_columns' => '«curReference.getReferencedProperty().getOtherEnd().getFKName()»', 'ref_column' => '«curReference.getReferencedValue().getColumnName()»')«REM»NOBR«ENDREM-»
«IF Index1.counter1 < this.getChiValueRefs().size»,«ENDIF»
	«ENDFOREACH-»
«ENDDEFINE»

«REM» parents ----------------------------------------------------«ENDREM»
«DEFINE parents FOR ChiNode-»
	«FOREACH this.getParentNodesRecursive() AS curParent ITERATOR Index1-»«IF !((ChiNode)curParent.type).isAbstract-»
      array('type' => '«curParent.getRoleName()»', 'is_navigable' => «IF curParent.isNavigable()»true«ELSE»false«ENDIF», «REM»NOBR«ENDREM-»
'table_name' => '«((ChiNode)curParent.type).getTableName()»', 'pk_columns' => «EXPAND primaryKeyArray FOR (ChiNode)curParent.type-», «REM»NOBR«ENDREM-»
'fk_columns' => '«curParent.getFKName()»')«REM»NOBR«ENDREM-»
«IF Index1.counter1 < this.getParentNodesRecursive().size»,«ENDIF»«ENDIF»
	«ENDFOREACH-»
«ENDDEFINE»

«REM» children ---------------------------------------------------«ENDREM»
«DEFINE children FOR ChiNode-»
	«FOREACH this.getChildNodesRecursive() AS curChild ITERATOR Index1-»«IF !((ChiNode)curChild.type).isAbstract-»
      array('type' => '«curChild.getRoleName()»', 'minOccurs' => «curChild.getLower()», 'maxOccurs' => «IF curChild.getUpper() == -1»'unbounded'«ELSE»«curChild.getUpper()»«ENDIF-», «REM»NOBR«ENDREM-»
'aggregation' => «IF curChild.isAggregation()»true«ELSE»false«ENDIF-», 'composition' => «IF curChild.isComposition()»true«ELSE»false«ENDIF-», «REM»NOBR«ENDREM-»
'is_navigable' => «IF curChild.isNavigable() || (!curChild.isAggregation() && !curChild.isComposition())»true«ELSE»false«ENDIF-», «REM»NOBR«ENDREM-»
'table_name' => '«((ChiNode)curChild.type).getTableName()»', 'pk_columns' => «EXPAND primaryKeyArray FOR (ChiNode)curChild.type-», 'fk_columns' => '«curChild.getOtherEnd().getFKName()»', 'order_by' => «REM»NOBR«ENDREM-»
array(«IF ((ChiNode)curChild.type).getOrderByColumn() != ""»'«((ChiNode)curChild.type).getOrderByColumn()»'«ENDIF»))«REM»NOBR«ENDREM-»
«IF Index1.counter1 < this.getChildNodesRecursive().size»,«ENDIF»«ENDIF»
	«ENDFOREACH-»
«ENDDEFINE»

«REM» primaryKeyArray --------------------------------------------«ENDREM»
«DEFINE primaryKeyArray FOR ChiNode-»
array(«FOREACH this.getPKValues() AS curPk SEPARATOR ', '»'«curPk.getColumnName()»'«ENDFOREACH»)«REM»NOBR«ENDREM-»
«ENDDEFINE»

«REM» primaryKeyArrayExtended ------------------------------------«ENDREM»
«DEFINE primaryKeyArrayExtended FOR ChiNode-»
array(«FOREACH getPKValues() AS curPk SEPARATOR ', '»'«curPk.getColumnName()»' => DATATYPE_IGNORE«ENDFOREACH»)«REM»NOBR«ENDREM-»
«ENDDEFINE»
