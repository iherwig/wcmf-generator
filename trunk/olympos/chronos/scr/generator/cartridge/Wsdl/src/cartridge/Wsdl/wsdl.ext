import xmlSchema;
import soap;
import wsdl;
import uml::Model;

extension org::openarchitectureware::xsd::lib::qname;

extension cartridge::XmlSchema::root;

create wsdl::TTypes createType(uml::Model umlModel, String rootElements, String targetNamespace):
	let schema = xmlSchema(umlModel, rootElements, targetNamespace):
	let rootElementList = rootElements.split(","):
	
	schema.schema.complexType.addAll(createServiceInterfaceTypes(umlModel, rootElements, targetNamespace)) ->
	
	schema.schema.element.removeAll(schema.schema.element.select(e|rootElementList.contains(e.name))) ->
	
	schema.schema.element.addAll(createServiceInterfaceElements(umlModel, targetNamespace)) ->
	
	this.any.addFrom(schema)
;

create List[xmlSchema::TopLevelComplexType] createServiceInterfaceTypes(uml::Model umlModel, String rootElements, String targetNamespace):
	let rootElementList = rootElements.split(","):
	
	this.add(createComplexType(requestName(umlModel), "request", targetNamespace, rootElementList.selectFirst(e|e.toLowerCase().endsWith("request")))) ->
	this.add(createComplexType(responseName(umlModel), "response", targetNamespace, rootElementList.selectFirst(e|e.toLowerCase().endsWith("response")))) ->
	this.add(createRequestValidationExceptionType())
;

create List[xmlSchema::TopLevelElement] createServiceInterfaceElements(uml::Model umlModel, String targetNamespace):
	this.add(createElement(requestName(umlModel).toFirstLower(), targetNamespace)) ->
	this.add(createElement(responseName(umlModel).toFirstLower(), targetNamespace)) ->
	this.add(createElement(requestValidationExceptionName(), targetNamespace))
;

cached ucName(uml::Model umlModel):
	umlModel.allOwnedElements().typeSelect(uml::UseCase).first().name.replaceAll(" ", "").toFirstUpper()
;

cached String requestName(uml::Model umlModel):
	"execute" + umlModel.ucName()
;

cached String responseName(uml::Model umlModel):
	"execute" + umlModel.ucName() + "Response"
;

create xmlSchema::TopLevelComplexType createComplexType(String name, String elementName, String namespace, String type):
	let sequence = new xmlSchema::ExplicitGroup:
	let element = new xmlSchema::LocalElement:
	
	this.setName(name) ->
	this.setSequence(sequence) ->
	sequence.element.add(element) ->
	element.setName(elementName) ->
	element.setMinOccurs(0) ->
	element.setType(createQName(namespace, type.toFirstLower()))
;

create xmlSchema::TopLevelElement createElement(String name, String namespace):
	this.setName(name) ->
	this.setType(createQName(namespace, name))
;

create xmlSchema::TopLevelComplexType createRequestValidationExceptionType():
	this.setName(requestValidationExceptionName())
;

create xmlSchema::TopLevelElement createRequestValidationExceptionElement(String namespace):
	this.setName(requestValidationExceptionName()) ->
	this.setType(createQName(namespace, requestValidationExceptionName()))
;

String requestValidationExceptionName():
	"RequestValidationException"
;


create List[wsdl::TMessage] createMessages(uml::Model umlModel, String targetNamespace):	
	this.add(createMessage(requestName(umlModel).toFirstLower(), targetNamespace, requestName(umlModel), "parameters")) ->
	this.add(createMessage(responseName(umlModel).toFirstLower(), targetNamespace, responseName(umlModel), "parameters")) ->
	this.add(createMessage(requestValidationExceptionName(), targetNamespace, requestValidationExceptionName(), requestValidationExceptionName()))
;

create wsdl::TMessage createMessage(String name, String namespace, String type, String partName):
	let part = new wsdl::TPart:
	
	this.setName(name) ->
	this.part.add(part) ->
	part.setElement(createQName(namespace, name)) ->
	part.setName(partName)
;

String serviceName(uml::Model umlModel):
	umlModel.ucName() + "Service"
;

create wsdl::TPortType createPortType(uml::Model umlModel, String targetNamespace):
	//(new wsdl::TOperation).ou

	let op = new wsdl::TOperation:
	let input = new wsdl::TParam:
	let output = new wsdl::TParam:
	let fault = new wsdl::TFault:

	this.setName(serviceName(umlModel)) ->
	
	this.operation.add(op) ->
	op.setName(requestName(umlModel)) ->
	
	op.setInput(input) ->
	input.setMessage(createQName(targetNamespace, requestName(umlModel))) ->
	input.setName(requestName(umlModel)) ->
	
	op.setOutput(output) ->
	output.setMessage(createQName(targetNamespace, responseName(umlModel))) ->
	output.setName(responseName(umlModel)) ->
	
	op.fault.add(fault) ->
	fault.setMessage(createQName(targetNamespace, requestValidationExceptionName())) ->
	fault.setName(requestValidationExceptionName())
;

String bindingName(uml::Model umlModel):
	serviceName(umlModel) + "SoapBinding"
;

create wsdl::TBinding createBinding(uml::Model umlModel, String targetNamespace):
	let bindingDocRoot = new soap::SoapDocumentRoot:
	let binding = new soap::TBinding:
	let op = new wsdl::TBindingOperation:
	let opSoapDocRoot = new soap::SoapDocumentRoot:
	let opSoap = new soap::TOperation:
	let input = new wsdl::TBindingOperationMessage:
	let inputBodyDocRoot = new soap::SoapDocumentRoot:
	let inputBody = new soap::TBody:
	let output = new wsdl::TBindingOperationMessage:
	let outputBodyDocRoot = new soap::SoapDocumentRoot:
	let outputBody = new soap::TBody:
	let fault = new wsdl::TBindingOperationFault:
	let faultSoapDocRoot = new soap::SoapDocumentRoot:
	let faultSoap = new soap::TFault:
	
	this.setName(bindingName(umlModel)) ->
	this.setType(createQName(targetNamespace, serviceName(umlModel))) ->	
	
	bindingDocRoot.setBinding(binding) ->
	this.any.addFrom(bindingDocRoot) ->
	binding.setStyle(soap::TStyleChoice::document) ->
	binding.setTransport("http://schemas.xmlsoap.org/soap/http") ->
	
	this.operation.add(op) ->
	op.setName(requestName(umlModel)) ->
	
	opSoapDocRoot.setOperation(opSoap) ->
	op.any.addFrom(opSoapDocRoot) ->
	opSoap.setSoapAction("") ->
	opSoap.setStyle(soap::TStyleChoice::document) ->
	
	op.setInput(input) ->
	input.setName(requestName(umlModel)) ->
	inputBodyDocRoot.setBody(inputBody) ->
	input.any.addFrom(inputBodyDocRoot) ->
	inputBody.setUse(soap::UseChoice::literal) ->
	
	op.setOutput(output) ->
	output.setName(responseName(umlModel)) ->
	outputBodyDocRoot.setBody(outputBody) ->
	output.any.addFrom(outputBodyDocRoot) ->
	outputBody.setUse(soap::UseChoice::literal) ->
	
	op.fault.add(fault) ->
	fault.setName(requestValidationExceptionName()) ->
	faultSoapDocRoot.setFault(faultSoap) ->
	fault.any.addFrom(faultSoapDocRoot) ->
	faultSoap.setName(requestValidationExceptionName()) ->
	faultSoap.setUse(soap::UseChoice::literal)
;

create wsdl::TService createService(uml::Model umlModel, String targetNamespace, String locationPrefix):
	let port = new wsdl::TPort:
	let addressDocRoot = new soap::SoapDocumentRoot:
	let address = new soap::TAddress:
	
	this.setName(serviceName(umlModel) + "Service") ->
	
	this.port.add(port) ->
	port.setBinding(createQName(targetNamespace, bindingName(umlModel))) ->
	port.setName(serviceName(umlModel) + "Port") ->
	
	addressDocRoot.setAddress(address) ->
	port.any.addFrom(addressDocRoot) ->
	address.setLocation(locationPrefix + umlModel.ucName().toFirstLower())
;
