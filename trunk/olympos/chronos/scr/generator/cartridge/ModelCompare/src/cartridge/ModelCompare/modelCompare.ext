import uml;

extension common::util;

uml::Model referenceModel():
	GLOBALVAR referenceModel
;

cached findMirror(Object this):
/*
	let metaType = this.metaType:

	let result = referenceModel().allOwnedElements().typeSelect(metaType).selectFirst(e|e.name == this.name):
	
	result == null ? (
		warn("Could not find mirror of " + this)
	) : (
		Void
	) ->
	
	result
*/
	null
;

cached uml::Association findMirror(uml::Association this):
	let source = this.getSource():
	let target = this.getTarget():
	
	let result = referenceModel().allOwnedElements().typeSelect(uml::Association).selectFirst(e|
		(
			e.getSource().type.name == source.type.name &&
			e.getTarget().type.name == target.type.name &&
			(
				!this.name.isNullOrEmpty() ? (
					e.name == this.name
				) : (
					true
				)
			) &&
			(
				!this.getSource().name.isNullOrEmpty() ? (
					e.getSource().name == source.name
				) : (
					true
				)
			) &&
			(
				!this.getTarget().name.isNullOrEmpty() ? (
					e.getTarget().name == target.name
				) : (
					true
				)
			)
		) || (
			e.getSource().type.name == target.type.name &&
			e.getTarget().type.name == source.type.name &&
			(
				!this.name.isNullOrEmpty() ? (
					e.name == this.name
				) : (
					true
				)
			) &&
			(
				!this.getSource().name.isNullOrEmpty() ? (
					e.getSource().name == target.name
				) : (
					true
				)
			) &&
			(
				!this.getTarget().name.isNullOrEmpty() ? (
					e.getTarget().name == source.name
				) : (
					true
				)
			)
		)
	):

/*
	result == null ? (
		warn("Could not find mirror of uml::Association " + this.getMeaningfulName())
	) : (
		Void
	) ->
*/
	
	result
;

cached findMirror(uml::Class this):
	referenceModel().allOwnedElements().typeSelect(uml::Class).selectFirst(e|e.name == this.name)
;

cached findMirror(uml::Property this):
	this.class.findMirror().attribute.selectFirst(e|e.name == this.name)
;

uml::Property getSource(uml::Association this):
	this.getSource(this)
;

uml::Property getSource(uml::Association mirror, uml::Association self):
	let result = mirror.memberEnd.select(e|e.type.name == self.memberEnd.get(0).type.name):
	
	result.size >= 1 ? (
		result.get(0)
	) : (
		warn("Cannot find source with type " + self.getSource().type.name + " at association " + mirror.getMeaningfulName()) ->
		null
	)
;

uml::Property getTarget(uml::Association this):
	this.getTarget(this)
;

uml::Property getTarget(uml::Association mirror, uml::Association self):
	let result = mirror.memberEnd.select(e|e.type.name == self.memberEnd.get(1).type.name):

	result.size >= 1 ? (
		result.last()
	) : (
		warn("Cannot find target with type " + self.getTarget().type.name + " at association " + mirror.getMeaningfulName()) ->
		null
	)
;

String getMeaningfulName(uml::Association this):
	this.getSource().type.name + " (" + this.getSource().name + ") " + " --" + this.name + "-- " + this.getTarget().type.name + " (" + this.getTarget().name + ") "
;

String getMeaningfulName(uml::Property this):
	this.class.name + "." + this.name
;
