«IMPORT uml»
«IMPORT Chronos»

«EXTENSION common::util»
«EXTENSION common::umlutils»
«EXTENSION common::naming»

«EXTENSION cartridge::ChronosCommon::naming»
«EXTENSION cartridge::Wcmf::extensions::globals»
«EXTENSION cartridge::Wcmf::extensions::umlutils»
«EXTENSION cartridge::Wcmf::extensions::util»

«EXTENSION cartridge::ChronosCommon::domain::ChiNode»

«REM» This template expands the soap service definitions ---------«ENDREM»

«DEFINE file FOR Model»
  «FILE ApplicationPath()+"/public/soap.php"-»
<?php
/**
 * This file was generated by ChronosGenerator «GeneratorVersion()» from «ModelFile()»«IF PrintGenerateDate()» on «Date()»«ENDIF».
 * Manual modifications should be placed inside the protected regions.
 * NOTE: This file was created in the application root directory to 
 *       ensure that everything is working correctly
 */
error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING);
require_once("base_dir.php");
require_once(WCMF_BASE."wcmf/lib/core/ClassLoader.php");

use wcmf\lib\service\SoapServer;
«PROTECT CSTART "// " CEND "" ID ("/soap/Import").asProtectedRegionId()»
«ENDPROTECT»

// instantiate server
$server = new SoapServer();

// register search method
$server->register('search',
  array('query' => 'xsd:string'), array('return' => 'tns:SearchResultList'),
  $server::TNS, $server->wsdl->endpoint.'#search', 'document', 'literal'
);

/**
 * Search
 * @param query The search term
 * @return Array of SearchResultItem on success
 */
function search($query) {
  global $server;
  $response = $server->doCall('search', array('query' => $query));
  $result = array();
  foreach ($response->getValue('list') as $item) {
    $result[] = array('type' => $item['type'], 'oid' => $item['oid'],
      'displayValue' => $item['displayValue'], 'summary' => $item['summary']
    );
  }
  return array('return' => $result);
}
«EXPAND wsdl FOREACH this.allOwnedElements().typeSelect(ChiNode)-»
«EXPAND methodImpl FOREACH this.allOwnedElements().typeSelect(ChiNode)-»

«PROTECT CSTART "// " CEND "" ID ("/soap/Body").asProtectedRegionId()»
// invoke the service
if (!isset($HTTP_RAW_POST_DATA)) {
  $HTTP_RAW_POST_DATA = implode("\r\n", file('php://input'));
}
$server->service($HTTP_RAW_POST_DATA);
«ENDPROTECT»
?>
«ENDFILE-»
«ENDDEFINE»

«REM» wsdl -------------------------------------------------------«ENDREM»
«DEFINE wsdl FOR ChiNode-»
  «IF this.isApplicationClass()-»

/**
 * WSDL definition for «this.name.asType()»
 */
$server->wsdl->addComplexType('«this.name»', 'complexType', 'struct', 'sequence', '',
    array(
        'oid' => array('name' => 'oid', 'type' => 'xsd:string'),
    «FOREACH this.getChiValuesRecursive() AS curValue-»
        '«curValue.name»' => array('name' => '«curValue.name»', 'type' => 'xsd:string'),
    «ENDFOREACH-»
    «FOREACH this.getChiValueRefs() AS curRef-»
        '«curRef.name»' => array('name' => '«curRef.name»', 'type' => 'xsd:string'),
    «ENDFOREACH-»
    «IF getOrderByName() == "sortkey"-»
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
    «ENDIF-»
    «FOREACH this.getNotAbstractNavigableParentNodes() AS curParent-»
        '«curParent.type.name.asType()»' => array('name' => '«curParent.type.name.asType()»', 'type' => 'tns:«curParent.type.name.asType()»List'),
    «ENDFOREACH-»
    «FOREACH this.getNotAbstractNavigableChildNodes() AS curChild-»
        '«curChild.type.name.asType()»' => array('name' => '«curChild.type.name.asType()»', 'type' => 'tns:«curChild.type.name.asType()»List'),
    «ENDFOREACH-»
    )
);
$server->wsdl->addComplexType('«this.name.asType()»List', 'complexType', 'array', '', 'SOAP-ENC:Array',
    array(),
    array(
        array('ref' => 'SOAP-ENC:arrayType', 'wsdl:arrayType' => 'tns:«this.name.asType()»[]')
    ),
    'tns:«this.name.asType()»'
);
$server->wsdl->addComplexType('«this.name.asType()»ListResult', 'complexType', 'struct', 'sequence', '',
    array(
        'list' => array('name' => 'list', 'type' => 'tns:«this.name.asType()»List'),
        'totalCount' => array('name' => 'totalCount', 'type' => 'xsd:integer')
    )
);
    «IF !this.is_soap.isNullOrFalse()-»
$server->register('get«this.name.asType()»List',
  array('limit' => 'xsd:integer', 'offset' => 'xsd:integer', 'sortFieldName' => 'xsd:string', 'sortDirection' => 'xsd:string', 'query' => 'xsd:string'),
  array('return' => 'tns:«this.name.asType()»ListResult'), $server::TNS, $server->wsdl->endpoint.'#get«this.name.asType()»List', 'document', 'literal');
  
$server->register('create«this.name.asType()»',
  array('«this.name»' => 'tns:«this.name.asType()»'),
  array('return' => 'tns:«this.name.asType()»'), $server::TNS, $server->wsdl->endpoint.'#create«this.name.asType()»', 'document', 'literal');
  
$server->register('read«this.name.asType()»',
  array('oid' => 'xsd:string', 'depth' => 'xsd:integer'),
  array('return' => 'tns:«this.name.asType()»'), $server::TNS, $server->wsdl->endpoint.'#read«this.name.asType()»', 'document', 'literal');
  
$server->register('update«this.name.asType()»',
  array('«this.name»' => 'tns:«this.name.asType()»'),
  array('return' => 'tns:«this.name.asType()»'), $server::TNS, $server->wsdl->endpoint.'#update«this.name.asType()»', 'document', 'literal');
  
$server->register('delete«this.name.asType()»',
  array('oid' => 'xsd:string'),
  array('return' => 'xsd:string'), $server::TNS, $server->wsdl->endpoint.'#delete«this.name.asType()»', 'document', 'literal');
    «ENDIF-»
  «ENDIF-»
«ENDDEFINE»

«REM» methodImpl -------------------------------------------------«ENDREM»
«DEFINE methodImpl FOR ChiNode-»
  «IF this.isApplicationClass() && !this.is_soap.isNullOrFalse()-»

/**  
 * SOAP Method get«this.name.asType()»List 
 * @return Array of tns:«this.name.asType()» instances on success
 */  
function get«this.name.asType()»List($limit, $offset, $sortFieldName, $sortDirection, $query) {
  global $server;
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/get"+this.name.asType()+"List").asProtectedRegionId()»
  $params = array('className' => '«this.name»', 'completeObjects' => true);
  if ($limit) { $params['limit'] = $limit; }
  if ($offset) { $params['offset'] = $offset; }
  if ($sortFieldName) { $params['sortFieldName'] = $sortFieldName; }
  if ($sortDirection) { $params['sortDirection'] = $sortDirection; }
  if ($query) { $params['query'] = $query; }
  $response = $server->doCall('list', $params);
  return array('return' => array('list' => $response->getValue('list'), 'totalCount' => $response->getValue('totalCount')));
«ENDPROTECT»
}  
  
/**  
 * SOAP Method create«this.name.asType()»
 * @param «this.name» The serialized object data
 * @return String (object id) on success
 */  
function create«this.name.asType()»($«this.name») {
  global $server;
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/create"+this.name.asType()).asProtectedRegionId()»
  $oidStr = $server->getDummyOid('«this.name.asType()»')->__toString();
  $«this.name»['oid'] = $oidStr;
  $response = $server->doCall('create', array($oidStr => $«this.name»));
  return array('return' => $response->getValues());
«ENDPROTECT»
}  
  
/**  
 * SOAP Method read«this.name.asType()» 
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return tns:«this.name.asType()» on success
 */  
function read«this.name.asType()»($oid, $depth) {
  global $server;
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/read"+this.name.asType()).asProtectedRegionId()»
  $params = array('oid' => $oid);
  if ($depth) { $params['depth'] = $depth; }
  $response = $server->doCall('read', $params);
  return array('return' => $response->getValue('object'));
«ENDPROTECT»
}  
  
/**  
 * SOAP Method update«this.name.asType()» 
 * @param «this.name» The serialized object data
 * @return tns:«this.name.asType()» on success
 */  
function update«this.name.asType()»($«this.name») {
  global $server;
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/update"+this.name.asType()).asProtectedRegionId()»
  $response = $server->doCall('update', array($«this.name»['oid'] => $«this.name»));
  return array('return' => $response->getValues());
«ENDPROTECT»
}  
  
/**  
 * SOAP Method delete«this.name.asType()»
 * @param oid The object id of the object to delete
 * @return String (object id) on success
 */  
function delete«this.name.asType()»($oid) {
  global $server;
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/delete"+this.name.asType()).asProtectedRegionId()»
  $response = $server->doCall('delete', array('oid' => $oid));
  return array('return' => $response->getValue('oid')->__toString());
«ENDPROTECT»
}  
  «ENDIF-»
«ENDDEFINE»
