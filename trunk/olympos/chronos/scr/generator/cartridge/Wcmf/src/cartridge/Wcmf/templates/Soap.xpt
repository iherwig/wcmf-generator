«IMPORT uml»
«IMPORT Chronos»

«EXTENSION common::util»
«EXTENSION common::umlutils»
«EXTENSION common::naming»

«EXTENSION cartridge::ChronosCommon::naming»
«EXTENSION cartridge::Wcmf::extensions::globals»
«EXTENSION cartridge::Wcmf::extensions::umlutils»
«EXTENSION cartridge::Wcmf::extensions::util»

«EXTENSION cartridge::ChronosCommon::domain::ChiNode»

«REM» This template expands the soap service definitions ---------«ENDREM»

«DEFINE file FOR Model»
  «FILE ApplicationPath()+"/soap.php"-»
<?php
/**
 * This file was generated by ChronosGenerator «GeneratorVersion()» from «ModelFile()»«IF PrintGenerateDate()» on «Date()»«ENDIF».
 * Manual modifications should be placed inside the protected regions.
 * NOTE: This file was created in the application root directory to 
 *       ensure that everything is working correctly
 */
require_once("base_dir.php");  
require_once(WCMF_BASE."wcmf/lib/presentation/Application.php");
require_once(WCMF_BASE."wcmf/lib/security/AuthUser.php");
require_once(WCMF_BASE."wcmf/3rdparty/nusoap/lib/nusoap.php");
require_once(WCMF_BASE."wcmf/lib/util/Log.php");
require_once(WCMF_BASE."wcmf/lib/presentation/ActionMapper.php");
require_once(WCMF_BASE."wcmf/lib/presentation/Request.php");
«PROTECT CSTART "// " CEND "" ID ("/soap/Import").asProtectedRegionId()»
«ENDPROTECT»

$NAMESPACE = 'http://wcmf.sourceforge.net';
$server = new soap_server();
$server->configureWSDL('SOAPService', $NAMESPACE);
$server->wsdl->schemaTargetNamespace = $NAMESPACE;

$server->wsdl->addComplexType(
    'OidList',
    'complexType',
    'array',
    '',
    'SOAP-ENC:Array',
    array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'xsd:string[]')
    ),
    'xsd:string'
);
$server->wsdl->addComplexType(
    'ObjectList',
    'complexType',
    'array',
    '',
    'SOAP-ENC:Array',
    array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:object[]')
    ),
    'tns:object'
);
$server->wsdl->addComplexType('object', 'complexType', 'struct', 'sequence', '',
    array(
        'type' => array('name' => 'type', 'type' => 'xsd:string'),
        'oid' => array('name' => 'oid', 'type' => 'xsd:string'),
        'displayName' => array('name' => 'displayName', 'type' => 'xsd:string')
    )
);
«EXPAND wsdl FOREACH this.allOwnedElements().typeSelect(ChiNode)-»

$server->register('search',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'searchterm'=>'xsd:string'),
  array('return'=>'tns:ObjectList'), $NAMESPACE);

/**  
 * SOAP Method search 
 * @param login The login name
 * @param password The login password
 * @param searchterm The search term
 * @return string
 */  
function search($login, $password, $searchterm)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'searchterm' => $searchterm, 'usr_action' => 'soapSearch'));
  $result = doSoapCall();
  return $result->getValue('soapResult');
}  


$server->register('advancedSearch',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'type'=>'xsd:string', 'query'=>'xsd:string'),
  array('return'=>'tns:ObjectList'), $NAMESPACE);

/**  
 * SOAP Method advancedSearch 
 * @param login The login name
 * @param password The login password
 * @param type The type to search for
 * @param query The query definition (@see StringQuery)
 * @return string
 */  
function advancedSearch($login, $password, $type, $query)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'type' => $type, 'query' => $query, 'usr_action' => 'soapAdvancedSearch'));
  $result = doSoapCall();
  return $result->getValue('soapResult');
}  


// Use the request to (try to) invoke the service
$HTTP_RAW_POST_DATA = isset($HTTP_RAW_POST_DATA) ? $HTTP_RAW_POST_DATA : '';
$server->service($HTTP_RAW_POST_DATA);

«EXPAND methodImpl FOREACH this.allOwnedElements().typeSelect(ChiNode)-»

/**
 * Do the soap call using the ActionMapper
 * @return The Response instance from the executed Controller
 */
function doSoapCall()
{
  // initialize the application
  $application = new Application;
  $application->setErrorHandler();
  $callParams = $application->initialize('config/', 'config.ini', 'ExitController', '', $_GET['action'], MSG_FORMAT_SOAP);

  // process the requested action
  $request = new Request(
    $callParams['controller'],
    $callParams['context'],
    $callParams['action'],
    $callParams['data']
  );

  // login with the data given in the request
  $session = &SessionData::getInstance();
  $objectFactory = &ObjectFactory::getInstance();
  $authUser = new AuthUser();
  if ($authUser->login($request->getValue('login'), $request->getValue('password')))
  {
    // login succeeded, store the user in the session
    $session->set('auth_user', $authUser);

    $request->setFormat(MSG_FORMAT_SOAP);
    $request->setResponseFormat(MSG_FORMAT_SOAP);
    $response = ObjectFactory::getInstance('actionMapper')->processAction($request);
    $error = $response->getValue('errorMessage');
    if (strlen($error) > 0) {
      throw new ApplicationException($request, $response,
        ApplicationError::get('GENERAL_ERROR', array('message' => $error)));
    }
  }
  else {
    throw new ApplicationException($request, null,
      ApplicationError::get('AUTHENTICATION_FAILED'));
  }
  // cleanup
  $lockManager = LockManager::getInstance();
  $lockManager->releaseAllLocks();
  $session->destroy();

  return $response;
}

/**
 * Global error handling function. Assigned to EXCEPTION_HANDLER
 * which means it is called by WCMFException::trow()
 * @param message The error message
 * @param file The php file in which the error occured (optional)
 * @param line The line in the php file in which the error occured (optional)
 * @return The value
 */
function onError($message, $file='', $line='')
{
  global $server;
  $server->fault('SOAP-ENV:SERVER', $message, '', Log::getStackTrace());
  Log::error($message." (".$file.", ".$line.").\n".Log::getStackTrace());
}
?>
«ENDFILE-»
«ENDDEFINE»

«REM» wsdl -------------------------------------------------------«ENDREM»
«DEFINE wsdl FOR ChiNode-»
  «IF this.isApplicationClass()-»

/**
 * WSDL definition for «this.name.asType()»
 */
$server->wsdl->addComplexType('«this.name»', 'complexType', 'struct', 'sequence', '',
    array(
    «FOREACH this.getChiValuesRecursive() AS curValue-»
        '«curValue.name»' => array('name' => '«curValue.name»', 'type' => 'xsd:string'),
    «ENDFOREACH-»
    «IF getOrderByName() == "sortkey"-»
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        «ENDIF-»
        «FOREACH this.getChildNodes() AS curChild-»
        '«curChild.type.name.asType()»' => array('name' => '«curChild.type.name.asType()»', 'type' => 'tns:«curChild.type.name.asType()»List'),
        «ENDFOREACH-»
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('«this.name.asType()»List', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:«this.name.asType()»[]')
    ),
    'tns:«this.name.asType()»'
);
    «IF !this.is_soap.isNullOrFalse()-»
$server->register('get«this.name.asType()»List',
  array('login'=>'xsd:string', 'password'=>'xsd:string'),
  array('return'=>'tns:«this.name.asType()»List'), $NAMESPACE);
  
$server->register('create«this.name.asType()»',
  array('login'=>'xsd:string', 'password'=>'xsd:string', '«this.name»'=>'tns:«this.name.asType()»', 'parentoid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('read«this.name.asType()»',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
  array('return'=>'tns:«this.name.asType()»'), $NAMESPACE);
  
$server->register('update«this.name.asType()»',
  array('login'=>'xsd:string', 'password'=>'xsd:string', '«this.name»'=>'tns:«this.name.asType()»', 'oid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('delete«this.name.asType()»',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
    «ENDIF-»
  «ENDIF-»
«ENDDEFINE»


«REM» methodImpl -------------------------------------------------«ENDREM»
«DEFINE methodImpl FOR ChiNode-»
  «IF this.isApplicationClass() && !this.is_soap.isNullOrFalse()-»

/**  
 * SOAP Method get«this.name.asType()»List 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function get«this.name.asType()»List($login, $password)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'list', 'type' => '«this.name.asType()»'));
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/get"+this.name.asType()+"List").asProtectedRegionId()»
  $result = doSoapCall();
  return $result->getValue('objects');
«ENDPROTECT»
}  
  
/**  
 * SOAP Method create«this.name.asType()»
 * @param login The login name
 * @param password The login password
 * @param «this.name» The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function create«this.name.asType()»($login, $password, $«this.name», $parentoid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'new', 'newtype' => '«this.name.asType()»',  PersistenceFacade::composeOID(array('type' => '«this.name.asType()»')) => $«this.name», 'poid' => $parentoid));
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/create"+this.name.asType()).asProtectedRegionId()»
  $result = doSoapCall();
  return $result->getValue('oid');
«ENDPROTECT»
}  
  
/**  
 * SOAP Method read«this.name.asType()» 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function read«this.name.asType()»($login, $password, $oid, $depth)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'display', 'oid' => $oid, 'depth' => $depth));
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/read"+this.name.asType()).asProtectedRegionId()»
  $result = doSoapCall();
  return $result->getValue('node');
«ENDPROTECT»
}  
  
/**  
 * SOAP Method update«this.name.asType()» 
 * @param login The login name
 * @param password The login password
 * @param «this.name» The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function update«this.name.asType()»($login, $password, $«this.name», $oid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'save', $oid => $«this.name», 'oid' => $oid));
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/update"+this.name.asType()).asProtectedRegionId()»
  $result = doSoapCall();
  return $result;
«ENDPROTECT»
}  
  
/**  
 * SOAP Method delete«this.name.asType()»
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function delete«this.name.asType()»($login, $password, $oid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'delete', 'deleteoids' => $oid));
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/delete"+this.name.asType()).asProtectedRegionId()»
  $result = doSoapCall();
  return $result;
«ENDPROTECT»
}  
  «ENDIF-»
«ENDDEFINE»
