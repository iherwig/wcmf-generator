«IMPORT uml»
«IMPORT Chronos»

«EXTENSION common::util»
«EXTENSION common::umlutils»
«EXTENSION common::naming»

«EXTENSION cartridge::ChronosCommon::naming»
«EXTENSION cartridge::Wcmf::extensions::globals»
«EXTENSION cartridge::Wcmf::extensions::umlutils»
«EXTENSION cartridge::Wcmf::extensions::util»

«EXTENSION cartridge::ChronosCommon::domain::ChiNode»

«REM» template expands the node base class files -----------------«ENDREM»
«DEFINE file FOR ChiNode-»
  «FILE this.getFullPackageName().asPath()+"/_base/"+this.name.asBaseClass().asPhpClassFile()-»
<?php
«HeaderText()-»
/**
 * This file was generated by ChronosGenerator«IF !GeneratorVersion().isNullOrEmpty()» «GeneratorVersion()»«ENDIF» from «ModelFile()»«IF PrintGenerateDate()» on «Date()»«ENDIF».
 * Manual modifications should be placed inside the protected regions.
 */
namespace «this.getFullPackageName().asPhpPackage()»\_base;

«IF this.hasSuperClass()-»
use «this.getSuperClass().getFullPackageName().asPhpPackage()»\«this.getSuperClass().name»;
«ENDIF-»
use wcmf\lib\persistence\ObjectId;

/**
 * «IF !this.getComment("\n * ").isNullOrEmpty()»«this.getComment("\n * ")»«ELSE»«this.name»«ENDIF»
 */
abstract class «this.name.asBaseClass()»«IF this.hasSuperClass()» extends «this.getSuperClass().name»«ENDIF» {

  /**
   * Constructor
   * @param oid ObjectId instance (optional)
   */
  public function __construct(ObjectId $oid=null, array $initialData=null) {
«IF this.hasSuperClass()-»
    if ($oid == null) {
      $oid = new ObjectId('«this.getFullPackageName().asPackageName()».«this.name»');
    }
    parent::__construct($oid, $initialData);
«ENDIF-»
  }
  «IF this.getParentNodesRecursive().size > 0 || this.getChildNodesRecursive().size > 0 -»
    «EXPAND parents FOR this-»
    «EXPAND children FOR this-»
  «ENDIF-»
}
«ENDFILE-»
«ENDDEFINE»

«REM» parents ----------------------------------------------------«ENDREM»
«DEFINE parents FOR ChiNode-»
  «FOREACH this.getParentNodesRecursive() AS curParent-»

  /**
   * Get the «curParent.type.name» instances in the «curParent.getRoleName()» relation
   * @return Array of «curParent.type.name» instances
   */
  public function «curParent.getRoleName().asGetter()»List() {
    return $this->getValue('«curParent.getRoleName()»');
  }

  /**
   * Set the «curParent.type.name» instances in the «curParent.getRoleName()» relation
   * @param nodeList Array of «curParent.type.name» instances
   */
  public function «curParent.getRoleName().asSetter()»List(array $nodeList) {
    $this->setValue('«curParent.getRoleName()»', null);
    foreach ($nodeList as $node) {
      $this->addNode($node, '«curParent.getRoleName()»');
    }
  }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» children ---------------------------------------------------«ENDREM»
«DEFINE children FOR ChiNode-»
  «FOREACH this.getChildNodesRecursive() AS curChild-»
    «IF curChild.type.metaType.toString().contains("ChiManyToMany")-»
      «FOREACH ((ChiNode)curChild.type).getParentNodes() AS curChildParent-»
        «IF isAtOtherNmEnd(this, curChildParent.type, curChild.type)-»

  /**
   * Get the «curChildParent.type.name» instances in the «curChildParent.type.name» relation
   * @return Array of «curChildParent.type.name» instances
   */
  public function «curChildParent.type.name.asGetter()»List() {
    return $this->getValue('«curChildParent.getRoleName()»');
  }

  /**
   * Set the «curChildParent.type.name» instances in the «curChildParent.type.name» relation
   * @param nodeList Array of «curChildParent.type.name» instances
   */
  public function «curChildParent.type.name.asSetter()»List(array $nodeList) {
    $this->setValue('«curChildParent.getRoleName()»', null);
    foreach ($nodeList as $node) {
      $this->addNode($node, '«curChildParent.getRoleName()»');
    }
  }
        «ENDIF-»
      «ENDFOREACH-»
    «ELSE-»

  /**
   * Get the «curChild.type.name» instances in the «curChild.getRoleName()» relation
   * @return Array of «curChild.type.name» instances
   */
  public function «curChild.getRoleName().asGetter()»List() {
    return $this->getValue('«curChild.getRoleName()»');
  }

  /**
   * Set the «curChild.type.name» instances in the «curChild.getRoleName()» relation
   * @param nodeList Array of «curChild.type.name» instances
   */
  public function «curChild.getRoleName().asSetter()»List(array $nodeList) {
    $this->setValue('«curChild.getRoleName()»', null);
    foreach ($nodeList as $node) {
      $this->addNode($node, '«curChild.getRoleName()»');
    }
  }
    «ENDIF-»
  «ENDFOREACH-»
«ENDDEFINE»