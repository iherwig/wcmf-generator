«IMPORT uml»
«IMPORT Chronos»

«EXTENSION common::util»
«EXTENSION common::umlutils»
«EXTENSION common::naming»

«EXTENSION cartridge::ChronosCommon::naming»
«EXTENSION cartridge::Wcmf::extensions::globals»
«EXTENSION cartridge::Wcmf::extensions::umlutils»
«EXTENSION cartridge::Wcmf::extensions::util»

«EXTENSION cartridge::ChronosCommon::domain::ChiNode»

«REM» template expands the node base class files -----------------«ENDREM»
«DEFINE file FOR ChiController-»
  «FILE this.getFullPackageName().asPath()+"/_base/"+this.name.asBaseClass().asPhpClassFile()-»
<?php
«HeaderText()-»
/**
 * This file was generated by ChronosGenerator«IF !GeneratorVersion().isNullOrEmpty()» «GeneratorVersion()»«ENDIF» from «ModelFile()»«IF PrintGenerateDate()» on «Date()»«ENDIF».
 * Manual modifications should be placed inside the protected regions.
 */
namespace «this.getFullPackageName().asPhpPackage()»\_base;

«IF this.hasSuperClass()-»
use «this.getSuperClass().getFullPackageName().asPhpPackage()»\«this.getSuperClass().name»;
«ENDIF-»
use wcmf\lib\validation\ValidationException;

/**
 * «IF !this.getComment("\n * ").isNullOrEmpty()»«this.getComment("\n * ")»«ELSE»«this.name»«ENDIF»
 */
abstract class «this.name.asBaseClass()»«IF this.hasSuperClass()» extends «this.getSuperClass().name»«ENDIF» {

  /**
   * @see Controller::doExecute()
   */
  protected function doExecute($method=null) {
    $method = $method != null ? $method : 'executeFallback';
    if (method_exists($this, $method)) {
      // handle request/response parameters
      $request = $this->getRequest();
      $response = $this->getResponse();
      $params = [];
      «EXPAND operation(this) FOREACH this.getOperations()-»

      call_user_func_array([$this, $method], $params);
    }
    else {
      throw new \Exception("The method '".$method."' is not defined in class ".get_class($this));
    }
  }

  /**
   * Handle a validation exception.
   * NOTE: Subclasses override this method for custom exception handling.
   * @param $ex ValidationException
   */
  protected function validationFailed(ValidationException $ex) {}

  /**
   * Fallback method to execute, if no concrete method is defined for the request
   * NOTE: Subclasses implement this method, if they must handle requests
   * that do not map to a concrete method.
   */
  protected function executeFallback() {
    throw new \Exception(get_class($this).' must implement method executeFallback.');
  }
}
«ENDFILE-»
«ENDDEFINE»

«REM» operation --------------------------------------------------«ENDREM»
«DEFINE operation(Chronos::ChiController controller) FOR uml::Operation-»
  «IF this.ownedParameter.size > 0-»
      if ($method == '«this.name»') {
    «FOREACH this.ownedParameter.select(e|e.direction.toString().matches(".*in.*")) AS p-»
        try {
          $params['«p.name»'] = $request->getValue('«p.name»', «IF p.defaultValue.stringValue().isNullOrEmpty()»null«ELSE»«p.defaultValue.quoteValue(p.type, "'")»«ENDIF», $this->getValidator('«p.name»', '«p.type.name»'));
        }
        catch (ValidationException $ex) {
          $params['«p.name»'] = null;
          $this->validationFailed($ex);
        }
    «ENDFOREACH-»
    «FOREACH this.ownedParameter.select(e|e.direction.toString().matches(".*out.*")) AS p-»
      «IF p.direction.toString() == "inout"-»
        $response->setValue('«p.name»', $params['«p.name»']);
      «ELSE-»
        $response->setValue('«p.name»', «IF p.getUpper() != 1»[]«ELSEIF p.defaultValue.stringValue().isNullOrEmpty()»null«ELSE»«p.defaultValue.quoteValue(p.type, "'")»«ENDIF»);
      «ENDIF-»
    «ENDFOREACH-»
      }
  «ENDIF-»
«ENDDEFINE»