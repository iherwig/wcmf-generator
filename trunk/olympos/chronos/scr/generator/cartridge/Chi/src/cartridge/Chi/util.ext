import uml;
import Chronos;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::util;
extension common::naming;

extension cartridge::ChronosCommon::naming;
extension cartridge::ChronosCommon::domain::ChiNode;
extension cartridge::ChronosCommon::domain::ChiManyToMany;

extension cartridge::ChiCmf::extensions::globals;
extension cartridge::ChiCmf::extensions::util;
extension cartridge::ChiCmf::extensions::umlutils;

List[Chronos::ChiNode] getModelClasses(uml::Package this):
	this.allOwnedElements().typeSelect(Chronos::ChiNode).
		select(
			e|e.isApplicationClass() &&
			e.getQualifiedName() != RequiredNodeSuperClass() &&
			e.isAbstract.boolString() == "false" &&
			!e.isManyToMany()
		)
;

List[uml::Package] getModelPackages(uml::Model this):
	this.allOwnedElements().typeSelect(uml::Package).selectFirst(e|e.getQualifiedName().startsWith(DomainPackageAbsolute(this))).getModelPackages({})
;

List[uml::Package] getModelPackages(Chronos::ChiDiagram this, List[uml::Package] list):
	list
;

List[uml::Package] getModelPackages(uml::Package this, List[uml::Package] list):
	this.getQualifiedName().startsWith(DomainPackageAbsolute(this.getModel()))
	// only add packages that contain model classes or other packages (this.ownedElement seems to contain 'this' too)
	&& (this.getModelClasses().size > 0 || this.ownedElement.typeSelect(uml::Package).size > 1)
	?
		list.add(this)
	 :
		Void
	->
	this.ownedElement.typeSelect(uml::Package).getModelPackages(list) ->
	list
;

/**
 * Get the full package name for cwe (includes application/ prefix and sanitizing)
 */
String getChiFullPackageName(uml::PackageableElement this):
	("application." + this.getFullPackageName()).replaceAll(" ", "_")
;

/**
 * Get the filename of a cwe package
 */
String getChiPackageFileName(uml::Package this):
	(this.getChiPackageName().asPath() + ".class.js")
;

/**
 * Get the fully qualified name of a cwe package
 */
String getChiPackageName(uml::Package this):
	(this.getChiFullPackageName() + "." + this.name.toFirstUpper() + "_package").replaceAll(" ", "_")
;

String sanitizeJsString(String input):
	input.replaceAll("\\\"", "\\\\\"").replaceAll("\\n", "\\\\n")
;

/**
 * Control specific functions
 */
String getComboBoxConfig(String inputType):
	let listType = inputType.split(':').first().split('#').last():
		let listDef = inputType.split(':').last():
			listType == "fix" ?
				"data: [[\"" + listDef.replaceAll('\\[', '","').replaceAll('\\]', '"').replaceAll('\\|', '],["') + "]]"
			:
				"targetChiModelElementId: \"" + listDef + "\""
;
String getComboBoxClass(String inputType):
	let listType = inputType.split(':').first().split('#').last():
	listType == "fix" ? "StaticComboBox" : "ComboBox"
;
