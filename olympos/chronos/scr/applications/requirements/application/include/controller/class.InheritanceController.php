<?php
/*
 * Copyright (c) 2011 The Olympos Development Team.
 *
 * http://sourceforge.net/projects/olympos/
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by wCMFGenerator 3.0.0018 from requirements.uml on Mon Mar 21 15:09:16 CET 2011.
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."wcmf/lib/presentation/class.Controller.php");
// PROTECTED REGION ID(application/include/controller/class.InheritanceController.php/Import) ENABLED START
// PROTECTED REGION END

/**
 * @class InheritanceController
 * @ingroup Controller
 * @brief Retrieves inherited attributes for a given ChiNode
 *
 * <b>Input actions:</b>
 * - @em loadInheritedAttributes Retrieves inherited attributes for a given ChiNode
 * - @em doesClassContainAttribute Checks if a given ChiNode contains a given ChiValue (directly or inherited)
 *
 * <b>Output actions:</b>
 * - @em failure If a fatal error occurs
 * - @em ok In any other case
 *
 * @param[in] node OID of class for which to retrieve inherited attribuets
 * @param[in] attribute OID of attribute which should be checked (only for action doesClassContainAttribute)
 * @param[out] inheritedAttributes Inherited attributes for the given class as array of ChiValue objects (only for action loadInheritedAttributes)
 * @param[out] attributeFound true if the class contains the attribute
 *
 * The following configuration settings are defined for this controller:
 *
 * [actionmapping]
 * ??loadInheritedAttributes = InheritanceController
 *
 * [views]
 *
 * @author
 * @version 1.0
 */
class InheritanceController extends Controller
{
	// PROTECTED REGION ID(application/include/controller/class.InheritanceController.php/Body) ENABLED START
	/**
	* @see Controller::hasView()
	*/
	function hasView()
	{
		return false;
	}
	
	/**
	 * @see Controller::validate()
	 */
	function validate()
	{
		$nodeOid = $this->_request->getValue('node');
		if (strlen($nodeOid) == 0 || PersistenceFacade::getOIDParameter($nodeOid, 'type') != 'ChiNode')
		{
			$this->appendErrorMsg("Invalid 'node' parameter: ".$nodeOid);
			return false;
		}
		return true;
	}
	
	/**
	 * @see Controller::executeKernel()
	 */
	function executeKernel()
	{
		Log::debug("Inheritance Controller called", __CLASS__);
		$persistenceFacade = PersistenceFacade::getInstance();
		$chiNodeOID = $this->_request->getValue('node');
			
		// execute actions
		if ($this->_request->getAction() == 'loadInheritedAttributes')
		{
			Log::debug("Retrieving ".$chiNodeOID, __CLASS__);
			$chiNode = $persistenceFacade->load($chiNodeOID);
			$superclassAttributes = $this->getSuperclassAttributes($chiNode);
			foreach ($superclassAttributes as $superclassAttribute) {
				Log::debug($superclassAttribute->getDisplayName().":".$superclassAttribute->getId(), __CLASS__);
			}
			$this->_response->setValue('inheritedAttributes', $superclassAttributes);
		}
		if ($this->_request->getAction() == 'doesClassContainAttribute')
		{
			$chiValueOID = $this->_request->getValue('attribute');
			Log::debug("Checking if $chiValueOID is part of $chiNodeOID");
			$chiNode = $persistenceFacade->load($chiNodeOID);
				
			$this->_response->setValue('attributeFound', false);
				
			if (in_array($chiValueOID, $chiNode->getProperty('childoids'))) {
				// First check if the attribute is part of the class itself
				$this->_response->setValue('attributeFound', true);
			}
			else {
				// Otherwise we have to check if the attribute is inherited from a superclass
				$superclassAttributes = $this->getSuperclassAttributes($chiNode);
				foreach ($superclassAttributes as $superclassAttribute) {
					if ($superclassAttribute->getOid() == $chiValueOID) {
						$this->_response->setValue('attributeFound', true);
						break;
					}
				}
			}
		}
		return false;
	}

	function getSuperclassAttributes($chiNode) {
		Log::debug("Getting superclass attributes for ChiNode:".$chiNode->getId(), __CLASS__);
		$superclassAttributes = array();

		$superclasses = $this->getSuperclasses($chiNode);
		foreach ($superclasses as $superclass) {
			// Add attributes of superclasses that we found
			Log::debug("Retrieving children for ChiNode:".$superclass->getId(), __CLASS__);
			$superclass->loadChildren();
			$superclassChildren = $superclass->getChildren();
			foreach ($superclassChildren as $superclassChild) {
				if ($superclassChild instanceof ChiValue) {
					Log::debug("Found superclass attribute for ".$chiNode->getOid().": ".$superclassChild->getOid(), __CLASS__);
					$superclassAttributes[] = $superclassChild;
				}
			}
				
			// Repeat for superclasses of the superclass
			$superclassAttributes = array_merge($superclassAttributes, $this->getSuperclassAttributes($superclass));
		}
		return $superclassAttributes;
	}

	function getSuperclasses($chiNode) {
		$superclasses = array();

		// Load all children. We are only interested in the ChiNodeSource children which might be part of a generalization association
		Log::debug("Retrieving children for ChiNode:".$chiNode->getId(), __CLASS__);
		
		$chiNode->loadChildren();
		$nodeChildren = $chiNode->getChildren();
		// Search for ChiAssociation of subclass NodeSourceEnd (we only search for associations to the superclass and not to subclasses)
		foreach ($nodeChildren as $nodeChild) {
			if ($nodeChild instanceof NodeSourceEnd) {
				// If the ChiAssociation is a generalization we load the parents to find the other end
				if ($nodeChild->getRelationType() == 'generalization') {
					Log::debug("Retrieving parents for ChiNode:".$nodeChild->getId(), __CLASS__);
					$nodeChild->loadParents();
					$nodeChildParents = $nodeChild->getParents();
					foreach ($nodeChildParents as $nodeChildParent) {
						// The other end of the association is a ChiNode subclass (ChiNodeTarget)
						if ($nodeChildParent instanceof ChiNodeTarget) {
							// Add the superclass that was found to the result array
							$persistenceFacade = PersistenceFacade::getInstance();
							$superclass = $persistenceFacade->create("ChiNode");
							$nodeChildParent->copyValues($superclass);
							$superclass->setProperty("parentoids", $nodeChildParent->getProperty("parentoids"));
							
							// Workaround for child with wrong role
							$childoids = $nodeChildParent->getProperty("childoids");
							array_splice($childoids, array_search($nodeChild->getOid(), $childoids), 1);
							$superclass->setProperty("childoids", $childoids);
							$superclasses[] = $superclass;
						}
					}
				}
			}
		}
		return $superclasses;
	}
	// PROTECTED REGION END

}
?>
