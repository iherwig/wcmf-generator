<?php
/*
 * Copyright (c) 2009 The Olympos Development Team.
 * 
 * http://sourceforge.net/projects/olympos/
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by wCMFGenerator 3.0.0017 from requirements.uml on Mon Aug 03 15:15:26 CEST 2009. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.EntityBase.php");

/**
 * @class Counter
 * Counter description: the class counter hosts counter properties for all the objects actually supportedby the system.
 * This class is a single tone and exisst only one time in each CWM instance.
 *
 * @author 
 * @version 1.0
 */
class CounterBase extends EntityBase
{
    function CounterBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::EntityBase($oid, 'Counter');
      else
        parent::EntityBase($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("Counter");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("the class counter hosts counter properties for all the objects actually supportedby the system. This class is a single tone and exisst only one time in each CWM instance.");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'ChiGoal') $displayName = Message::get("ChiGoal");
      if ($name == 'ChiRequirement') $displayName = Message::get("ChiRequirement");
      if ($name == 'ChiFeature') $displayName = Message::get("ChiFeature");
      if ($name == 'ChiIssue') $displayName = Message::get("ChiIssue");
      if ($name == 'ChiBusinessUseCase') $displayName = Message::get("ChiBusinessUseCase");
      if ($name == 'ChiBusinessProcess') $displayName = Message::get("ChiBusinessProcess");
      if ($name == 'ChiBusinessUseCaseCore') $displayName = Message::get("ChiBusinessUseCaseCore");
      if ($name == 'ChiBusinessPartnerActive') $displayName = Message::get("ChiBusinessPartnerActive");
      if ($name == 'ChiBusinessPartnerPassive') $displayName = Message::get("ChiBusinessPartnerPassive");
      if ($name == 'ChiWorkerExternal') $displayName = Message::get("ChiWorkerExternal");
      if ($name == 'ChiWorkerInternal') $displayName = Message::get("ChiWorkerInternal");
      if ($name == 'ChiWorker') $displayName = Message::get("ChiWorker");
      if ($name == 'ChiBusinessPartner') $displayName = Message::get("ChiBusinessPartner");
      if ($name == 'ChiController') $displayName = Message::get("ChiController");
      if ($name == 'ChiNode') $displayName = Message::get("ChiNode");
      if ($name == 'ChiValue') $displayName = Message::get("ChiValue");
      if ($name == 'ChiView') $displayName = Message::get("ChiView");
      if ($name == 'Operation') $displayName = Message::get("Operation");
      if ($name == 'Activity') $displayName = Message::get("Activity");
      if ($name == 'ActivityDecision') $displayName = Message::get("ActivityDecision");
      if ($name == 'ActivityReceive') $displayName = Message::get("ActivityReceive");
      if ($name == 'ActivitySend') $displayName = Message::get("ActivitySend");
      if ($name == 'ActivityInitial') $displayName = Message::get("ActivityInitial");
      if ($name == 'ActivityFinal') $displayName = Message::get("ActivityFinal");
      if ($name == 'ChiSystem') $displayName = Message::get("ChiSystem");
      if ($name == 'created') $displayName = Message::get("created");
      if ($name == 'creator') $displayName = Message::get("creator");
      if ($name == 'last_editor') $displayName = Message::get("last_editor");
      if ($name == 'modified') $displayName = Message::get("modified");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'ChiGoal') $description = Message::get("");
      if ($name == 'ChiRequirement') $description = Message::get("");
      if ($name == 'ChiFeature') $description = Message::get("");
      if ($name == 'ChiIssue') $description = Message::get("");
      if ($name == 'ChiBusinessUseCase') $description = Message::get("");
      if ($name == 'ChiBusinessProcess') $description = Message::get("");
      if ($name == 'ChiBusinessUseCaseCore') $description = Message::get("");
      if ($name == 'ChiBusinessPartnerActive') $description = Message::get("");
      if ($name == 'ChiBusinessPartnerPassive') $description = Message::get("");
      if ($name == 'ChiWorkerExternal') $description = Message::get("");
      if ($name == 'ChiWorkerInternal') $description = Message::get("");
      if ($name == 'ChiWorker') $description = Message::get("");
      if ($name == 'ChiBusinessPartner') $description = Message::get("");
      if ($name == 'ChiController') $description = Message::get("");
      if ($name == 'ChiNode') $description = Message::get("");
      if ($name == 'ChiValue') $description = Message::get("");
      if ($name == 'ChiView') $description = Message::get("");
      if ($name == 'Operation') $description = Message::get("");
      if ($name == 'Activity') $description = Message::get("");
      if ($name == 'ActivityDecision') $description = Message::get("");
      if ($name == 'ActivityReceive') $description = Message::get("");
      if ($name == 'ActivitySend') $description = Message::get("");
      if ($name == 'ActivityInitial') $description = Message::get("");
      if ($name == 'ActivityFinal') $description = Message::get("");
      if ($name == 'ChiSystem') $description = Message::get("");
      if ($name == 'created') $description = Message::get("the creation date of this object");
      if ($name == 'creator') $description = Message::get("the user that created this object");
      if ($name == 'last_editor') $description = Message::get("the last user that edited this object");
      if ($name == 'modified') $description = Message::get("the date when this object was modified");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getChiGoal($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiGoal', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiGoal', DATATYPE_ATTRIBUTE);
    }
    function setChiGoal($ChiGoal)
    {
      return $this->setValue('ChiGoal', $ChiGoal, DATATYPE_ATTRIBUTE);
    }
    function getChiRequirement($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiRequirement', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiRequirement', DATATYPE_ATTRIBUTE);
    }
    function setChiRequirement($ChiRequirement)
    {
      return $this->setValue('ChiRequirement', $ChiRequirement, DATATYPE_ATTRIBUTE);
    }
    function getChiFeature($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiFeature', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiFeature', DATATYPE_ATTRIBUTE);
    }
    function setChiFeature($ChiFeature)
    {
      return $this->setValue('ChiFeature', $ChiFeature, DATATYPE_ATTRIBUTE);
    }
    function getChiIssue($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiIssue', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiIssue', DATATYPE_ATTRIBUTE);
    }
    function setChiIssue($ChiIssue)
    {
      return $this->setValue('ChiIssue', $ChiIssue, DATATYPE_ATTRIBUTE);
    }
    function getChiBusinessUseCase($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiBusinessUseCase', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiBusinessUseCase', DATATYPE_ATTRIBUTE);
    }
    function setChiBusinessUseCase($ChiBusinessUseCase)
    {
      return $this->setValue('ChiBusinessUseCase', $ChiBusinessUseCase, DATATYPE_ATTRIBUTE);
    }
    function getChiBusinessProcess($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiBusinessProcess', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiBusinessProcess', DATATYPE_ATTRIBUTE);
    }
    function setChiBusinessProcess($ChiBusinessProcess)
    {
      return $this->setValue('ChiBusinessProcess', $ChiBusinessProcess, DATATYPE_ATTRIBUTE);
    }
    function getChiBusinessUseCaseCore($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiBusinessUseCaseCore', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiBusinessUseCaseCore', DATATYPE_ATTRIBUTE);
    }
    function setChiBusinessUseCaseCore($ChiBusinessUseCaseCore)
    {
      return $this->setValue('ChiBusinessUseCaseCore', $ChiBusinessUseCaseCore, DATATYPE_ATTRIBUTE);
    }
    function getChiBusinessPartnerActive($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiBusinessPartnerActive', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiBusinessPartnerActive', DATATYPE_ATTRIBUTE);
    }
    function setChiBusinessPartnerActive($ChiBusinessPartnerActive)
    {
      return $this->setValue('ChiBusinessPartnerActive', $ChiBusinessPartnerActive, DATATYPE_ATTRIBUTE);
    }
    function getChiBusinessPartnerPassive($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiBusinessPartnerPassive', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiBusinessPartnerPassive', DATATYPE_ATTRIBUTE);
    }
    function setChiBusinessPartnerPassive($ChiBusinessPartnerPassive)
    {
      return $this->setValue('ChiBusinessPartnerPassive', $ChiBusinessPartnerPassive, DATATYPE_ATTRIBUTE);
    }
    function getChiWorkerExternal($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiWorkerExternal', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiWorkerExternal', DATATYPE_ATTRIBUTE);
    }
    function setChiWorkerExternal($ChiWorkerExternal)
    {
      return $this->setValue('ChiWorkerExternal', $ChiWorkerExternal, DATATYPE_ATTRIBUTE);
    }
    function getChiWorkerInternal($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiWorkerInternal', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiWorkerInternal', DATATYPE_ATTRIBUTE);
    }
    function setChiWorkerInternal($ChiWorkerInternal)
    {
      return $this->setValue('ChiWorkerInternal', $ChiWorkerInternal, DATATYPE_ATTRIBUTE);
    }
    function getChiWorker($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiWorker', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiWorker', DATATYPE_ATTRIBUTE);
    }
    function setChiWorker($ChiWorker)
    {
      return $this->setValue('ChiWorker', $ChiWorker, DATATYPE_ATTRIBUTE);
    }
    function getChiBusinessPartner($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiBusinessPartner', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiBusinessPartner', DATATYPE_ATTRIBUTE);
    }
    function setChiBusinessPartner($ChiBusinessPartner)
    {
      return $this->setValue('ChiBusinessPartner', $ChiBusinessPartner, DATATYPE_ATTRIBUTE);
    }
    function getChiController($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiController', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiController', DATATYPE_ATTRIBUTE);
    }
    function setChiController($ChiController)
    {
      return $this->setValue('ChiController', $ChiController, DATATYPE_ATTRIBUTE);
    }
    function getChiNode($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiNode', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiNode', DATATYPE_ATTRIBUTE);
    }
    function setChiNode($ChiNode)
    {
      return $this->setValue('ChiNode', $ChiNode, DATATYPE_ATTRIBUTE);
    }
    function getChiValue($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiValue', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiValue', DATATYPE_ATTRIBUTE);
    }
    function setChiValue($ChiValue)
    {
      return $this->setValue('ChiValue', $ChiValue, DATATYPE_ATTRIBUTE);
    }
    function getChiView($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiView', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiView', DATATYPE_ATTRIBUTE);
    }
    function setChiView($ChiView)
    {
      return $this->setValue('ChiView', $ChiView, DATATYPE_ATTRIBUTE);
    }
    function getOperation($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Operation', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Operation', DATATYPE_ATTRIBUTE);
    }
    function setOperation($Operation)
    {
      return $this->setValue('Operation', $Operation, DATATYPE_ATTRIBUTE);
    }
    function getActivity($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Activity', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Activity', DATATYPE_ATTRIBUTE);
    }
    function setActivity($Activity)
    {
      return $this->setValue('Activity', $Activity, DATATYPE_ATTRIBUTE);
    }
    function getActivityDecision($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ActivityDecision', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ActivityDecision', DATATYPE_ATTRIBUTE);
    }
    function setActivityDecision($ActivityDecision)
    {
      return $this->setValue('ActivityDecision', $ActivityDecision, DATATYPE_ATTRIBUTE);
    }
    function getActivityReceive($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ActivityReceive', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ActivityReceive', DATATYPE_ATTRIBUTE);
    }
    function setActivityReceive($ActivityReceive)
    {
      return $this->setValue('ActivityReceive', $ActivityReceive, DATATYPE_ATTRIBUTE);
    }
    function getActivitySend($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ActivitySend', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ActivitySend', DATATYPE_ATTRIBUTE);
    }
    function setActivitySend($ActivitySend)
    {
      return $this->setValue('ActivitySend', $ActivitySend, DATATYPE_ATTRIBUTE);
    }
    function getActivityInitial($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ActivityInitial', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ActivityInitial', DATATYPE_ATTRIBUTE);
    }
    function setActivityInitial($ActivityInitial)
    {
      return $this->setValue('ActivityInitial', $ActivityInitial, DATATYPE_ATTRIBUTE);
    }
    function getActivityFinal($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ActivityFinal', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ActivityFinal', DATATYPE_ATTRIBUTE);
    }
    function setActivityFinal($ActivityFinal)
    {
      return $this->setValue('ActivityFinal', $ActivityFinal, DATATYPE_ATTRIBUTE);
    }
    function getChiSystem($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('ChiSystem', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('ChiSystem', DATATYPE_ATTRIBUTE);
    }
    function setChiSystem($ChiSystem)
    {
      return $this->setValue('ChiSystem', $ChiSystem, DATATYPE_ATTRIBUTE);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties, $useRegExp=true)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties, $useRegExp);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
