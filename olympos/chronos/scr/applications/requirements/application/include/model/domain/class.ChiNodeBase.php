<?php
/**
 * This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 25.08.08 19:09. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.ChiBase.php");

/**
 * @class ChiNode
 * ChiNode description: 
 *
 * @author Giuseppe Platania
 * @version 1.0
 */
class ChiNodeBase extends ChiBase
{
    function ChiNodeBase($oid=null, $type=null)
    {
    if ($type == null)
      parent::ChiBase($oid, 'ChiNode');
    else
      parent::ChiBase($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ChiNode");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_chicontroller_id') $displayName = Message::get("fk_chicontroller_id");
      if ($name == 'display_value') $displayName = Message::get("display_value");
      if ($name == 'parent_order') $displayName = Message::get("parent_order");
      if ($name == 'child_order') $displayName = Message::get("child_order");
      if ($name == 'pk_name') $displayName = Message::get("pk_name");
      if ($name == 'is_searchable') $displayName = Message::get("is_searchable");
      if ($name == 'orderby') $displayName = Message::get("orderby");
      if ($name == 'is_soap') $displayName = Message::get("is_soap");
      if ($name == 'initparams') $displayName = Message::get("initparams");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_chicontroller_id') $description = Message::get("");
      if ($name == 'display_value') $description = Message::get("The value that is displayed in a list view. a single value or '|' -separated list of values");
      if ($name == 'parent_order') $description = Message::get("The order of the associated parents. a single value or '|' -separated list of values");
      if ($name == 'child_order') $description = Message::get("The order of the associated children. a single value or '|' -separated list of values");
      if ($name == 'pk_name') $description = Message::get("The name of the primary key column on the database (optional). The generator will add this automatically if there is no appropriate attribute.");
      if ($name == 'is_searchable') $description = Message::get("Indicates wether this type should be included in the default search.");
      if ($name == 'orderby') $description = Message::get("Definition of default sorting. Possible values: 'none' (no order), 'sortkey' (generates a 'sortkey' column, that is used for explicit sorting) or any the name of any WCMFValue defined in the node optionally.");
      if ($name == 'is_soap') $description = Message::get("Define if the type should be exposed to the SOAP interface.");
      if ($name == 'initparams') $description = Message::get("Name of the configuration file's (config.ini) section, in which the initial parameters for the corresponding mapper are defined");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkChicontrollerId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chicontroller_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chicontroller_id', DATATYPE_IGNORE);
    }
    function setFkChicontrollerId($fk_chicontroller_id)
    {
      return $this->setValue('fk_chicontroller_id', $fk_chicontroller_id, DATATYPE_IGNORE);
    }
    function getDisplayValue($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('display_value', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('display_value', DATATYPE_ATTRIBUTE);
    }
    function setDisplayValue($display_value)
    {
      return $this->setValue('display_value', $display_value, DATATYPE_ATTRIBUTE);
    }
    function getParentOrder($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('parent_order', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('parent_order', DATATYPE_ATTRIBUTE);
    }
    function setParentOrder($parent_order)
    {
      return $this->setValue('parent_order', $parent_order, DATATYPE_ATTRIBUTE);
    }
    function getChildOrder($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('child_order', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('child_order', DATATYPE_ATTRIBUTE);
    }
    function setChildOrder($child_order)
    {
      return $this->setValue('child_order', $child_order, DATATYPE_ATTRIBUTE);
    }
    function getPkName($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('pk_name', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('pk_name', DATATYPE_ATTRIBUTE);
    }
    function setPkName($pk_name)
    {
      return $this->setValue('pk_name', $pk_name, DATATYPE_ATTRIBUTE);
    }
    function getIsSearchable($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('is_searchable', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('is_searchable', DATATYPE_ATTRIBUTE);
    }
    function setIsSearchable($is_searchable)
    {
      return $this->setValue('is_searchable', $is_searchable, DATATYPE_ATTRIBUTE);
    }
    function getOrderby($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('orderby', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('orderby', DATATYPE_ATTRIBUTE);
    }
    function setOrderby($orderby)
    {
      return $this->setValue('orderby', $orderby, DATATYPE_ATTRIBUTE);
    }
    function getIsSoap($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('is_soap', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('is_soap', DATATYPE_ATTRIBUTE);
    }
    function setIsSoap($is_soap)
    {
      return $this->setValue('is_soap', $is_soap, DATATYPE_ATTRIBUTE);
    }
    function getInitparams($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('initparams', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('initparams', DATATYPE_ATTRIBUTE);
    }
    function setInitparams($initparams)
    {
      return $this->setValue('initparams', $initparams, DATATYPE_ATTRIBUTE);
    }
    function getChiControllerOID()
    {
      $fkValue = $this->getValue('fk_chicontroller_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiController', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiController(&$node)
    {
      if ($node != null)
        $node->addChild($this);
    }
    function getChiControllerParents()
    {
      return $this->getParentsEx(null, 'ChiController', null, null);
    }
    /**
     * @deprecated use getChiValueChildren() instead
     */
    function getChiValueList()
    {
      Message::log("use of deprecated method getChiValueList. use getChiValueChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiValueChildren();
    }
    function getChiValueChildren()
    {
      return $this->getChildrenEx(null, 'ChiValue', array('fk_chinode_id' => $this->getDBID()), null);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
   /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
