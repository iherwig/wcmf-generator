<?php
/**
 * This file was generated by wCMFGenerator 3.0.0018 from requirements.uml on Tue Jun 29 10:42:49 CEST 2010. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.ChiBase.php");

/**
 * @class ProductionRuleSet
 * ProductionRuleSet description: 
 *
 * @author 
 * @version 1.0
 */
class ProductionRuleSetBase extends ChiBase
{
    function ProductionRuleSetBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::__construct($oid, 'ProductionRuleSet');
      else
        parent::__construct($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ProductionRuleSet");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_package_id') $displayName = Message::get("fk_package_id");
      if ($name == 'fk_activityset_id') $displayName = Message::get("fk_activityset_id");
      if ($name == 'Status') $displayName = Message::get("Status");
      if ($name == 'Alias') $displayName = Message::get("Alias");
      if ($name == 'Author') $displayName = Message::get("Author");
      if ($name == 'Version') $displayName = Message::get("Version");
      if ($name == 'Name') $displayName = Message::get("Name");
      if ($name == 'Notes') $displayName = Message::get("Notes");
      if ($name == 'created') $displayName = Message::get("created");
      if ($name == 'creator') $displayName = Message::get("creator");
      if ($name == 'last_editor') $displayName = Message::get("last_editor");
      if ($name == 'modified') $displayName = Message::get("modified");
      if ($name == 'umi') $displayName = Message::get("umi");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_package_id') $description = Message::get("");
      if ($name == 'fk_activityset_id') $description = Message::get("");
      if ($name == 'Status') $description = Message::get("");
      if ($name == 'Alias') $description = Message::get("the Project Id of this object.");
      if ($name == 'Author') $description = Message::get("");
      if ($name == 'Version') $description = Message::get("the model version of this object");
      if ($name == 'Name') $description = Message::get("the name of this object.");
      if ($name == 'Notes') $description = Message::get("the actual description of the object.");
      if ($name == 'created') $description = Message::get("the creation date of this object");
      if ($name == 'creator') $description = Message::get("the user that created this object");
      if ($name == 'last_editor') $description = Message::get("the last user that edited this object");
      if ($name == 'modified') $description = Message::get("the date when this object was modified");
      if ($name == 'umi') $description = Message::get("the model version of this object");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter for properties
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkPackageId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_package_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_package_id', DATATYPE_IGNORE);
    }
    function setFkPackageId($fk_package_id)
    {
      return $this->setValue('fk_package_id', $fk_package_id, DATATYPE_IGNORE);
    }
    function getFkActivitysetId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_activityset_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_activityset_id', DATATYPE_IGNORE);
    }
    function setFkActivitysetId($fk_activityset_id)
    {
      return $this->setValue('fk_activityset_id', $fk_activityset_id, DATATYPE_IGNORE);
    }
    /**
     * Getter/Setter for related objects
     */
    function __call($name, $arguments)
    {
      // foreign key: ActivitySet
      if ($name == 'getActivitySetOID')
    {
      $fkValue = $this->getValue('fk_activityset_id', DATATYPE_IGNORE);
        if ($fkValue != null) {
        return PersistenceFacade::composeOID(array('type' => 'ActivitySet', 'id' => array($fkValue)));
        }
        else {
        return null;
    }
      }
      if ($name == 'setActivitySet')
    {
        $node = &$arguments[0];
      if ($node != null)
        {
          if (!is_a($node, 'node') && !is_a($node, 'Node')) {
            call_user_func_array(array(parent, 'setActivitySet'), $arguments);
          }
          else {
        $this->setValue('fk_activityset_id', $node->getDBID(), DATATYPE_IGNORE);
    }
        }
        return;
      }
      // foreign key: Package
      if ($name == 'getPackageOID')
    {
      $fkValue = $this->getValue('fk_package_id', DATATYPE_IGNORE);
        if ($fkValue != null) {
        return PersistenceFacade::composeOID(array('type' => 'Package', 'id' => array($fkValue)));
        }
        else {
        return null;
    }
      }
      if ($name == 'setPackage')
    {
        $node = &$arguments[0];
      if ($node != null)
        {
          if (!is_a($node, 'node') && !is_a($node, 'Node')) {
            call_user_func_array(array(parent, 'setPackage'), $arguments);
          }
          else {
        $this->setValue('fk_package_id', $node->getDBID(), DATATYPE_IGNORE);
    }
        }
        return;
      }
      // parent: ActivitySet
      if ($name == 'getActivitySetParents') {
      return $this->getParentsEx(null, 'ActivitySet', null, null);
    }
      // parent: Package
      if ($name == 'getPackageParents') {
      return $this->getParentsEx(null, 'Package', null, null);
    }
      // child: ChiObject
      if ($name == 'getChiObjectList')
    {
      Log::warn("use of deprecated method getChiObjectList. use getChiObjectChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiObjectChildren();
    }
      if ($name == 'getChiObjectChildren') {
        return $this->getChildrenEx(null, 'ChiObject', array('fk_productionruleset_id' => $this->getDBID()), null, false);
    }
      // child: Activity
      if ($name == 'getActivityList')
    {
      Log::warn("use of deprecated method getActivityList. use getActivityChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityChildren();
    }
      if ($name == 'getActivityChildren') {
        return $this->getChildrenEx(null, 'Activity', array('fk_productionruleset_id' => $this->getDBID()), null, false);
    }
      // child: ActivityDecision
      if ($name == 'getActivityDecisionList')
    {
      Log::warn("use of deprecated method getActivityDecisionList. use getActivityDecisionChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityDecisionChildren();
    }
      if ($name == 'getActivityDecisionChildren') {
        return $this->getChildrenEx(null, 'ActivityDecision', array('fk_productionruleset_id' => $this->getDBID()), null, false);
    }
      // child: ActivityReceive
      if ($name == 'getActivityReceiveList')
    {
      Log::warn("use of deprecated method getActivityReceiveList. use getActivityReceiveChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityReceiveChildren();
    }
      if ($name == 'getActivityReceiveChildren') {
        return $this->getChildrenEx(null, 'ActivityReceive', array('fk_productionruleset_id' => $this->getDBID()), null, false);
    }
      // child: ActivitySend
      if ($name == 'getActivitySendList')
    {
      Log::warn("use of deprecated method getActivitySendList. use getActivitySendChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivitySendChildren();
    }
      if ($name == 'getActivitySendChildren') {
        return $this->getChildrenEx(null, 'ActivitySend', array('fk_productionruleset_id' => $this->getDBID()), null, false);
    }
      // child: ActivityInitial
      if ($name == 'getActivityInitialList')
    {
      Log::warn("use of deprecated method getActivityInitialList. use getActivityInitialChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityInitialChildren();
    }
      if ($name == 'getActivityInitialChildren') {
        return $this->getChildrenEx(null, 'ActivityInitial', array('fk_productionruleset_id' => $this->getDBID()), null, false);
    }
      // child: ActivityFinal
      if ($name == 'getActivityFinalList')
    {
      Log::warn("use of deprecated method getActivityFinalList. use getActivityFinalChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityFinalChildren();
    }
      if ($name == 'getActivityFinalChildren') {
        return $this->getChildrenEx(null, 'ActivityFinal', array('fk_productionruleset_id' => $this->getDBID()), null, false);
    }
      // child: ProductionRule
      if ($name == 'getProductionRuleList')
    {
      Log::warn("use of deprecated method getProductionRuleList. use getProductionRuleChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getProductionRuleChildren();
    }
      if ($name == 'getProductionRuleChildren') {
        return $this->getChildrenEx(null, 'ProductionRule', array('fk_productionruleset_id' => $this->getDBID()), null, false);
    }
      // child: RuleSetVariable
      if ($name == 'getRuleSetVariableList')
    {
      Log::warn("use of deprecated method getRuleSetVariableList. use getRuleSetVariableChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getRuleSetVariableChildren();
    }
      if ($name == 'getRuleSetVariableChildren') {
        return $this->getChildrenEx(null, 'RuleSetVariable', array('fk_productionruleset_id' => $this->getDBID()), null, false);
    }
      // child: Figure
      if ($name == 'getFigureList')
    {
      Log::warn("use of deprecated method getFigureList. use getFigureChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getFigureChildren();
    }
      if ($name == 'getFigureChildren') {
        return $this->getChildrenEx(null, 'Figure', array('fk_productionruleset_id' => $this->getDBID()), null, false);
    }
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties, $useRegExp=true)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties, $useRegExp);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
