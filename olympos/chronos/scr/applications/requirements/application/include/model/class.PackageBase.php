<?php
/**
 * This file was generated by wCMFGenerator 3.0.0018 from requirements.uml on Thu Jan 13 15:13:14 CET 2011. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.EntityBaseExtended.php");

/**
 * @class Package
 * Package description: a package is a class that contains other classes including packages sef
 *
 * @author 
 * @version 1.0
 */
class PackageBase extends EntityBaseExtended
{
    function PackageBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::__construct($oid, 'Package');
      else
        parent::__construct($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("Package");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("a package is a class that contains other classes including packages sef");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_package_id') $displayName = Message::get("fk_package_id");
      if ($name == 'fk_model_id') $displayName = Message::get("fk_model_id");
      if ($name == 'umi') $displayName = Message::get("umi");
      if ($name == 'Name') $displayName = Message::get("Name");
      if ($name == 'Notes') $displayName = Message::get("Notes");
      if ($name == 'created') $displayName = Message::get("created");
      if ($name == 'creator') $displayName = Message::get("creator");
      if ($name == 'last_editor') $displayName = Message::get("last_editor");
      if ($name == 'modified') $displayName = Message::get("modified");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_package_id') $description = Message::get("");
      if ($name == 'fk_model_id') $description = Message::get("");
      if ($name == 'umi') $description = Message::get("the model version of this object");
      if ($name == 'Name') $description = Message::get("the name of this object.");
      if ($name == 'Notes') $description = Message::get("the actual description of the object.");
      if ($name == 'created') $description = Message::get("the creation date of this object");
      if ($name == 'creator') $description = Message::get("the user that created this object");
      if ($name == 'last_editor') $description = Message::get("the last user that edited this object");
      if ($name == 'modified') $description = Message::get("the date when this object was modified");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter for properties
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkPackageId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_package_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_package_id', DATATYPE_IGNORE);
    }
    function setFkPackageId($fk_package_id)
    {
      return $this->setValue('fk_package_id', $fk_package_id, DATATYPE_IGNORE);
    }
    function getFkModelId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_model_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_model_id', DATATYPE_IGNORE);
    }
    function setFkModelId($fk_model_id)
    {
      return $this->setValue('fk_model_id', $fk_model_id, DATATYPE_IGNORE);
    }
    function getUmi($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('umi', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('umi', DATATYPE_ATTRIBUTE);
    }
    function setUmi($umi)
    {
      return $this->setValue('umi', $umi, DATATYPE_ATTRIBUTE);
    }
    function getSortkey()
    {
      return $this->getValue('sortkey', DATATYPE_IGNORE);
    }
    function setSortkey($sortkey)
    {
      return $this->setValue('sortkey', $sortkey, DATATYPE_IGNORE);
    }
    /**
     * Getter/Setter for related objects
     */
    function __call($name, $arguments)
    {
      // foreign key: Model
      if ($name == 'getModelOID')
    {
      $fkValue = $this->getValue('fk_model_id', DATATYPE_IGNORE);
        if ($fkValue != null) {
        return PersistenceFacade::composeOID(array('type' => 'Model', 'id' => array($fkValue)));
        }
        else {
        return null;
    }
      }
      if ($name == 'setModel')
    {
        $node = &$arguments[0];
      if ($node != null)
        {
          if (!is_a($node, 'node') && !is_a($node, 'Node')) {
            call_user_func_array(array(parent, 'setModel'), $arguments);
          }
          else {
        $this->setValue('fk_model_id', $node->getDBID(), DATATYPE_IGNORE);
    }
        }
        return;
      }
      // foreign key: Package
      if ($name == 'getPackageOID')
    {
      $fkValue = $this->getValue('fk_package_id', DATATYPE_IGNORE);
        if ($fkValue != null) {
        return PersistenceFacade::composeOID(array('type' => 'Package', 'id' => array($fkValue)));
        }
        else {
        return null;
    }
      }
      if ($name == 'setPackage')
    {
        $node = &$arguments[0];
      if ($node != null)
        {
          if (!is_a($node, 'node') && !is_a($node, 'Node')) {
            call_user_func_array(array(parent, 'setPackage'), $arguments);
          }
          else {
        $this->setValue('fk_package_id', $node->getDBID(), DATATYPE_IGNORE);
    }
        }
        return;
      }
      // parent: Model
      if ($name == 'getModelParents') {
      return $this->getParentsEx(null, 'Model', null, null);
    }
      // parent: Package
      if ($name == 'getPackageParents') {
      return $this->getParentsEx(null, 'Package', null, null);
    }
      // child: ChiBase
      if ($name == 'getChiBaseList')
    {
      Log::warn("use of deprecated method getChiBaseList. use getChiBaseChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiBaseChildren();
    }
      if ($name == 'getChiBaseChildren') {
        return $this->getChildrenEx(null, 'ChiBase', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: Package
      if ($name == 'getPackageList')
    {
      Log::warn("use of deprecated method getPackageList. use getPackageChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getPackageChildren();
    }
      if ($name == 'getPackageChildren') {
        return $this->getChildrenEx(null, 'Package', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: Diagram
      if ($name == 'getDiagramList')
    {
      Log::warn("use of deprecated method getDiagramList. use getDiagramChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getDiagramChildren();
    }
      if ($name == 'getDiagramChildren') {
        return $this->getChildrenEx(null, 'Diagram', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: Glossary
      if ($name == 'getGlossaryList')
    {
      Log::warn("use of deprecated method getGlossaryList. use getGlossaryChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getGlossaryChildren();
    }
      if ($name == 'getGlossaryChildren') {
        return $this->getChildrenEx(null, 'Glossary', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: Property
      if ($name == 'getPropertyList')
    {
      Log::warn("use of deprecated method getPropertyList. use getPropertyChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getPropertyChildren();
    }
      if ($name == 'getPropertyChildren') {
        return $this->getChildrenEx(null, 'Property', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiValue
      if ($name == 'getChiValueList')
    {
      Log::warn("use of deprecated method getChiValueList. use getChiValueChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiValueChildren();
    }
      if ($name == 'getChiValueChildren') {
        return $this->getChildrenEx(null, 'ChiValue', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: Feature
      if ($name == 'getFeatureList')
    {
      Log::warn("use of deprecated method getFeatureList. use getFeatureChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getFeatureChildren();
    }
      if ($name == 'getFeatureChildren') {
        return $this->getChildrenEx(null, 'Feature', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiClass
      if ($name == 'getChiClassList')
    {
      Log::warn("use of deprecated method getChiClassList. use getChiClassChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiClassChildren();
    }
      if ($name == 'getChiClassChildren') {
        return $this->getChildrenEx(null, 'ChiClass', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiView
      if ($name == 'getChiViewList')
    {
      Log::warn("use of deprecated method getChiViewList. use getChiViewChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiViewChildren();
    }
      if ($name == 'getChiViewChildren') {
        return $this->getChildrenEx(null, 'ChiView', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiController
      if ($name == 'getChiControllerList')
    {
      Log::warn("use of deprecated method getChiControllerList. use getChiControllerChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiControllerChildren();
    }
      if ($name == 'getChiControllerChildren') {
        return $this->getChildrenEx(null, 'ChiController', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiNode
      if ($name == 'getChiNodeList')
    {
      Log::warn("use of deprecated method getChiNodeList. use getChiNodeChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiNodeChildren();
    }
      if ($name == 'getChiNodeChildren') {
        return $this->getChildrenEx(null, 'ChiNode', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiNodeManyToMany
      if ($name == 'getChiNodeManyToManyList')
    {
      Log::warn("use of deprecated method getChiNodeManyToManyList. use getChiNodeManyToManyChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiNodeManyToManyChildren();
    }
      if ($name == 'getChiNodeManyToManyChildren') {
        return $this->getChildrenEx(null, 'ChiNodeManyToMany', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: Operation
      if ($name == 'getOperationList')
    {
      Log::warn("use of deprecated method getOperationList. use getOperationChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getOperationChildren();
    }
      if ($name == 'getOperationChildren') {
        return $this->getChildrenEx(null, 'Operation', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiIssue
      if ($name == 'getChiIssueList')
    {
      Log::warn("use of deprecated method getChiIssueList. use getChiIssueChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiIssueChildren();
    }
      if ($name == 'getChiIssueChildren') {
        return $this->getChildrenEx(null, 'ChiIssue', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiFeature
      if ($name == 'getChiFeatureList')
    {
      Log::warn("use of deprecated method getChiFeatureList. use getChiFeatureChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiFeatureChildren();
    }
      if ($name == 'getChiFeatureChildren') {
        return $this->getChildrenEx(null, 'ChiFeature', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiRequirement
      if ($name == 'getChiRequirementList')
    {
      Log::warn("use of deprecated method getChiRequirementList. use getChiRequirementChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiRequirementChildren();
    }
      if ($name == 'getChiRequirementChildren') {
        return $this->getChildrenEx(null, 'ChiRequirement', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiGoal
      if ($name == 'getChiGoalList')
    {
      Log::warn("use of deprecated method getChiGoalList. use getChiGoalChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiGoalChildren();
    }
      if ($name == 'getChiGoalChildren') {
        return $this->getChildrenEx(null, 'ChiGoal', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiBusinessUseCase
      if ($name == 'getChiBusinessUseCaseList')
    {
      Log::warn("use of deprecated method getChiBusinessUseCaseList. use getChiBusinessUseCaseChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiBusinessUseCaseChildren();
    }
      if ($name == 'getChiBusinessUseCaseChildren') {
        return $this->getChildrenEx(null, 'ChiBusinessUseCase', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiBusinessUseCaseCore
      if ($name == 'getChiBusinessUseCaseCoreList')
    {
      Log::warn("use of deprecated method getChiBusinessUseCaseCoreList. use getChiBusinessUseCaseCoreChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiBusinessUseCaseCoreChildren();
    }
      if ($name == 'getChiBusinessUseCaseCoreChildren') {
        return $this->getChildrenEx(null, 'ChiBusinessUseCaseCore', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiBusinessProcess
      if ($name == 'getChiBusinessProcessList')
    {
      Log::warn("use of deprecated method getChiBusinessProcessList. use getChiBusinessProcessChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiBusinessProcessChildren();
    }
      if ($name == 'getChiBusinessProcessChildren') {
        return $this->getChildrenEx(null, 'ChiBusinessProcess', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: Actor
      if ($name == 'getActorList')
    {
      Log::warn("use of deprecated method getActorList. use getActorChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActorChildren();
    }
      if ($name == 'getActorChildren') {
        return $this->getChildrenEx(null, 'Actor', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiBusinessPartner
      if ($name == 'getChiBusinessPartnerList')
    {
      Log::warn("use of deprecated method getChiBusinessPartnerList. use getChiBusinessPartnerChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiBusinessPartnerChildren();
    }
      if ($name == 'getChiBusinessPartnerChildren') {
        return $this->getChildrenEx(null, 'ChiBusinessPartner', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiBusinessPartnerPassive
      if ($name == 'getChiBusinessPartnerPassiveList')
    {
      Log::warn("use of deprecated method getChiBusinessPartnerPassiveList. use getChiBusinessPartnerPassiveChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiBusinessPartnerPassiveChildren();
    }
      if ($name == 'getChiBusinessPartnerPassiveChildren') {
        return $this->getChildrenEx(null, 'ChiBusinessPartnerPassive', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiBusinessPartnerActive
      if ($name == 'getChiBusinessPartnerActiveList')
    {
      Log::warn("use of deprecated method getChiBusinessPartnerActiveList. use getChiBusinessPartnerActiveChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiBusinessPartnerActiveChildren();
    }
      if ($name == 'getChiBusinessPartnerActiveChildren') {
        return $this->getChildrenEx(null, 'ChiBusinessPartnerActive', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiWorker
      if ($name == 'getChiWorkerList')
    {
      Log::warn("use of deprecated method getChiWorkerList. use getChiWorkerChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiWorkerChildren();
    }
      if ($name == 'getChiWorkerChildren') {
        return $this->getChildrenEx(null, 'ChiWorker', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiWorkerInternal
      if ($name == 'getChiWorkerInternalList')
    {
      Log::warn("use of deprecated method getChiWorkerInternalList. use getChiWorkerInternalChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiWorkerInternalChildren();
    }
      if ($name == 'getChiWorkerInternalChildren') {
        return $this->getChildrenEx(null, 'ChiWorkerInternal', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiWorkerExternal
      if ($name == 'getChiWorkerExternalList')
    {
      Log::warn("use of deprecated method getChiWorkerExternalList. use getChiWorkerExternalChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiWorkerExternalChildren();
    }
      if ($name == 'getChiWorkerExternalChildren') {
        return $this->getChildrenEx(null, 'ChiWorkerExternal', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: RuleVariable
      if ($name == 'getRuleVariableList')
    {
      Log::warn("use of deprecated method getRuleVariableList. use getRuleVariableChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getRuleVariableChildren();
    }
      if ($name == 'getRuleVariableChildren') {
        return $this->getChildrenEx(null, 'RuleVariable', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: RuleSetVariable
      if ($name == 'getRuleSetVariableList')
    {
      Log::warn("use of deprecated method getRuleSetVariableList. use getRuleSetVariableChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getRuleSetVariableChildren();
    }
      if ($name == 'getRuleSetVariableChildren') {
        return $this->getChildrenEx(null, 'RuleSetVariable', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: RuleCondition
      if ($name == 'getRuleConditionList')
    {
      Log::warn("use of deprecated method getRuleConditionList. use getRuleConditionChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getRuleConditionChildren();
    }
      if ($name == 'getRuleConditionChildren') {
        return $this->getChildrenEx(null, 'RuleCondition', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: RuleAction
      if ($name == 'getRuleActionList')
    {
      Log::warn("use of deprecated method getRuleActionList. use getRuleActionChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getRuleActionChildren();
    }
      if ($name == 'getRuleActionChildren') {
        return $this->getChildrenEx(null, 'RuleAction', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ProductionRuleSet
      if ($name == 'getProductionRuleSetList')
    {
      Log::warn("use of deprecated method getProductionRuleSetList. use getProductionRuleSetChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getProductionRuleSetChildren();
    }
      if ($name == 'getProductionRuleSetChildren') {
        return $this->getChildrenEx(null, 'ProductionRuleSet', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ProductionRule
      if ($name == 'getProductionRuleList')
    {
      Log::warn("use of deprecated method getProductionRuleList. use getProductionRuleChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getProductionRuleChildren();
    }
      if ($name == 'getProductionRuleChildren') {
        return $this->getChildrenEx(null, 'ProductionRule', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiSystem
      if ($name == 'getChiSystemList')
    {
      Log::warn("use of deprecated method getChiSystemList. use getChiSystemChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiSystemChildren();
    }
      if ($name == 'getChiSystemChildren') {
        return $this->getChildrenEx(null, 'ChiSystem', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ActivityFinal
      if ($name == 'getActivityFinalList')
    {
      Log::warn("use of deprecated method getActivityFinalList. use getActivityFinalChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityFinalChildren();
    }
      if ($name == 'getActivityFinalChildren') {
        return $this->getChildrenEx(null, 'ActivityFinal', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ActivityInitial
      if ($name == 'getActivityInitialList')
    {
      Log::warn("use of deprecated method getActivityInitialList. use getActivityInitialChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityInitialChildren();
    }
      if ($name == 'getActivityInitialChildren') {
        return $this->getChildrenEx(null, 'ActivityInitial', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ActivitySend
      if ($name == 'getActivitySendList')
    {
      Log::warn("use of deprecated method getActivitySendList. use getActivitySendChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivitySendChildren();
    }
      if ($name == 'getActivitySendChildren') {
        return $this->getChildrenEx(null, 'ActivitySend', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ActivityReceive
      if ($name == 'getActivityReceiveList')
    {
      Log::warn("use of deprecated method getActivityReceiveList. use getActivityReceiveChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityReceiveChildren();
    }
      if ($name == 'getActivityReceiveChildren') {
        return $this->getChildrenEx(null, 'ActivityReceive', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ActivityDecision
      if ($name == 'getActivityDecisionList')
    {
      Log::warn("use of deprecated method getActivityDecisionList. use getActivityDecisionChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityDecisionChildren();
    }
      if ($name == 'getActivityDecisionChildren') {
        return $this->getChildrenEx(null, 'ActivityDecision', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: Activity
      if ($name == 'getActivityList')
    {
      Log::warn("use of deprecated method getActivityList. use getActivityChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivityChildren();
    }
      if ($name == 'getActivityChildren') {
        return $this->getChildrenEx(null, 'Activity', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ChiObject
      if ($name == 'getChiObjectList')
    {
      Log::warn("use of deprecated method getChiObjectList. use getChiObjectChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getChiObjectChildren();
    }
      if ($name == 'getChiObjectChildren') {
        return $this->getChildrenEx(null, 'ChiObject', array('fk_package_id' => $this->getDBID()), null, false);
    }
      // child: ActivitySet
      if ($name == 'getActivitySetList')
    {
      Log::warn("use of deprecated method getActivitySetList. use getActivitySetChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__);
      return $this->getActivitySetChildren();
    }
      if ($name == 'getActivitySetChildren') {
        return $this->getChildrenEx(null, 'ActivitySet', array('fk_package_id' => $this->getDBID()), null, false);
    }
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties, $useRegExp=true)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties, $useRegExp);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
