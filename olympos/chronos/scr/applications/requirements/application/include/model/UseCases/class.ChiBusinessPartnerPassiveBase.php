<?php
/*
 * Copyright (c) 2009 The Olympos Development Team.
 *
 * http://sourceforge.net/projects/olympos/
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by wCMFGenerator 3 from example-data/wcmf/requirements.uml on 2009-05-28 11:58.
 * Manual modifications should be placed inside the protected regions.
 */
require_once (BASE."application/include/model/UseCases/class.ChiBusinessPartner.php");

/**
 * @class ChiBusinessPartnerPassive
 * ChiBusinessPartnerPassive description: A ChiBusinesPartnerPassive is an indirect customer (typically a supplier) of the enterprise.
 *
 * @author
 * @version 1.0
 */
class ChiBusinessPartnerPassiveBase extends ChiBusinessPartner
{
	function ChiBusinessPartnerPassiveBase($oid = null, $type = null)
	{
		if ($type == null)
			parent::ChiBusinessPartner($oid, 'ChiBusinessPartnerPassive');
		else
			parent::ChiBusinessPartner($oid, $type);
	}

	/**
	 * @see PersistentObject::getObjectDisplayName()
	 */
	function getObjectDisplayName()
	{
		return Message::get("ChiBusinessPartnerPassive");
}

/**
 * @see PersistentObject::getObjectDescription()
 */
function getObjectDescription()
{
	return Message::get("A ChiBusinesPartnerPassive is an indirect customer (typically a supplier) of the enterprise.");
}

/**
 * @see PersistentObject::getValueDisplayName()
 */
function getValueDisplayName($name, $type = null)
{
	$displayName = $name;
if ($name == 'id')
	$displayName = Message::get("id");
if ($name == 'fk_package_id')
	$displayName = Message::get("fk_package_id");
if ($name == 'fk_chibusinesspartnerpassive_id')
	$displayName = Message::get("fk_chibusinesspartnerpassive_id");
if ($name == 'Alias')
	$displayName = Message::get("Alias");
if ($name == 'Version')
	$displayName = Message::get("Version");
if ($name == 'Name')
	$displayName = Message::get("Name");
if ($name == 'Notes')
	$displayName = Message::get("Notes");
if ($name == 'Status')
	$displayName = Message::get("Status");
if ($name == 'Author')
	$displayName = Message::get("Author");
if ($name == 'created')
	$displayName = Message::get("created");
if ($name == 'creator')
	$displayName = Message::get("creator");
if ($name == 'last_editor')
	$displayName = Message::get("last_editor");
if ($name == 'modified')
	$displayName = Message::get("modified");
return Message::get($displayName);
}

/**
 * @see PersistentObject::getValueDescription()
 */
function getValueDescription($name, $type = null)
{
	$description = $name;
if ($name == 'id')
	$description = Message::get("");
if ($name == 'fk_package_id')
	$description = Message::get("");
if ($name == 'fk_chibusinesspartnerpassive_id')
	$description = Message::get("");
if ($name == 'Alias')
	$description = Message::get("the Project Id of this object.");
if ($name == 'Version')
	$description = Message::get("the model version of this object");
if ($name == 'Name')
	$description = Message::get("the name of this object.");
if ($name == 'Notes')
	$description = Message::get("the actual description of the object.");
if ($name == 'Status')
	$description = Message::get("the state of this object");
if ($name == 'Author')
	$description = Message::get("the author of this object");
if ($name == 'created')
	$description = Message::get("the creation date of this object");
if ($name == 'creator')
	$description = Message::get("the user that created this object");
if ($name == 'last_editor')
	$description = Message::get("the last user that edited this object");
if ($name == 'modified')
	$description = Message::get("the date when this object was modified");
return Message::get($description);
}

/**
 * See if the node is an association object, that implements a many to many relation
 */
function isManyToManyObject()
{
	return false;
}

/**
 * Getter/Setter
 */
function getId($unconverted = false)
{
	if ($unconverted)
		return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
	else
		return $this->getValue('id', DATATYPE_IGNORE);
}

function setId($id)
{
	return $this->setValue('id', $id, DATATYPE_IGNORE);
}

function getFkPackageId($unconverted = false)
{
	if ($unconverted)
		return $this->getUnconvertedValue('fk_package_id', DATATYPE_IGNORE);
	else
		return $this->getValue('fk_package_id', DATATYPE_IGNORE);
}

function setFkPackageId($fk_package_id)
{
	return $this->setValue('fk_package_id', $fk_package_id, DATATYPE_IGNORE);
}

function getFkChibusinesspartnerpassiveId($unconverted = false)
{
	if ($unconverted)
		return $this->getUnconvertedValue('fk_chibusinesspartnerpassive_id', DATATYPE_IGNORE);
	else
		return $this->getValue('fk_chibusinesspartnerpassive_id', DATATYPE_IGNORE);
}

function setFkChibusinesspartnerpassiveId($fk_chibusinesspartnerpassive_id)
{
	return $this->setValue('fk_chibusinesspartnerpassive_id', $fk_chibusinesspartnerpassive_id, DATATYPE_IGNORE);
}

function getSortkey()
{
	return $this->getValue('sortkey', DATATYPE_IGNORE);
}

function setSortkey($sortkey)
{
	return $this->setValue('sortkey', $sortkey, DATATYPE_IGNORE);
}

function getAuthor($unconverted = false)
{
	if ($unconverted)
		return $this->getUnconvertedValue('Author', DATATYPE_ATTRIBUTE);
	else
		return $this->getValue('Author', DATATYPE_ATTRIBUTE);
}

function setAuthor($author)
{
	return $this->setValue('Author', $author, DATATYPE_ATTRIBUTE);
}

function getStatus($unconverted = false)
{
	if ($unconverted)
		return $this->getUnconvertedValue('Status', DATATYPE_ATTRIBUTE);
	else
		return $this->getValue('Status', DATATYPE_ATTRIBUTE);
}

function setStatus($status)
{
	return $this->setValue('Status', $status, DATATYPE_ATTRIBUTE);
}

function getChiBusinessPartnerPassiveOID()
{
	$fkValue = $this->getValue('fk_chibusinesspartnerpassive_id', DATATYPE_IGNORE);
if ($fkValue != null)
	return PersistenceFacade::composeOID( array ('type'=>'ChiBusinessPartnerPassive', 'id'=> array ($fkValue)));
else
	return null;
}

function setChiBusinessPartnerPassive( & $node)
{
	if ($node != null)
		$this->setValue('fk_chibusinesspartnerpassive_id', $node->getDBID(), DATATYPE_IGNORE);
}

function getPackageOID()
{
	$fkValue = $this->getValue('fk_package_id', DATATYPE_IGNORE);
if ($fkValue != null)
	return PersistenceFacade::composeOID( array ('type'=>'Package', 'id'=> array ($fkValue)));
else
	return null;
}

function setPackage( & $node)
{
	if ($node != null)
		$this->setValue('fk_package_id', $node->getDBID(), DATATYPE_IGNORE);
}

function getChiBusinessPartnerPassiveParents()
{
	return $this->getParentsEx(null, 'ChiBusinessPartnerPassive', null, null);
}

function getPackageParents()
{
	return $this->getParentsEx(null, 'Package', null, null);
}

/**
 * @deprecated use getChiBusinessPartnerPassiveChildren() instead
 */
function getChiBusinessPartnerPassiveList()
{
	Log::warn("use of deprecated method getChiBusinessPartnerPassiveList. use getChiBusinessPartnerPassiveChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__ );
return $this->getChiBusinessPartnerPassiveChildren();
}

function getChiBusinessPartnerPassiveChildren()
{
	return $this->getChildrenEx(null, 'ChiBusinessPartnerPassive', array ('fk_chibusinesspartnerpassive_id'=>$this->getDBID()), null);
}


/**
 * @deprecated use getFigureChildren() instead
 */
function getFigureList()
{
	Log::warn("use of deprecated method getFigureList. use getFigureChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__ );
return $this->getFigureChildren();
}

function getFigureChildren()
{
	return $this->getChildrenEx(null, 'Figure', array ('fk_chibusinesspartnerpassive_id'=>$this->getDBID()), null);
}


/**
 * @deprecated use getNMUCActorChildren() instead
 */
function getNMUCActorList()
{
	Log::warn("use of deprecated method getNMUCActorList. use getNMUCActorChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__ );
return $this->getNMUCActorChildren();
}

function getNMUCActorChildren()
{
	return $this->getChildrenEx(null, 'NMUCActor', array ('fk_chibusinesspartnerpassive_id'=>$this->getDBID()), null);
}


/**
 * @deprecated use getChiBusinessUseCaseChildren() instead
 */
function getChiBusinessUseCaseList()
{
	Log::warn("use of deprecated method getChiBusinessUseCaseList. use getChiBusinessUseCaseChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__ );
return $this->getChiBusinessUseCaseChildren();
}

function getChiBusinessUseCaseChildren()
{
	// the foreign key column does not exist
	return $this->getChildrenEx(null, 'ChiBusinessUseCase', null, null);
}

/**
 * @deprecated use getChiBusinessUseCaseCoreChildren() instead
 */
function getChiBusinessUseCaseCoreList()
{
	Log::warn("use of deprecated method getChiBusinessUseCaseCoreList. use getChiBusinessUseCaseCoreChildren() instead.\n".WCMFException::getStackTrace(), __CLASS__ );
return $this->getChiBusinessUseCaseCoreChildren();
}

function getChiBusinessUseCaseCoreChildren()
{
	// the foreign key column does not exist
	return $this->getChildrenEx(null, 'ChiBusinessUseCaseCore', null, null);
}

/**
 * Node class overrides
 */
 
 /**
 * @see Node::loadChildren()
 * Override this to also load the children of many-to-many relations
 */
function loadChildren($type, $buildDepth = BUILDDEPTH_SINGLE, $forceUpdate = false)
{
	// handle NMUCActor as many-to-many type
	if ($type == 'ChiBusinessUseCase')
	{
		// for every NMUCActor we have to load the ChiBusinessUseCase
		$this->loadChildren('NMUCActor');
	$children = parent::getChildrenEx(null, 'NMUCActor', array ('fk_chibusinesspartnerpassive_id'=>$this->getDBID()), null);
$persistenceFacade = & PersistenceFacade::getInstance();
$grandChildren = array ();
for ($i = 0; $i < sizeof($children); $i++)
{
	if (PersistenceFacade::isValidOID($children[$i]->getChiBusinessUseCaseOID()))
	{
		$grandChild = & $persistenceFacade->load($children[$i]->getChiBusinessUseCaseOID(), BUILDDEPTH_SINGLE);
	if ($grandChild != null)
	{
		// establish connetcion
		$grandChild->addChild($children[$i]);
	$grandChild->setState(STATE_CLEAN);
$children[$i]->setState(STATE_CLEAN);
}
}
}
return;
}
// handle NMUCActor as many-to-many type
if ($type == 'ChiBusinessUseCaseCore')
{
	// for every NMUCActor we have to load the ChiBusinessUseCaseCore
	$this->loadChildren('NMUCActor');
$children = parent::getChildrenEx(null, 'NMUCActor', array ('fk_chibusinesspartnerpassive_id'=>$this->getDBID()), null);
$persistenceFacade = & PersistenceFacade::getInstance();
$grandChildren = array ();
for ($i = 0; $i < sizeof($children); $i++)
{
	if (PersistenceFacade::isValidOID($children[$i]->getChiBusinessUseCaseCoreOID()))
	{
		$grandChild = & $persistenceFacade->load($children[$i]->getChiBusinessUseCaseCoreOID(), BUILDDEPTH_SINGLE);
	if ($grandChild != null)
	{
		// establish connetcion
		$grandChild->addChild($children[$i]);
	$grandChild->setState(STATE_CLEAN);
$children[$i]->setState(STATE_CLEAN);
}
}
}
return;
}
// do default
parent::loadChildren($type, $buildDepth, $forceUpdate);
}

/**
 * @see Node::getChildrenEx()
 * Override this to also get the children of many-to-many relations
 */
function getChildrenEx($oid, $type, $values, $properties)
{
	// handle NMUCActor as many-to-many type
	if ($type == 'ChiBusinessUseCase' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiBusinessUseCase')
	{
		// for every NMUCActor we have to get the ChiBusinessUseCase parents
		$children = parent::getChildrenEx(null, 'NMUCActor', array ('fk_chibusinesspartnerpassive_id'=>$this->getDBID()), null);
	$grandChildren = array ();
$persistenceFacade = & PersistenceFacade::getInstance();
for ($i = 0; $i < sizeof($children); $i++)
{
	// load the parents
	$grandChildrenParents = array ();
foreach ($children[$i]->getProperty('parentoids') as $parentoid)
{
	if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiBusinessUseCase')
	{
		$tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
	if (sizeof($tmpParents) > 0)
	$curChildParent = & $tmpParents[0];
else
	$curChildParent = & $persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
if ($curChildParent != null)
	$grandChildrenParents[sizeof($grandChildrenParents)] = & $curChildParent;
}
}
for ($j = 0; $j < sizeof($grandChildrenParents); $j++)
$grandChildren[sizeof($grandChildren)] = & $grandChildrenParents[$j];
}
return Node::filter($grandChildren, $oid, $type, $values, $properties);
}
// handle NMUCActor as many-to-many type
if ($type == 'ChiBusinessUseCaseCore' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiBusinessUseCaseCore')
{
	// for every NMUCActor we have to get the ChiBusinessUseCaseCore parents
	$children = parent::getChildrenEx(null, 'NMUCActor', array ('fk_chibusinesspartnerpassive_id'=>$this->getDBID()), null);
$grandChildren = array ();
$persistenceFacade = & PersistenceFacade::getInstance();
for ($i = 0; $i < sizeof($children); $i++)
{
	// load the parents
	$grandChildrenParents = array ();
foreach ($children[$i]->getProperty('parentoids') as $parentoid)
{
	if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiBusinessUseCaseCore')
	{
		$tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
	if (sizeof($tmpParents) > 0)
	$curChildParent = & $tmpParents[0];
else
	$curChildParent = & $persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
if ($curChildParent != null)
	$grandChildrenParents[sizeof($grandChildrenParents)] = & $curChildParent;
}
}
for ($j = 0; $j < sizeof($grandChildrenParents); $j++)
$grandChildren[sizeof($grandChildren)] = & $grandChildrenParents[$j];
}
return Node::filter($grandChildren, $oid, $type, $values, $properties);
}
// do default
return parent::getChildrenEx($oid, $type, $values, $properties);
}

/**
 * @see Node::addChild()
 * Override this to insert association objects if necessary
 */
function addChild( & $child, $addtype = ADDCHILD_BACK)
{
	if ($child != null && $child->getType() == 'ChiBusinessUseCase')
	{
		// for every ChiBusinessUseCase we have to insert a NMUCActor
		$persistenceFacade = & PersistenceFacade::getInstance();
	// check if the relation already exists
	$relOID = $persistenceFacade->getFirstOID('NMUCActor', array ('fk_chibusinesspartnerpassive_id'=>$this->getDBID(), 'fk_chibusinessusecase_id'=>$child->getDBID()));
if ($relOID == null)
{
	// add the child only if it is not added already
	$associationNode = & $persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
$associationNode->setChiBusinessPartnerPassive($this);
$associationNode->setChiBusinessUseCase($child);
$child->addChild($associationNode);
}
else
	$associationNode = & $persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
// set child parameter to associationNode and prodeed with default behaviour
$child = & $associationNode;
}
if ($child != null && $child->getType() == 'ChiBusinessUseCaseCore')
{
	// for every ChiBusinessUseCaseCore we have to insert a NMUCActor
	$persistenceFacade = & PersistenceFacade::getInstance();
// check if the relation already exists
$relOID = $persistenceFacade->getFirstOID('NMUCActor', array ('fk_chibusinesspartnerpassive_id'=>$this->getDBID(), 'fk_chibusinessusecasecore_id'=>$child->getDBID()));
if ($relOID == null)
{
	// add the child only if it is not added already
	$associationNode = & $persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
$associationNode->setChiBusinessPartnerPassive($this);
$associationNode->setChiBusinessUseCaseCore($child);
$child->addChild($associationNode);
}
else
	$associationNode = & $persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
// set child parameter to associationNode and prodeed with default behaviour
$child = & $associationNode;
}
// do default
parent::addChild($child, $addtype);
}

/**
 * @see Node::deleteChild()
 * Override this to delete association objects if necessary
 */
function deleteChild($childOID, $reallyDelete = false)
{
	if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiBusinessUseCase')
	{
		// for every ChiBusinessUseCase we have to delete the NMUCActor
		// set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
		$ids = PersistenceFacade::getOIDParameter($childOID, 'id');
	array_unshift($ids, $this->getDBID());
$childOID = PersistenceFacade::composeOID( array ('type'=>'NMUCActor', 'id'=>$ids));
}
if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiBusinessUseCaseCore')
{
	// for every ChiBusinessUseCaseCore we have to delete the NMUCActor
	// set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
	$ids = PersistenceFacade::getOIDParameter($childOID, 'id');
array_unshift($ids, $this->getDBID());
$childOID = PersistenceFacade::composeOID( array ('type'=>'NMUCActor', 'id'=>$ids));
}
// do default
parent::deleteChild($childOID, $reallyDelete);
}

}

?>
