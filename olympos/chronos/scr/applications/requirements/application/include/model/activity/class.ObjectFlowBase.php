<?php
/*
 * Copyright (c) 2009 The Olympos Development Team.
 * 
 * http://sourceforge.net/projects/olympos/
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by wCMFGenerator 3.0.0018 from requirements.uml on Thu Nov 26 12:45:13 CET 2009. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."wcmf/lib/model/class.Node.php");

/**
 * @class ObjectFlow
 * ObjectFlow description: 
 *
 * @author 
 * @version 1.0
 */
class ObjectFlowBase extends Node
{
    function ObjectFlowBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::__construct('ObjectFlow', $oid);
      else
        parent::__construct($type, $oid);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ObjectFlow");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_aobjectflowtarget_id') $displayName = Message::get("fk_aobjectflowtarget_id");
      if ($name == 'fk_aobjectflowsource_id') $displayName = Message::get("fk_aobjectflowsource_id");
      if ($name == 'fk_chiobjectobjectflowsource_id') $displayName = Message::get("fk_chiobjectobjectflowsource_id");
      if ($name == 'fk_chiobjectobjectflowtarget_id') $displayName = Message::get("fk_chiobjectobjectflowtarget_id");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_aobjectflowtarget_id') $description = Message::get("");
      if ($name == 'fk_aobjectflowsource_id') $description = Message::get("");
      if ($name == 'fk_chiobjectobjectflowsource_id') $description = Message::get("");
      if ($name == 'fk_chiobjectobjectflowtarget_id') $description = Message::get("");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return true;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkAobjectflowtargetId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_aobjectflowtarget_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_aobjectflowtarget_id', DATATYPE_IGNORE);
    }
    function setFkAobjectflowtargetId($fk_aobjectflowtarget_id)
    {
      return $this->setValue('fk_aobjectflowtarget_id', $fk_aobjectflowtarget_id, DATATYPE_IGNORE);
    }
    function getFkAobjectflowsourceId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_aobjectflowsource_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_aobjectflowsource_id', DATATYPE_IGNORE);
    }
    function setFkAobjectflowsourceId($fk_aobjectflowsource_id)
    {
      return $this->setValue('fk_aobjectflowsource_id', $fk_aobjectflowsource_id, DATATYPE_IGNORE);
    }
    function getFkChiobjectobjectflowsourceId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chiobjectobjectflowsource_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chiobjectobjectflowsource_id', DATATYPE_IGNORE);
    }
    function setFkChiobjectobjectflowsourceId($fk_chiobjectobjectflowsource_id)
    {
      return $this->setValue('fk_chiobjectobjectflowsource_id', $fk_chiobjectobjectflowsource_id, DATATYPE_IGNORE);
    }
    function getFkChiobjectobjectflowtargetId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chiobjectobjectflowtarget_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chiobjectobjectflowtarget_id', DATATYPE_IGNORE);
    }
    function setFkChiobjectobjectflowtargetId($fk_chiobjectobjectflowtarget_id)
    {
      return $this->setValue('fk_chiobjectobjectflowtarget_id', $fk_chiobjectobjectflowtarget_id, DATATYPE_IGNORE);
    }
    function getChiObjectObjectFlowTargetOID()
    {
      $fkValue = $this->getValue('fk_chiobjectobjectflowtarget_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiObject', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiObjectObjectFlowTarget($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setChiObjectObjectFlowTarget'), $args);
        }
        else {
          $this->setValue('fk_chiobjectobjectflowtarget_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getChiObjectObjectFlowSourceOID()
    {
      $fkValue = $this->getValue('fk_chiobjectobjectflowsource_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiObject', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiObjectObjectFlowSource($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setChiObjectObjectFlowSource'), $args);
        }
        else {
          $this->setValue('fk_chiobjectobjectflowsource_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getAObjectFlowSourceOID()
    {
      $fkValue = $this->getValue('fk_aobjectflowsource_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'Activity', 'id' => array($fkValue)));
      else
        return null;
    }
    function setAObjectFlowSource($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setAObjectFlowSource'), $args);
        }
        else {
          $this->setValue('fk_aobjectflowsource_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getAObjectFlowTargetOID()
    {
      $fkValue = $this->getValue('fk_aobjectflowtarget_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'Activity', 'id' => array($fkValue)));
      else
        return null;
    }
    function setAObjectFlowTarget($node)
    {
      if ($node != null) {
        if (!is_a($node, 'node') && !is_a($node, 'Node')) {
          $args = func_get_args();
          call_user_func_array(array(parent, 'setAObjectFlowTarget'), $args);
        }
        else {
          $this->setValue('fk_aobjectflowtarget_id', $node->getDBID(), DATATYPE_IGNORE);
        }
      }
    }
    function getChiObjectObjectFlowTargetParents()
    {
      return $this->getParentsEx(null, 'ChiObject', null, null);
    }
    function getChiObjectObjectFlowSourceParents()
    {
      return $this->getParentsEx(null, 'ChiObject', null, null);
    }
    function getAObjectFlowSourceParents()
    {
      return $this->getParentsEx(null, 'Activity', null, null);
    }
    function getAObjectFlowTargetParents()
    {
      return $this->getParentsEx(null, 'Activity', null, null);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties, $useRegExp=true)
    {
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties, $useRegExp);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
