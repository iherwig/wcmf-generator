<?php
/**
 * This file was generated by wCMFGenerator 3.0.0004 from ./model/cwm.uml on Wed Feb 11 14:42:15 CET 2009. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(BASE."application/include/model/class.ChiBase.php");

/**
 * @class ChiBusinessUseCase
 * ChiBusinessUseCase description: A Business Use Case is part of a business process that produces an advantage to the enterprise.
 *
 * @author 
 * @version 1.0
 */
class ChiBusinessUseCaseBase extends ChiBase
{
    function ChiBusinessUseCaseBase($oid=null, $type=null)
    {
      if ($type == null)
        parent::ChiBase($oid, 'ChiBusinessUseCase');
      else
        parent::ChiBase($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("ChiBusinessUseCase");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("A Business Use Case is part of a business process that produces an advantage to the enterprise.");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'fk_package_id') $displayName = Message::get("fk_package_id");
      if ($name == 'fk_chifeature_id') $displayName = Message::get("fk_chifeature_id");
      if ($name == 'fk_chibusinessprocess_id') $displayName = Message::get("fk_chibusinessprocess_id");
      if ($name == 'PrimaryActor') $displayName = Message::get("PrimaryActor");
      if ($name == 'OtherActors') $displayName = Message::get("OtherActors");
      if ($name == 'GoalInContext') $displayName = Message::get("GoalInContext");
      if ($name == 'Scope') $displayName = Message::get("Scope");
      if ($name == 'Level') $displayName = Message::get("Level");
      if ($name == 'Stakeholders') $displayName = Message::get("Stakeholders");
      if ($name == 'Precondition') $displayName = Message::get("Precondition");
      if ($name == 'Trigger') $displayName = Message::get("Trigger");
      if ($name == 'MainSuccessScenario') $displayName = Message::get("MainSuccessScenario");
      if ($name == 'Extensions') $displayName = Message::get("Extensions");
      if ($name == 'Alias') $displayName = Message::get("Alias");
      if ($name == 'Version') $displayName = Message::get("Version");
      if ($name == 'Name') $displayName = Message::get("Name");
      if ($name == 'Notes') $displayName = Message::get("Notes");
      if ($name == 'created') $displayName = Message::get("created");
      if ($name == 'creator') $displayName = Message::get("creator");
      if ($name == 'last_editor') $displayName = Message::get("last_editor");
      if ($name == 'modified') $displayName = Message::get("modified");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'fk_package_id') $description = Message::get("");
      if ($name == 'fk_chifeature_id') $description = Message::get("");
      if ($name == 'fk_chibusinessprocess_id') $description = Message::get("");
      if ($name == 'PrimaryActor') $description = Message::get("the main actor of this use case");
      if ($name == 'OtherActors') $description = Message::get("The list of actors associated with the use case. Although this information is contained in the use case itself, it helps to increase the understandability of the use case when the diagram is unavailable.");
      if ($name == 'GoalInContext') $description = Message::get("The goal should implicitly express the actor's intent or purpose of the use case, such as *Enrol Student in Seminar.*");
      if ($name == 'Scope') $description = Message::get("Boundaries in which the use case is operated when invoked (E.g. CMS)");
      if ($name == 'Level') $description = Message::get("Authorizations for operations/actions to be performed against the Chi business objects in scope. Against every object/process 4 CRUD basic operations are possible: Create (Write) Read (Open) Update (Change) Delete  (Destroy)");
      if ($name == 'Stakeholders') $description = Message::get("List of actors that have a special interest (i.e. to be informed every time) in completion of the use case");
      if ($name == 'Precondition') $description = Message::get("A list of the conditions, if any, that must be met before a use case may be invoked. Can be a previous Use case or self the presence of the system in Scope.");
      if ($name == 'Trigger') $description = Message::get("Event that is responsible for invocation of the use case.");
      if ($name == 'MainSuccessScenario') $description = Message::get("The main path of logic an actor follows through a use case. Often referred to as the *happy path* or the *main path* because it describes how the use case works when everything works as it normally should.");
      if ($name == 'Extensions') $description = Message::get("");
      if ($name == 'Alias') $description = Message::get("the Project Id of this object.");
      if ($name == 'Version') $description = Message::get("the model version of this object");
      if ($name == 'Name') $description = Message::get("the name of this object.");
      if ($name == 'Notes') $description = Message::get("the actual description of the object.");
      if ($name == 'created') $description = Message::get("the creation date of this object");
      if ($name == 'creator') $description = Message::get("the user that created this object");
      if ($name == 'last_editor') $description = Message::get("the last user that edited this object");
      if ($name == 'modified') $description = Message::get("the date when this object was modified");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter
     */
    function getId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('id', DATATYPE_IGNORE);
      else
        return $this->getValue('id', DATATYPE_IGNORE);
    }
    function setId($id)
    {
      return $this->setValue('id', $id, DATATYPE_IGNORE);
    }
    function getFkPackageId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_package_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_package_id', DATATYPE_IGNORE);
    }
    function setFkPackageId($fk_package_id)
    {
      return $this->setValue('fk_package_id', $fk_package_id, DATATYPE_IGNORE);
    }
    function getFkChifeatureId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chifeature_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chifeature_id', DATATYPE_IGNORE);
    }
    function setFkChifeatureId($fk_chifeature_id)
    {
      return $this->setValue('fk_chifeature_id', $fk_chifeature_id, DATATYPE_IGNORE);
    }
    function getFkChibusinessprocessId($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('fk_chibusinessprocess_id', DATATYPE_IGNORE);
      else
        return $this->getValue('fk_chibusinessprocess_id', DATATYPE_IGNORE);
    }
    function setFkChibusinessprocessId($fk_chibusinessprocess_id)
    {
      return $this->setValue('fk_chibusinessprocess_id', $fk_chibusinessprocess_id, DATATYPE_IGNORE);
    }
    function getPrimaryActor($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('PrimaryActor', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('PrimaryActor', DATATYPE_ATTRIBUTE);
    }
    function setPrimaryActor($PrimaryActor)
    {
      return $this->setValue('PrimaryActor', $PrimaryActor, DATATYPE_ATTRIBUTE);
    }
    function getOtherActors($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('OtherActors', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('OtherActors', DATATYPE_ATTRIBUTE);
    }
    function setOtherActors($OtherActors)
    {
      return $this->setValue('OtherActors', $OtherActors, DATATYPE_ATTRIBUTE);
    }
    function getGoalInContext($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('GoalInContext', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('GoalInContext', DATATYPE_ATTRIBUTE);
    }
    function setGoalInContext($GoalInContext)
    {
      return $this->setValue('GoalInContext', $GoalInContext, DATATYPE_ATTRIBUTE);
    }
    function getScope($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Scope', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Scope', DATATYPE_ATTRIBUTE);
    }
    function setScope($Scope)
    {
      return $this->setValue('Scope', $Scope, DATATYPE_ATTRIBUTE);
    }
    function getLevel($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Level', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Level', DATATYPE_ATTRIBUTE);
    }
    function setLevel($Level)
    {
      return $this->setValue('Level', $Level, DATATYPE_ATTRIBUTE);
    }
    function getStakeholders($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Stakeholders', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Stakeholders', DATATYPE_ATTRIBUTE);
    }
    function setStakeholders($Stakeholders)
    {
      return $this->setValue('Stakeholders', $Stakeholders, DATATYPE_ATTRIBUTE);
    }
    function getPrecondition($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Precondition', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Precondition', DATATYPE_ATTRIBUTE);
    }
    function setPrecondition($Precondition)
    {
      return $this->setValue('Precondition', $Precondition, DATATYPE_ATTRIBUTE);
    }
    function getTrigger($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Trigger', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Trigger', DATATYPE_ATTRIBUTE);
    }
    function setTrigger($Trigger)
    {
      return $this->setValue('Trigger', $Trigger, DATATYPE_ATTRIBUTE);
    }
    function getMainSuccessScenario($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('MainSuccessScenario', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('MainSuccessScenario', DATATYPE_ATTRIBUTE);
    }
    function setMainSuccessScenario($MainSuccessScenario)
    {
      return $this->setValue('MainSuccessScenario', $MainSuccessScenario, DATATYPE_ATTRIBUTE);
    }
    function getExtensions($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('Extensions', DATATYPE_ATTRIBUTE);
      else
        return $this->getValue('Extensions', DATATYPE_ATTRIBUTE);
    }
    function setExtensions($Extensions)
    {
      return $this->setValue('Extensions', $Extensions, DATATYPE_ATTRIBUTE);
    }
    function getChiBusinessProcessOID()
    {
      $fkValue = $this->getValue('fk_chibusinessprocess_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiBusinessProcess', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiBusinessProcess(&$node)
    {
      if ($node != null)
        $this->setValue('fk_chibusinessprocess_id', $node->getDBID(), DATATYPE_IGNORE);
    }
    function getChiFeatureOID()
    {
      $fkValue = $this->getValue('fk_chifeature_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'ChiFeature', 'id' => array($fkValue)));
      else
        return null;
    }
    function setChiFeature(&$node)
    {
      if ($node != null)
        $this->setValue('fk_chifeature_id', $node->getDBID(), DATATYPE_IGNORE);
    }
    function getPackageOID()
    {
      $fkValue = $this->getValue('fk_package_id', DATATYPE_IGNORE);
      if ($fkValue != null)
        return PersistenceFacade::composeOID(array('type' => 'Package', 'id' => array($fkValue)));
      else
        return null;
    }
    function setPackage(&$node)
    {
      if ($node != null)
        $this->setValue('fk_package_id', $node->getDBID(), DATATYPE_IGNORE);
    }
    function getChiBusinessProcessParents()
    {
      return $this->getParentsEx(null, 'ChiBusinessProcess', null, null);
    }
    function getChiFeatureParents()
    {
      return $this->getParentsEx(null, 'ChiFeature', null, null);
    }
    function getPackageParents()
    {
      return $this->getParentsEx(null, 'Package', null, null);
    }
    /**
     * @deprecated use getNMUCActorChildren() instead
     */
    function getNMUCActorList()
    {
      Message::log("use of deprecated method getNMUCActorList. use getNMUCActorChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getNMUCActorChildren();
    }
    function getNMUCActorChildren()
    {
      return $this->getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
    }
    /**
     * @deprecated use getActorChildren() instead
     */
    function getActorList()
    {
      Message::log("use of deprecated method getActorList. use getActorChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getActorChildren();
    }
    function getActorChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'Actor', null, null);
    }
    /**
     * @deprecated use getChiBusinessPartnerChildren() instead
     */
    function getChiBusinessPartnerList()
    {
      Message::log("use of deprecated method getChiBusinessPartnerList. use getChiBusinessPartnerChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiBusinessPartnerChildren();
    }
    function getChiBusinessPartnerChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiBusinessPartner', null, null);
    }
    /**
     * @deprecated use getChiBusinessPartnerPassiveChildren() instead
     */
    function getChiBusinessPartnerPassiveList()
    {
      Message::log("use of deprecated method getChiBusinessPartnerPassiveList. use getChiBusinessPartnerPassiveChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiBusinessPartnerPassiveChildren();
    }
    function getChiBusinessPartnerPassiveChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiBusinessPartnerPassive', null, null);
    }
    /**
     * @deprecated use getChiBusinessPartnerActiveChildren() instead
     */
    function getChiBusinessPartnerActiveList()
    {
      Message::log("use of deprecated method getChiBusinessPartnerActiveList. use getChiBusinessPartnerActiveChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiBusinessPartnerActiveChildren();
    }
    function getChiBusinessPartnerActiveChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiBusinessPartnerActive', null, null);
    }
    /**
     * @deprecated use getChiWorkerChildren() instead
     */
    function getChiWorkerList()
    {
      Message::log("use of deprecated method getChiWorkerList. use getChiWorkerChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiWorkerChildren();
    }
    function getChiWorkerChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiWorker', null, null);
    }
    /**
     * @deprecated use getChiWorkerInternalChildren() instead
     */
    function getChiWorkerInternalList()
    {
      Message::log("use of deprecated method getChiWorkerInternalList. use getChiWorkerInternalChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiWorkerInternalChildren();
    }
    function getChiWorkerInternalChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiWorkerInternal', null, null);
    }
    /**
     * @deprecated use getChiWorkerExternalChildren() instead
     */
    function getChiWorkerExternalList()
    {
      Message::log("use of deprecated method getChiWorkerExternalList. use getChiWorkerExternalChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getChiWorkerExternalChildren();
    }
    function getChiWorkerExternalChildren()
    {
      // the foreign key column does not exist
      return $this->getChildrenEx(null, 'ChiWorkerExternal', null, null);
    }
    /**
     * @deprecated use getFigureChildren() instead
     */
    function getFigureList()
    {
      Message::log("use of deprecated method getFigureList. use getFigureChildren() instead.\n".Message::getStackTrace(), __FILE__, __LINE__);
      return $this->getFigureChildren();
    }
    function getFigureChildren()
    {
      return $this->getChildrenEx(null, 'Figure', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
    }

    /**
     * Node class overrides
     */
     
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
      // handle NMUCActor as many-to-many type
      if ($type == 'Actor')
      {
        // for every NMUCActor we have to load the Actor 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getActorOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getActorOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartner')
      {
        // for every NMUCActor we have to load the ChiBusinessPartner 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiBusinessPartnerOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiBusinessPartnerOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartnerPassive')
      {
        // for every NMUCActor we have to load the ChiBusinessPartnerPassive 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiBusinessPartnerPassiveOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiBusinessPartnerPassiveOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartnerActive')
      {
        // for every NMUCActor we have to load the ChiBusinessPartnerActive 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiBusinessPartnerActiveOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiBusinessPartnerActiveOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiWorker')
      {
        // for every NMUCActor we have to load the ChiWorker 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiWorkerOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiWorkerOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiWorkerInternal')
      {
        // for every NMUCActor we have to load the ChiWorkerInternal 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiWorkerInternalOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiWorkerInternalOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiWorkerExternal')
      {
        // for every NMUCActor we have to load the ChiWorkerExternal 
        $this->loadChildren('NMUCActor');
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->getChiWorkerExternalOID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->getChiWorkerExternalOID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties)
    {
      // handle NMUCActor as many-to-many type
      if ($type == 'Actor' || PersistenceFacade::getOIDParameter($oid, 'type') == 'Actor')
      {
        // for every NMUCActor we have to get the Actor parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'Actor')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartner' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiBusinessPartner')
      {
        // for every NMUCActor we have to get the ChiBusinessPartner parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiBusinessPartner')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartnerPassive' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiBusinessPartnerPassive')
      {
        // for every NMUCActor we have to get the ChiBusinessPartnerPassive parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiBusinessPartnerPassive')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiBusinessPartnerActive' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiBusinessPartnerActive')
      {
        // for every NMUCActor we have to get the ChiBusinessPartnerActive parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiBusinessPartnerActive')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiWorker' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiWorker')
      {
        // for every NMUCActor we have to get the ChiWorker parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiWorker')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiWorkerInternal' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiWorkerInternal')
      {
        // for every NMUCActor we have to get the ChiWorkerInternal parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiWorkerInternal')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // handle NMUCActor as many-to-many type
      if ($type == 'ChiWorkerExternal' || PersistenceFacade::getOIDParameter($oid, 'type') == 'ChiWorkerExternal')
      {
        // for every NMUCActor we have to get the ChiWorkerExternal parents 
        $children = parent::getChildrenEx(null, 'NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID()), null);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == 'ChiWorkerExternal')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties);
      }
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties);
    }
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
      if ($child != null && $child->getType() == 'Actor')
      {
        // for every Actor we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID(), 'fk_actor_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiBusinessUseCase($this);
          $associationNode->setActor($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiBusinessPartner')
      {
        // for every ChiBusinessPartner we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID(), 'fk_chibusinesspartner_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiBusinessUseCase($this);
          $associationNode->setChiBusinessPartner($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiBusinessPartnerPassive')
      {
        // for every ChiBusinessPartnerPassive we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID(), 'fk_chibusinesspartnerpassive_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiBusinessUseCase($this);
          $associationNode->setChiBusinessPartnerPassive($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiBusinessPartnerActive')
      {
        // for every ChiBusinessPartnerActive we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID(), 'fk_chibusinesspartneractive_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiBusinessUseCase($this);
          $associationNode->setChiBusinessPartnerActive($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiWorker')
      {
        // for every ChiWorker we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID(), 'fk_chiworker_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiBusinessUseCase($this);
          $associationNode->setChiWorker($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiWorkerInternal')
      {
        // for every ChiWorkerInternal we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID(), 'fk_chiworkerinternal_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiBusinessUseCase($this);
          $associationNode->setChiWorkerInternal($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      if ($child != null && $child->getType() == 'ChiWorkerExternal')
      {
        // for every ChiWorkerExternal we have to insert a NMUCActor
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('NMUCActor', array('fk_chibusinessusecase_id' => $this->getDBID(), 'fk_chiworkerexternal_id' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('NMUCActor', BUILDTYPE_SINGLE);
          $associationNode->setChiBusinessUseCase($this);
          $associationNode->setChiWorkerExternal($child);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
      // do default
      parent::addChild($child, $addtype);
    }
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'Actor')
      {
        // for every Actor we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiBusinessPartner')
      {
        // for every ChiBusinessPartner we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiBusinessPartnerPassive')
      {
        // for every ChiBusinessPartnerPassive we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiBusinessPartnerActive')
      {
        // for every ChiBusinessPartnerActive we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiWorker')
      {
        // for every ChiWorker we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiWorkerInternal')
      {
        // for every ChiWorkerInternal we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == 'ChiWorkerExternal')
      {
        // for every ChiWorkerExternal we have to delete the NMUCActor
        // set childOID parameter to the NMUCActor's object id and prodeed with default behaviour
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        array_unshift($ids, $this->getDBID());
        $childOID = PersistenceFacade::composeOID(array('type' => 'NMUCActor', 'id' => $ids));
      }
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
}
?>
