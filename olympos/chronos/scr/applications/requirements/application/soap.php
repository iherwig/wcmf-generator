<?php
/**
 * This file was generated by wCMFGenerator 2.6.0001 from model/requirements.xmi on 29.03.08 18:02. 
 * Manual modifications should be placed inside the protected regions.
 * NOTE: This file was created in the application root directory to 
 *       ensure that everything is working correctly
 */
require_once("base_dir.php");  
require_once(BASE."wcmf/lib/presentation/class.Application.php");
require_once(BASE."wcmf/lib/security/class.AuthUser.php");
require_once(BASE."wcmf/3rdparty/nusoap/lib/nusoap.php");
require_once(BASE."wcmf/lib/util/class.Message.php");
// PROTECTED REGION ID(/soap/Import) START
// PROTECTED REGION END

$NAMESPACE = 'http://wcmf.sourceforge.net';
$server = new soap_server();
$server->configureWSDL('SOAPService', $NAMESPACE);
$server->wsdl->schemaTargetNamespace = $NAMESPACE;

$server->wsdl->addComplexType(
    'OidList',
    'complexType',
    'array',
    '',
    'SOAP-ENC:Array',
    array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'xsd:string[]')
    ),
    'xsd:string'
);
$server->wsdl->addComplexType(
    'ObjectList',
    'complexType',
    'array',
    '',
    'SOAP-ENC:Array',
    array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:object[]')
    ),
    'tns:object'
);
$server->wsdl->addComplexType('object', 'complexType', 'struct', 'sequence', '',
    array(
        'type' => array('name' => 'type', 'type' => 'xsd:string'),
        'oid' => array('name' => 'oid', 'type' => 'xsd:string'),
        'displayName' => array('name' => 'displayName', 'type' => 'xsd:string')
    )
);


/**
 * WSDL definition for UserRDB
 */
$server->wsdl->addComplexType('UserRDB', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'login' => array('name' => 'login', 'type' => 'xsd:string'),
        'password' => array('name' => 'password', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'firstname' => array('name' => 'firstname', 'type' => 'xsd:string'),
        'config' => array('name' => 'config', 'type' => 'xsd:string'),
        'Locktable' => array('name' => 'Locktable', 'type' => 'tns:LocktableList'),
        'NMUserRole' => array('name' => 'NMUserRole', 'type' => 'tns:NMUserRoleList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('UserRDBList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:UserRDB[]')
    ),
    'tns:UserRDB'
);
$server->register('getUserRDBList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'UserRDB'=>'tns:UserRDB', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:UserRDB'), $NAMESPACE);
  
$server->register('updateUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'UserRDB'=>'tns:UserRDB', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for RoleRDB
 */
$server->wsdl->addComplexType('RoleRDB', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'NMUserRole' => array('name' => 'NMUserRole', 'type' => 'tns:NMUserRoleList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('RoleRDBList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:RoleRDB[]')
    ),
    'tns:RoleRDB'
);
$server->register('getRoleRDBList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'RoleRDB'=>'tns:RoleRDB', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:RoleRDB'), $NAMESPACE);
  
$server->register('updateRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'RoleRDB'=>'tns:RoleRDB', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for NMUserRole
 */
$server->wsdl->addComplexType('NMUserRole', 'complexType', 'struct', 'sequence', '',
    array(
        'fk_role_id' => array('name' => 'fk_role_id', 'type' => 'xsd:string'),
        'fk_user_id' => array('name' => 'fk_user_id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMUserRoleList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMUserRole[]')
    ),
    'tns:NMUserRole'
);
$server->register('getNMUserRoleList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'NMUserRole'=>'tns:NMUserRole', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:NMUserRole'), $NAMESPACE);
  
$server->register('updateNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'NMUserRole'=>'tns:NMUserRole', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for Locktable
 */
$server->wsdl->addComplexType('Locktable', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_user_id' => array('name' => 'fk_user_id', 'type' => 'xsd:string'),
        'objectid' => array('name' => 'objectid', 'type' => 'xsd:string'),
        'sessionid' => array('name' => 'sessionid', 'type' => 'xsd:string'),
        'since' => array('name' => 'since', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('LocktableList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Locktable[]')
    ),
    'tns:Locktable'
);
$server->register('getLocktableList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Locktable'=>'tns:Locktable', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Locktable'), $NAMESPACE);
  
$server->register('updateLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Locktable'=>'tns:Locktable', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for Adodbseq
 */
$server->wsdl->addComplexType('Adodbseq', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('AdodbseqList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Adodbseq[]')
    ),
    'tns:Adodbseq'
);
$server->register('getAdodbseqList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createAdodbseq',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Adodbseq'=>'tns:Adodbseq', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readAdodbseq',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Adodbseq'), $NAMESPACE);
  
$server->register('updateAdodbseq',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Adodbseq'=>'tns:Adodbseq', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteAdodbseq',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**  
 * SOAP Method getUserRDBList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getUserRDBList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'UserRDB'));
// PROTECTED REGION ID(soap/Methods/getUserRDBList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createUserRDB
 * @param login The login name
 * @param password The login password
 * @param UserRDB The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createUserRDB($login, $password, $UserRDB, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'UserRDB',  'data' => $UserRDB, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createUserRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readUserRDB 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readUserRDB($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readUserRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateUserRDB 
 * @param login The login name
 * @param password The login password
 * @param UserRDB The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateUserRDB($login, $password, $UserRDB, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $UserRDB, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateUserRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteUserRDB
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteUserRDB($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteUserRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getRoleRDBList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getRoleRDBList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'RoleRDB'));
// PROTECTED REGION ID(soap/Methods/getRoleRDBList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createRoleRDB
 * @param login The login name
 * @param password The login password
 * @param RoleRDB The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createRoleRDB($login, $password, $RoleRDB, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'RoleRDB',  'data' => $RoleRDB, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createRoleRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readRoleRDB 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readRoleRDB($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readRoleRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateRoleRDB 
 * @param login The login name
 * @param password The login password
 * @param RoleRDB The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateRoleRDB($login, $password, $RoleRDB, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $RoleRDB, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateRoleRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteRoleRDB
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteRoleRDB($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteRoleRDB) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getNMUserRoleList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getNMUserRoleList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'NMUserRole'));
// PROTECTED REGION ID(soap/Methods/getNMUserRoleList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createNMUserRole
 * @param login The login name
 * @param password The login password
 * @param NMUserRole The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createNMUserRole($login, $password, $NMUserRole, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'NMUserRole',  'data' => $NMUserRole, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createNMUserRole) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readNMUserRole 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readNMUserRole($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readNMUserRole) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateNMUserRole 
 * @param login The login name
 * @param password The login password
 * @param NMUserRole The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateNMUserRole($login, $password, $NMUserRole, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $NMUserRole, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateNMUserRole) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteNMUserRole
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteNMUserRole($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteNMUserRole) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getLocktableList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getLocktableList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'Locktable'));
// PROTECTED REGION ID(soap/Methods/getLocktableList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createLocktable
 * @param login The login name
 * @param password The login password
 * @param Locktable The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createLocktable($login, $password, $Locktable, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'Locktable',  'data' => $Locktable, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createLocktable) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readLocktable 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readLocktable($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readLocktable) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateLocktable 
 * @param login The login name
 * @param password The login password
 * @param Locktable The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateLocktable($login, $password, $Locktable, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $Locktable, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateLocktable) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteLocktable
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteLocktable($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteLocktable) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getAdodbseqList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getAdodbseqList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'Adodbseq'));
// PROTECTED REGION ID(soap/Methods/getAdodbseqList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createAdodbseq
 * @param login The login name
 * @param password The login password
 * @param Adodbseq The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createAdodbseq($login, $password, $Adodbseq, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'Adodbseq',  'data' => $Adodbseq, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createAdodbseq) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readAdodbseq 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readAdodbseq($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readAdodbseq) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateAdodbseq 
 * @param login The login name
 * @param password The login password
 * @param Adodbseq The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateAdodbseq($login, $password, $Adodbseq, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $Adodbseq, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateAdodbseq) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteAdodbseq
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteAdodbseq($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteAdodbseq) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**
 * WSDL definition for EntityBase
 */
$server->wsdl->addComplexType('EntityBase', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('EntityBaseList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:EntityBase[]')
    ),
    'tns:EntityBase'
);
$server->register('getEntityBaseList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'EntityBase'=>'tns:EntityBase', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:EntityBase'), $NAMESPACE);
  
$server->register('updateEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'EntityBase'=>'tns:EntityBase', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiBase
 */
$server->wsdl->addComplexType('ChiBase', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBaseList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBase[]')
    ),
    'tns:ChiBase'
);
$server->register('getChiBaseList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createChiBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBase'=>'tns:ChiBase', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBase'), $NAMESPACE);
  
$server->register('updateChiBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBase'=>'tns:ChiBase', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for NMFeatureRequirements
 */
$server->wsdl->addComplexType('NMFeatureRequirements', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chifeature_id' => array('name' => 'fk_chifeature_id', 'type' => 'xsd:string'),
        'fk_chirequirement_id' => array('name' => 'fk_chirequirement_id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMFeatureRequirementsList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMFeatureRequirements[]')
    ),
    'tns:NMFeatureRequirements'
);
$server->register('getNMFeatureRequirementsList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createNMFeatureRequirements',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'NMFeatureRequirements'=>'tns:NMFeatureRequirements', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readNMFeatureRequirements',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:NMFeatureRequirements'), $NAMESPACE);
  
$server->register('updateNMFeatureRequirements',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'NMFeatureRequirements'=>'tns:NMFeatureRequirements', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteNMFeatureRequirements',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for EntityBaseExtended
 */
$server->wsdl->addComplexType('EntityBaseExtended', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('EntityBaseExtendedList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:EntityBaseExtended[]')
    ),
    'tns:EntityBaseExtended'
);
$server->register('getEntityBaseExtendedList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createEntityBaseExtended',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'EntityBaseExtended'=>'tns:EntityBaseExtended', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readEntityBaseExtended',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:EntityBaseExtended'), $NAMESPACE);
  
$server->register('updateEntityBaseExtended',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'EntityBaseExtended'=>'tns:EntityBaseExtended', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteEntityBaseExtended',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiAuthors
 */
$server->wsdl->addComplexType('ChiAuthors', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Role' => array('name' => 'Role', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiAuthorsList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiAuthors[]')
    ),
    'tns:ChiAuthors'
);
$server->register('getChiAuthorsList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiAuthors'=>'tns:ChiAuthors', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiAuthors'), $NAMESPACE);
  
$server->register('updateChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiAuthors'=>'tns:ChiAuthors', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiGoal
 */
$server->wsdl->addComplexType('ChiGoal', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Priority' => array('name' => 'Priority', 'type' => 'xsd:string'),
        'Value_Name' => array('name' => 'Value_Name', 'type' => 'xsd:string'),
        'Value_ammount' => array('name' => 'Value_ammount', 'type' => 'xsd:string'),
        'Value_Goal' => array('name' => 'Value_Goal', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'ChiRequirement' => array('name' => 'ChiRequirement', 'type' => 'tns:ChiRequirementList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiGoalList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiGoal[]')
    ),
    'tns:ChiGoal'
);
$server->register('getChiGoalList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiGoal'=>'tns:ChiGoal', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiGoal'), $NAMESPACE);
  
$server->register('updateChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiGoal'=>'tns:ChiGoal', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiRequirement
 */
$server->wsdl->addComplexType('ChiRequirement', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chigoal_id' => array('name' => 'fk_chigoal_id', 'type' => 'xsd:string'),
        'reqType' => array('name' => 'reqType', 'type' => 'xsd:string'),
        'Priority' => array('name' => 'Priority', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Proofreader' => array('name' => 'Proofreader', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'ChiIssue' => array('name' => 'ChiIssue', 'type' => 'tns:ChiIssueList'),
        'NMFeatureRequirements' => array('name' => 'NMFeatureRequirements', 'type' => 'tns:NMFeatureRequirementsList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiRequirementList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiRequirement[]')
    ),
    'tns:ChiRequirement'
);
$server->register('getChiRequirementList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirement'=>'tns:ChiRequirement', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiRequirement'), $NAMESPACE);
  
$server->register('updateChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirement'=>'tns:ChiRequirement', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiFeature
 */
$server->wsdl->addComplexType('ChiFeature', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Proofreader' => array('name' => 'Proofreader', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'NMFeatureRequirements' => array('name' => 'NMFeatureRequirements', 'type' => 'tns:NMFeatureRequirementsList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiFeatureList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiFeature[]')
    ),
    'tns:ChiFeature'
);
$server->register('getChiFeatureList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeature'=>'tns:ChiFeature', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiFeature'), $NAMESPACE);
  
$server->register('updateChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeature'=>'tns:ChiFeature', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiIssue
 */
$server->wsdl->addComplexType('ChiIssue', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chirequirement_id' => array('name' => 'fk_chirequirement_id', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Responsible' => array('name' => 'Responsible', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiIssueList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiIssue[]')
    ),
    'tns:ChiIssue'
);
$server->register('getChiIssueList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiIssue'=>'tns:ChiIssue', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiIssue'), $NAMESPACE);
  
$server->register('updateChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiIssue'=>'tns:ChiIssue', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiFeatureStatus
 */
$server->wsdl->addComplexType('ChiFeatureStatus', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiFeatureStatusList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiFeatureStatus[]')
    ),
    'tns:ChiFeatureStatus'
);
$server->register('getChiFeatureStatusList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeatureStatus'=>'tns:ChiFeatureStatus', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiFeatureStatus'), $NAMESPACE);
  
$server->register('updateChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeatureStatus'=>'tns:ChiFeatureStatus', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiRequirementStatus
 */
$server->wsdl->addComplexType('ChiRequirementStatus', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiRequirementStatusList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiRequirementStatus[]')
    ),
    'tns:ChiRequirementStatus'
);
$server->register('getChiRequirementStatusList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createChiRequirementStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirementStatus'=>'tns:ChiRequirementStatus', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiRequirementStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiRequirementStatus'), $NAMESPACE);
  
$server->register('updateChiRequirementStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirementStatus'=>'tns:ChiRequirementStatus', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiRequirementStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**
 * WSDL definition for ChiRequirementType
 */
$server->wsdl->addComplexType('ChiRequirementType', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiRequirementTypeList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiRequirementType[]')
    ),
    'tns:ChiRequirementType'
);
$server->register('getChiRequirementTypeList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);
  
$server->register('createChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirementType'=>'tns:ChiRequirementType', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiRequirementType'), $NAMESPACE);
  
$server->register('updateChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirementType'=>'tns:ChiRequirementType', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);


/**  
 * SOAP Method getEntityBaseList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getEntityBaseList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'EntityBase'));
// PROTECTED REGION ID(soap/Methods/getEntityBaseList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createEntityBase
 * @param login The login name
 * @param password The login password
 * @param EntityBase The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createEntityBase($login, $password, $EntityBase, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'EntityBase',  'data' => $EntityBase, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createEntityBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readEntityBase 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readEntityBase($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readEntityBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateEntityBase 
 * @param login The login name
 * @param password The login password
 * @param EntityBase The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateEntityBase($login, $password, $EntityBase, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $EntityBase, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateEntityBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteEntityBase
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteEntityBase($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteEntityBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiBaseList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBaseList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'ChiBase'));
// PROTECTED REGION ID(soap/Methods/getChiBaseList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBase
 * @param login The login name
 * @param password The login password
 * @param ChiBase The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBase($login, $password, $ChiBase, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'ChiBase',  'data' => $ChiBase, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBase 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBase($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBase 
 * @param login The login name
 * @param password The login password
 * @param ChiBase The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBase($login, $password, $ChiBase, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $ChiBase, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBase
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBase($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBase) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getNMFeatureRequirementsList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getNMFeatureRequirementsList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'NMFeatureRequirements'));
// PROTECTED REGION ID(soap/Methods/getNMFeatureRequirementsList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createNMFeatureRequirements
 * @param login The login name
 * @param password The login password
 * @param NMFeatureRequirements The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createNMFeatureRequirements($login, $password, $NMFeatureRequirements, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'NMFeatureRequirements',  'data' => $NMFeatureRequirements, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createNMFeatureRequirements) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readNMFeatureRequirements 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readNMFeatureRequirements($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readNMFeatureRequirements) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateNMFeatureRequirements 
 * @param login The login name
 * @param password The login password
 * @param NMFeatureRequirements The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateNMFeatureRequirements($login, $password, $NMFeatureRequirements, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $NMFeatureRequirements, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateNMFeatureRequirements) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteNMFeatureRequirements
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteNMFeatureRequirements($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteNMFeatureRequirements) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getEntityBaseExtendedList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getEntityBaseExtendedList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'EntityBaseExtended'));
// PROTECTED REGION ID(soap/Methods/getEntityBaseExtendedList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createEntityBaseExtended
 * @param login The login name
 * @param password The login password
 * @param EntityBaseExtended The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createEntityBaseExtended($login, $password, $EntityBaseExtended, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'EntityBaseExtended',  'data' => $EntityBaseExtended, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createEntityBaseExtended) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readEntityBaseExtended 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readEntityBaseExtended($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readEntityBaseExtended) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateEntityBaseExtended 
 * @param login The login name
 * @param password The login password
 * @param EntityBaseExtended The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateEntityBaseExtended($login, $password, $EntityBaseExtended, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $EntityBaseExtended, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateEntityBaseExtended) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteEntityBaseExtended
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteEntityBaseExtended($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteEntityBaseExtended) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiAuthorsList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiAuthorsList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'ChiAuthors'));
// PROTECTED REGION ID(soap/Methods/getChiAuthorsList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiAuthors
 * @param login The login name
 * @param password The login password
 * @param ChiAuthors The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiAuthors($login, $password, $ChiAuthors, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'ChiAuthors',  'data' => $ChiAuthors, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiAuthors) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiAuthors 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiAuthors($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiAuthors) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiAuthors 
 * @param login The login name
 * @param password The login password
 * @param ChiAuthors The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiAuthors($login, $password, $ChiAuthors, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $ChiAuthors, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiAuthors) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiAuthors
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiAuthors($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiAuthors) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiGoalList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiGoalList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'ChiGoal'));
// PROTECTED REGION ID(soap/Methods/getChiGoalList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiGoal
 * @param login The login name
 * @param password The login password
 * @param ChiGoal The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiGoal($login, $password, $ChiGoal, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'ChiGoal',  'data' => $ChiGoal, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiGoal) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiGoal 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiGoal($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiGoal) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiGoal 
 * @param login The login name
 * @param password The login password
 * @param ChiGoal The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiGoal($login, $password, $ChiGoal, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $ChiGoal, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiGoal) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiGoal
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiGoal($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiGoal) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiRequirementList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiRequirementList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'ChiRequirement'));
// PROTECTED REGION ID(soap/Methods/getChiRequirementList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiRequirement
 * @param login The login name
 * @param password The login password
 * @param ChiRequirement The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiRequirement($login, $password, $ChiRequirement, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'ChiRequirement',  'data' => $ChiRequirement, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiRequirement) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiRequirement 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiRequirement($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiRequirement) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiRequirement 
 * @param login The login name
 * @param password The login password
 * @param ChiRequirement The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiRequirement($login, $password, $ChiRequirement, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $ChiRequirement, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiRequirement) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiRequirement
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiRequirement($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiRequirement) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiFeatureList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiFeatureList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'ChiFeature'));
// PROTECTED REGION ID(soap/Methods/getChiFeatureList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiFeature
 * @param login The login name
 * @param password The login password
 * @param ChiFeature The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiFeature($login, $password, $ChiFeature, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'ChiFeature',  'data' => $ChiFeature, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiFeature) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiFeature 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiFeature($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiFeature) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiFeature 
 * @param login The login name
 * @param password The login password
 * @param ChiFeature The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiFeature($login, $password, $ChiFeature, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $ChiFeature, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiFeature) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiFeature
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiFeature($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiFeature) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiIssueList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiIssueList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'ChiIssue'));
// PROTECTED REGION ID(soap/Methods/getChiIssueList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiIssue
 * @param login The login name
 * @param password The login password
 * @param ChiIssue The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiIssue($login, $password, $ChiIssue, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'ChiIssue',  'data' => $ChiIssue, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiIssue) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiIssue 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiIssue($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiIssue) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiIssue 
 * @param login The login name
 * @param password The login password
 * @param ChiIssue The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiIssue($login, $password, $ChiIssue, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $ChiIssue, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiIssue) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiIssue
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiIssue($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiIssue) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiFeatureStatusList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiFeatureStatusList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'ChiFeatureStatus'));
// PROTECTED REGION ID(soap/Methods/getChiFeatureStatusList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiFeatureStatus
 * @param login The login name
 * @param password The login password
 * @param ChiFeatureStatus The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiFeatureStatus($login, $password, $ChiFeatureStatus, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'ChiFeatureStatus',  'data' => $ChiFeatureStatus, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiFeatureStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiFeatureStatus 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiFeatureStatus($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiFeatureStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiFeatureStatus 
 * @param login The login name
 * @param password The login password
 * @param ChiFeatureStatus The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiFeatureStatus($login, $password, $ChiFeatureStatus, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $ChiFeatureStatus, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiFeatureStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiFeatureStatus
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiFeatureStatus($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiFeatureStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiRequirementStatusList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiRequirementStatusList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'ChiRequirementStatus'));
// PROTECTED REGION ID(soap/Methods/getChiRequirementStatusList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiRequirementStatus
 * @param login The login name
 * @param password The login password
 * @param ChiRequirementStatus The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiRequirementStatus($login, $password, $ChiRequirementStatus, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'ChiRequirementStatus',  'data' => $ChiRequirementStatus, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiRequirementStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiRequirementStatus 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiRequirementStatus($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiRequirementStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiRequirementStatus 
 * @param login The login name
 * @param password The login password
 * @param ChiRequirementStatus The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiRequirementStatus($login, $password, $ChiRequirementStatus, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $ChiRequirementStatus, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiRequirementStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiRequirementStatus
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiRequirementStatus($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiRequirementStatus) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


/**  
 * SOAP Method getChiRequirementTypeList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiRequirementTypeList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapList', 'type' => 'ChiRequirementType'));
// PROTECTED REGION ID(soap/Methods/getChiRequirementTypeList) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiRequirementType
 * @param login The login name
 * @param password The login password
 * @param ChiRequirementType The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiRequirementType($login, $password, $ChiRequirementType, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapCreate', 'type' => 'ChiRequirementType',  'data' => $ChiRequirementType, 'parentoid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiRequirementType) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiRequirementType 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiRequirementType($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapRead', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiRequirementType) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiRequirementType 
 * @param login The login name
 * @param password The login password
 * @param ChiRequirementType The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiRequirementType($login, $password, $ChiRequirementType, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapUpdate', 'data' => $ChiRequirementType, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiRequirementType) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiRequirementType
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiRequirementType($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'soapDelete', 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiRequirementType) START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  


$server->register('search',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'searchterm'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);

/**  
 * SOAP Method search 
 * @param login The login name
 * @param password The login password
 * @param searchterm The search term
 * @return string
 */  
function search($login, $password, $searchterm)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'searchterm' => $searchterm, 'usr_action' => 'soapSearch'));
	$result = doSoapCall();
	return $result;
}  


$server->register('advancedSearch',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'type'=>'xsd:string', 'query'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);

/**  
 * SOAP Method advancedSearch 
 * @param login The login name
 * @param password The login password
 * @param type The type to search for
 * @param query The query definition (@see StringQuery)
 * @return string
 */  
function advancedSearch($login, $password, $type, $query)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'type' => $type, 'query' => $query, 'usr_action' => 'soapAdvancedSearch'));
	$result = doSoapCall();
	return $result;
}  


// Use the request to (try to) invoke the service
$HTTP_RAW_POST_DATA = isset($HTTP_RAW_POST_DATA) ? $HTTP_RAW_POST_DATA : '';
$server->service($HTTP_RAW_POST_DATA);



/**
 * Do the soap call using the ActionMapper
 * @return The result added by SoapController::executeKernel()
 */
function doSoapCall()
{
  // initialize the application
  $application = &Application::getInstance();
  $callParams = &$application->initialize();

  // set the error handler
  $GLOBALS['MESSAGE_ERROR_HANDLER'] = "onError";
  
  // login with the data given in the request
  $objectFactory = &ObjectFactory::getInstance();
  $authUser = new AuthUser();
  if ($authUser->login($_GET['login'], $_GET['password']))
  {
    // login succeeded, store the user in the session
    $session = &SessionData::getInstance();
    $session->set('auth_user', $authUser);
  
    // process the requested action
    ActionMapper::processAction($callParams['controller'], $callParams['context'], $callParams['action'], $callParams['data']);
    $result = $callParams['data']['soapResult'];
  }
  else
    Message::error("Login failed");
    
  return $result;
}

/**
 * Global error handling function. Assigned to MESSAGE_ERROR_HANDLER 
 * which means it is called by Message::error()
 * @param message The error message
 * @param file The php file in which the error occured (optional)
 * @param line The line in the php file in which the error occured (optional)
 * @return The value
 */
function onError($message, $file='', $line='') 
{ 
  global $server;
  $server->fault('SOAP-ENV:SERVER', $message, '', Message::getStackTrace());
  Message::log($message." (".$file.", ".$line.").\n".Message::getStackTrace());
}
?>

