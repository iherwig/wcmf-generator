<?php
/**
 * This file was generated by wCMFGenerator 3.0.0017 from requirements.uml on Tue Nov 03 20:18:42 CET 2009. 
 * Manual modifications should be placed inside the protected regions.
 * NOTE: This file was created in the application root directory to 
 *       ensure that everything is working correctly
 */
require_once("base_dir.php");  
require_once(BASE."wcmf/lib/presentation/class.Application.php");
require_once(BASE."wcmf/lib/security/class.AuthUser.php");
require_once(BASE."wcmf/3rdparty/nusoap/lib/nusoap.php");
require_once(BASE."wcmf/lib/core/class.WCMFException.php");
require_once(BASE."wcmf/lib/util/class.Log.php");
require_once(BASE."wcmf/lib/presentation/class.ActionMapper.php");
require_once(BASE."wcmf/lib/presentation/class.Request.php");
// PROTECTED REGION ID(/soap/Import) ENABLED START
// PROTECTED REGION END

$NAMESPACE = 'http://wcmf.sourceforge.net';
$server = new soap_server();
$server->configureWSDL('SOAPService', $NAMESPACE);
$server->wsdl->schemaTargetNamespace = $NAMESPACE;

$server->wsdl->addComplexType(
    'OidList',
    'complexType',
    'array',
    '',
    'SOAP-ENC:Array',
    array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'xsd:string[]')
    ),
    'xsd:string'
);
$server->wsdl->addComplexType(
    'ObjectList',
    'complexType',
    'array',
    '',
    'SOAP-ENC:Array',
    array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:object[]')
    ),
    'tns:object'
);
$server->wsdl->addComplexType('object', 'complexType', 'struct', 'sequence', '',
    array(
        'type' => array('name' => 'type', 'type' => 'xsd:string'),
        'oid' => array('name' => 'oid', 'type' => 'xsd:string'),
        'displayName' => array('name' => 'displayName', 'type' => 'xsd:string')
    )
);

/**
 * WSDL definition for ActivitySet
 */
$server->wsdl->addComplexType('ActivitySet', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessusecasecore_id' => array('name' => 'fk_chibusinessusecasecore_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chibusinessusecase_id' => array('name' => 'fk_chibusinessusecase_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiObject' => array('name' => 'ChiObject', 'type' => 'tns:ChiObjectList'),
        'Activity' => array('name' => 'Activity', 'type' => 'tns:ActivityList'),
        'ActivityDecision' => array('name' => 'ActivityDecision', 'type' => 'tns:ActivityDecisionList'),
        'ActivityReceive' => array('name' => 'ActivityReceive', 'type' => 'tns:ActivityReceiveList'),
        'ActivitySend' => array('name' => 'ActivitySend', 'type' => 'tns:ActivitySendList'),
        'ActivityInitial' => array('name' => 'ActivityInitial', 'type' => 'tns:ActivityInitialList'),
        'ActivityFinal' => array('name' => 'ActivityFinal', 'type' => 'tns:ActivityFinalList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ActivitySetList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ActivitySet[]')
    ),
    'tns:ActivitySet'
);
$server->register('getActivitySetList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ActivitySetList'), $NAMESPACE);
  
$server->register('createActivitySet',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivitySet'=>'tns:ActivitySet', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readActivitySet',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ActivitySet'), $NAMESPACE);
  
$server->register('updateActivitySet',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivitySet'=>'tns:ActivitySet', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteActivitySet',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiObject
 */
$server->wsdl->addComplexType('ChiObject', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chinodemanytomany_id' => array('name' => 'fk_chinodemanytomany_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chinode_id' => array('name' => 'fk_chinode_id', 'type' => 'xsd:string'),
        'fk_activityset_id' => array('name' => 'fk_activityset_id', 'type' => 'xsd:string'),
        'object_status' => array('name' => 'object_status', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ObjectFlow' => array('name' => 'ObjectFlow', 'type' => 'tns:ObjectFlowList'),
        'ObjectFlow' => array('name' => 'ObjectFlow', 'type' => 'tns:ObjectFlowList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiObjectList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiObject[]')
    ),
    'tns:ChiObject'
);
$server->register('getChiObjectList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiObjectList'), $NAMESPACE);
  
$server->register('createChiObject',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiObject'=>'tns:ChiObject', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiObject',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiObject'), $NAMESPACE);
  
$server->register('updateChiObject',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiObject'=>'tns:ChiObject', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiObject',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ControlFlow
 */
$server->wsdl->addComplexType('ControlFlow', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_activityfinal_id' => array('name' => 'fk_activityfinal_id', 'type' => 'xsd:string'),
        'fk_activityinitial_id' => array('name' => 'fk_activityinitial_id', 'type' => 'xsd:string'),
        'fk_ascontrolflowsource_id' => array('name' => 'fk_ascontrolflowsource_id', 'type' => 'xsd:string'),
        'fk_ascontrolflowtarget_id' => array('name' => 'fk_ascontrolflowtarget_id', 'type' => 'xsd:string'),
        'fk_arcontrolflowsource_id' => array('name' => 'fk_arcontrolflowsource_id', 'type' => 'xsd:string'),
        'fk_arcontrolflowtarget_id' => array('name' => 'fk_arcontrolflowtarget_id', 'type' => 'xsd:string'),
        'fk_adcontrolflowsource_id' => array('name' => 'fk_adcontrolflowsource_id', 'type' => 'xsd:string'),
        'fk_adcontrolflowtarget_id' => array('name' => 'fk_adcontrolflowtarget_id', 'type' => 'xsd:string'),
        'fk_acontrolflowtarget_id' => array('name' => 'fk_acontrolflowtarget_id', 'type' => 'xsd:string'),
        'fk_acontrolflowsource_id' => array('name' => 'fk_acontrolflowsource_id', 'type' => 'xsd:string'),
        'guard' => array('name' => 'guard', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ControlFlowList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ControlFlow[]')
    ),
    'tns:ControlFlow'
);
$server->register('getControlFlowList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ControlFlowList'), $NAMESPACE);
  
$server->register('createControlFlow',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ControlFlow'=>'tns:ControlFlow', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readControlFlow',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ControlFlow'), $NAMESPACE);
  
$server->register('updateControlFlow',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ControlFlow'=>'tns:ControlFlow', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteControlFlow',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ObjectFlow
 */
$server->wsdl->addComplexType('ObjectFlow', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_aobjectflowtarget_id' => array('name' => 'fk_aobjectflowtarget_id', 'type' => 'xsd:string'),
        'fk_aobjectflowsource_id' => array('name' => 'fk_aobjectflowsource_id', 'type' => 'xsd:string'),
        'fk_chiobjectobjectflowtarget_id' => array('name' => 'fk_chiobjectobjectflowtarget_id', 'type' => 'xsd:string'),
        'fk_chiobjectobjectflowsource_id' => array('name' => 'fk_chiobjectobjectflowsource_id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ObjectFlowList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ObjectFlow[]')
    ),
    'tns:ObjectFlow'
);

/**
 * WSDL definition for Activity
 */
$server->wsdl->addComplexType('Activity', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_activityset_id' => array('name' => 'fk_activityset_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ControlFlow' => array('name' => 'ControlFlow', 'type' => 'tns:ControlFlowList'),
        'ControlFlow' => array('name' => 'ControlFlow', 'type' => 'tns:ControlFlowList'),
        'ObjectFlow' => array('name' => 'ObjectFlow', 'type' => 'tns:ObjectFlowList'),
        'ObjectFlow' => array('name' => 'ObjectFlow', 'type' => 'tns:ObjectFlowList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ActivityList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Activity[]')
    ),
    'tns:Activity'
);
$server->register('getActivityList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ActivityList'), $NAMESPACE);
  
$server->register('createActivity',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Activity'=>'tns:Activity', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readActivity',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Activity'), $NAMESPACE);
  
$server->register('updateActivity',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Activity'=>'tns:Activity', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteActivity',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ActivityDecision
 */
$server->wsdl->addComplexType('ActivityDecision', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_activityset_id' => array('name' => 'fk_activityset_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ControlFlow' => array('name' => 'ControlFlow', 'type' => 'tns:ControlFlowList'),
        'ControlFlow' => array('name' => 'ControlFlow', 'type' => 'tns:ControlFlowList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ActivityDecisionList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ActivityDecision[]')
    ),
    'tns:ActivityDecision'
);
$server->register('getActivityDecisionList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ActivityDecisionList'), $NAMESPACE);
  
$server->register('createActivityDecision',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivityDecision'=>'tns:ActivityDecision', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readActivityDecision',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ActivityDecision'), $NAMESPACE);
  
$server->register('updateActivityDecision',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivityDecision'=>'tns:ActivityDecision', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteActivityDecision',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ActivityReceive
 */
$server->wsdl->addComplexType('ActivityReceive', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_activityset_id' => array('name' => 'fk_activityset_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ControlFlow' => array('name' => 'ControlFlow', 'type' => 'tns:ControlFlowList'),
        'ControlFlow' => array('name' => 'ControlFlow', 'type' => 'tns:ControlFlowList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ActivityReceiveList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ActivityReceive[]')
    ),
    'tns:ActivityReceive'
);
$server->register('getActivityReceiveList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ActivityReceiveList'), $NAMESPACE);
  
$server->register('createActivityReceive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivityReceive'=>'tns:ActivityReceive', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readActivityReceive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ActivityReceive'), $NAMESPACE);
  
$server->register('updateActivityReceive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivityReceive'=>'tns:ActivityReceive', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteActivityReceive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ActivitySend
 */
$server->wsdl->addComplexType('ActivitySend', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_activityset_id' => array('name' => 'fk_activityset_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ControlFlow' => array('name' => 'ControlFlow', 'type' => 'tns:ControlFlowList'),
        'ControlFlow' => array('name' => 'ControlFlow', 'type' => 'tns:ControlFlowList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ActivitySendList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ActivitySend[]')
    ),
    'tns:ActivitySend'
);
$server->register('getActivitySendList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ActivitySendList'), $NAMESPACE);
  
$server->register('createActivitySend',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivitySend'=>'tns:ActivitySend', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readActivitySend',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ActivitySend'), $NAMESPACE);
  
$server->register('updateActivitySend',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivitySend'=>'tns:ActivitySend', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteActivitySend',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ActivityInitial
 */
$server->wsdl->addComplexType('ActivityInitial', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_activityset_id' => array('name' => 'fk_activityset_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ControlFlow' => array('name' => 'ControlFlow', 'type' => 'tns:ControlFlowList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ActivityInitialList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ActivityInitial[]')
    ),
    'tns:ActivityInitial'
);
$server->register('getActivityInitialList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ActivityInitialList'), $NAMESPACE);
  
$server->register('createActivityInitial',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivityInitial'=>'tns:ActivityInitial', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readActivityInitial',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ActivityInitial'), $NAMESPACE);
  
$server->register('updateActivityInitial',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivityInitial'=>'tns:ActivityInitial', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteActivityInitial',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ActivityFinal
 */
$server->wsdl->addComplexType('ActivityFinal', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_activityset_id' => array('name' => 'fk_activityset_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ControlFlow' => array('name' => 'ControlFlow', 'type' => 'tns:ControlFlowList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ActivityFinalList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ActivityFinal[]')
    ),
    'tns:ActivityFinal'
);
$server->register('getActivityFinalList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ActivityFinalList'), $NAMESPACE);
  
$server->register('createActivityFinal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivityFinal'=>'tns:ActivityFinal', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readActivityFinal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ActivityFinal'), $NAMESPACE);
  
$server->register('updateActivityFinal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ActivityFinal'=>'tns:ActivityFinal', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteActivityFinal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiSystem
 */
$server->wsdl->addComplexType('ChiSystem', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'config' => array('name' => 'config', 'type' => 'xsd:string'),
        'plattform' => array('name' => 'plattform', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Property' => array('name' => 'Property', 'type' => 'tns:PropertyList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'ChiValue' => array('name' => 'ChiValue', 'type' => 'tns:ChiValueList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiSystemList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiSystem[]')
    ),
    'tns:ChiSystem'
);
$server->register('getChiSystemList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiSystemList'), $NAMESPACE);
  
$server->register('createChiSystem',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiSystem'=>'tns:ChiSystem', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiSystem',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiSystem'), $NAMESPACE);
  
$server->register('updateChiSystem',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiSystem'=>'tns:ChiSystem', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiSystem',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Translation
 */
$server->wsdl->addComplexType('Translation', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'objectid' => array('name' => 'objectid', 'type' => 'xsd:string'),
        'attribute' => array('name' => 'attribute', 'type' => 'xsd:string'),
        'translation' => array('name' => 'translation', 'type' => 'xsd:string'),
        'language' => array('name' => 'language', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('TranslationList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Translation[]')
    ),
    'tns:Translation'
);
$server->register('getTranslationList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:TranslationList'), $NAMESPACE);
  
$server->register('createTranslation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Translation'=>'tns:Translation', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readTranslation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Translation'), $NAMESPACE);
  
$server->register('updateTranslation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Translation'=>'tns:Translation', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteTranslation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Adodbseq
 */
$server->wsdl->addComplexType('Adodbseq', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('AdodbseqList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Adodbseq[]')
    ),
    'tns:Adodbseq'
);

/**
 * WSDL definition for Locktable
 */
$server->wsdl->addComplexType('Locktable', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_user_id' => array('name' => 'fk_user_id', 'type' => 'xsd:string'),
        'objectid' => array('name' => 'objectid', 'type' => 'xsd:string'),
        'sessionid' => array('name' => 'sessionid', 'type' => 'xsd:string'),
        'since' => array('name' => 'since', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('LocktableList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Locktable[]')
    ),
    'tns:Locktable'
);
$server->register('getLocktableList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:LocktableList'), $NAMESPACE);
  
$server->register('createLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Locktable'=>'tns:Locktable', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Locktable'), $NAMESPACE);
  
$server->register('updateLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Locktable'=>'tns:Locktable', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteLocktable',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for NMUserRole
 */
$server->wsdl->addComplexType('NMUserRole', 'complexType', 'struct', 'sequence', '',
    array(
        'fk_user_id' => array('name' => 'fk_user_id', 'type' => 'xsd:string'),
        'fk_role_id' => array('name' => 'fk_role_id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMUserRoleList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMUserRole[]')
    ),
    'tns:NMUserRole'
);
$server->register('getNMUserRoleList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:NMUserRoleList'), $NAMESPACE);
  
$server->register('createNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'NMUserRole'=>'tns:NMUserRole', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:NMUserRole'), $NAMESPACE);
  
$server->register('updateNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'NMUserRole'=>'tns:NMUserRole', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteNMUserRole',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for RoleRDB
 */
$server->wsdl->addComplexType('RoleRDB', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'NMUserRole' => array('name' => 'NMUserRole', 'type' => 'tns:NMUserRoleList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('RoleRDBList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:RoleRDB[]')
    ),
    'tns:RoleRDB'
);
$server->register('getRoleRDBList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:RoleRDBList'), $NAMESPACE);
  
$server->register('createRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'RoleRDB'=>'tns:RoleRDB', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:RoleRDB'), $NAMESPACE);
  
$server->register('updateRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'RoleRDB'=>'tns:RoleRDB', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteRoleRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for UserRDB
 */
$server->wsdl->addComplexType('UserRDB', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'login' => array('name' => 'login', 'type' => 'xsd:string'),
        'password' => array('name' => 'password', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'firstname' => array('name' => 'firstname', 'type' => 'xsd:string'),
        'config' => array('name' => 'config', 'type' => 'xsd:string'),
        'Locktable' => array('name' => 'Locktable', 'type' => 'tns:LocktableList'),
        'NMUserRole' => array('name' => 'NMUserRole', 'type' => 'tns:NMUserRoleList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('UserRDBList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:UserRDB[]')
    ),
    'tns:UserRDB'
);
$server->register('getUserRDBList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:UserRDBList'), $NAMESPACE);
  
$server->register('createUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'UserRDB'=>'tns:UserRDB', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:UserRDB'), $NAMESPACE);
  
$server->register('updateUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'UserRDB'=>'tns:UserRDB', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteUserRDB',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for NMChiUseCaseChiUseCase
 */
$server->wsdl->addComplexType('NMChiUseCaseChiUseCase', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chiusecasecoretarget_id' => array('name' => 'fk_chiusecasecoretarget_id', 'type' => 'xsd:string'),
        'fk_chiusecasecoresource_id' => array('name' => 'fk_chiusecasecoresource_id', 'type' => 'xsd:string'),
        'fk_chiusecasetarget_id' => array('name' => 'fk_chiusecasetarget_id', 'type' => 'xsd:string'),
        'fk_chiusecasesource_id' => array('name' => 'fk_chiusecasesource_id', 'type' => 'xsd:string'),
        'sourceMultiplicity' => array('name' => 'sourceMultiplicity', 'type' => 'xsd:string'),
        'sourceNavigability' => array('name' => 'sourceNavigability', 'type' => 'xsd:string'),
        'targetMultiplicity' => array('name' => 'targetMultiplicity', 'type' => 'xsd:string'),
        'targetNavigability' => array('name' => 'targetNavigability', 'type' => 'xsd:string'),
        'relationType' => array('name' => 'relationType', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMChiUseCaseChiUseCaseList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMChiUseCaseChiUseCase[]')
    ),
    'tns:NMChiUseCaseChiUseCase'
);

/**
 * WSDL definition for Actor
 */
$server->wsdl->addComplexType('Actor', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'NMUCActor' => array('name' => 'NMUCActor', 'type' => 'tns:NMUCActorList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ActorList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Actor[]')
    ),
    'tns:Actor'
);
$server->register('getActorList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ActorList'), $NAMESPACE);
  
$server->register('createActor',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Actor'=>'tns:Actor', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readActor',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Actor'), $NAMESPACE);
  
$server->register('updateActor',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Actor'=>'tns:Actor', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteActor',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiWorker
 */
$server->wsdl->addComplexType('ChiWorker', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'NMUCActor' => array('name' => 'NMUCActor', 'type' => 'tns:NMUCActorList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiWorkerList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiWorker[]')
    ),
    'tns:ChiWorker'
);
$server->register('getChiWorkerList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiWorkerList'), $NAMESPACE);
  
$server->register('createChiWorker',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorker'=>'tns:ChiWorker', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiWorker',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiWorker'), $NAMESPACE);
  
$server->register('updateChiWorker',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorker'=>'tns:ChiWorker', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiWorker',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiBusinessPartner
 */
$server->wsdl->addComplexType('ChiBusinessPartner', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'NMUCActor' => array('name' => 'NMUCActor', 'type' => 'tns:NMUCActorList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessPartnerList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessPartner[]')
    ),
    'tns:ChiBusinessPartner'
);
$server->register('getChiBusinessPartnerList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessPartnerList'), $NAMESPACE);
  
$server->register('createChiBusinessPartner',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartner'=>'tns:ChiBusinessPartner', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessPartner',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessPartner'), $NAMESPACE);
  
$server->register('updateChiBusinessPartner',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartner'=>'tns:ChiBusinessPartner', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessPartner',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiBusinessProcess
 */
$server->wsdl->addComplexType('ChiBusinessProcess', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiBusinessUseCase' => array('name' => 'ChiBusinessUseCase', 'type' => 'tns:ChiBusinessUseCaseList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'ChiBusinessUseCaseCore' => array('name' => 'ChiBusinessUseCaseCore', 'type' => 'tns:ChiBusinessUseCaseCoreList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessProcessList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessProcess[]')
    ),
    'tns:ChiBusinessProcess'
);
$server->register('getChiBusinessProcessList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessProcessList'), $NAMESPACE);
  
$server->register('createChiBusinessProcess',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessProcess'=>'tns:ChiBusinessProcess', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessProcess',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessProcess'), $NAMESPACE);
  
$server->register('updateChiBusinessProcess',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessProcess'=>'tns:ChiBusinessProcess', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessProcess',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiBusinessUseCase
 */
$server->wsdl->addComplexType('ChiBusinessUseCase', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chifeature_id' => array('name' => 'fk_chifeature_id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'PrimaryActor' => array('name' => 'PrimaryActor', 'type' => 'xsd:string'),
        'OtherActors' => array('name' => 'OtherActors', 'type' => 'xsd:string'),
        'GoalInContext' => array('name' => 'GoalInContext', 'type' => 'xsd:string'),
        'Scope' => array('name' => 'Scope', 'type' => 'xsd:string'),
        'Level' => array('name' => 'Level', 'type' => 'xsd:string'),
        'Stakeholders' => array('name' => 'Stakeholders', 'type' => 'xsd:string'),
        'Precondition' => array('name' => 'Precondition', 'type' => 'xsd:string'),
        'Trigger' => array('name' => 'Trigger', 'type' => 'xsd:string'),
        'MainSuccessScenario' => array('name' => 'MainSuccessScenario', 'type' => 'xsd:string'),
        'Extensions' => array('name' => 'Extensions', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ActivitySet' => array('name' => 'ActivitySet', 'type' => 'tns:ActivitySetList'),
        'NMChiUseCaseChiUseCase' => array('name' => 'NMChiUseCaseChiUseCase', 'type' => 'tns:NMChiUseCaseChiUseCaseList'),
        'NMChiUseCaseChiUseCase' => array('name' => 'NMChiUseCaseChiUseCase', 'type' => 'tns:NMChiUseCaseChiUseCaseList'),
        'NMUCActor' => array('name' => 'NMUCActor', 'type' => 'tns:NMUCActorList'),
        'ChiController' => array('name' => 'ChiController', 'type' => 'tns:ChiControllerList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessUseCaseList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessUseCase[]')
    ),
    'tns:ChiBusinessUseCase'
);
$server->register('getChiBusinessUseCaseList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessUseCaseList'), $NAMESPACE);
  
$server->register('createChiBusinessUseCase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessUseCase'=>'tns:ChiBusinessUseCase', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessUseCase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessUseCase'), $NAMESPACE);
  
$server->register('updateChiBusinessUseCase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessUseCase'=>'tns:ChiBusinessUseCase', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessUseCase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiBusinessUseCaseCore
 */
$server->wsdl->addComplexType('ChiBusinessUseCaseCore', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_chifeature_id' => array('name' => 'fk_chifeature_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'PrimaryActor' => array('name' => 'PrimaryActor', 'type' => 'xsd:string'),
        'OtherActors' => array('name' => 'OtherActors', 'type' => 'xsd:string'),
        'GoalInContext' => array('name' => 'GoalInContext', 'type' => 'xsd:string'),
        'Scope' => array('name' => 'Scope', 'type' => 'xsd:string'),
        'Level' => array('name' => 'Level', 'type' => 'xsd:string'),
        'Stakeholders' => array('name' => 'Stakeholders', 'type' => 'xsd:string'),
        'Precondition' => array('name' => 'Precondition', 'type' => 'xsd:string'),
        'Trigger' => array('name' => 'Trigger', 'type' => 'xsd:string'),
        'MainSuccessScenario' => array('name' => 'MainSuccessScenario', 'type' => 'xsd:string'),
        'Extensions' => array('name' => 'Extensions', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'NMChiUseCaseChiUseCase' => array('name' => 'NMChiUseCaseChiUseCase', 'type' => 'tns:NMChiUseCaseChiUseCaseList'),
        'NMChiUseCaseChiUseCase' => array('name' => 'NMChiUseCaseChiUseCase', 'type' => 'tns:NMChiUseCaseChiUseCaseList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'ChiController' => array('name' => 'ChiController', 'type' => 'tns:ChiControllerList'),
        'ActivitySet' => array('name' => 'ActivitySet', 'type' => 'tns:ActivitySetList'),
        'NMUCActor' => array('name' => 'NMUCActor', 'type' => 'tns:NMUCActorList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessUseCaseCoreList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessUseCaseCore[]')
    ),
    'tns:ChiBusinessUseCaseCore'
);
$server->register('getChiBusinessUseCaseCoreList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessUseCaseCoreList'), $NAMESPACE);
  
$server->register('createChiBusinessUseCaseCore',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessUseCaseCore'=>'tns:ChiBusinessUseCaseCore', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessUseCaseCore',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessUseCaseCore'), $NAMESPACE);
  
$server->register('updateChiBusinessUseCaseCore',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessUseCaseCore'=>'tns:ChiBusinessUseCaseCore', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessUseCaseCore',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiBusinessPartnerActive
 */
$server->wsdl->addComplexType('ChiBusinessPartnerActive', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chibusinesspartneractive_id' => array('name' => 'fk_chibusinesspartneractive_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiBusinessPartnerActive' => array('name' => 'ChiBusinessPartnerActive', 'type' => 'tns:ChiBusinessPartnerActiveList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'NMUCActor' => array('name' => 'NMUCActor', 'type' => 'tns:NMUCActorList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessPartnerActiveList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessPartnerActive[]')
    ),
    'tns:ChiBusinessPartnerActive'
);
$server->register('getChiBusinessPartnerActiveList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessPartnerActiveList'), $NAMESPACE);
  
$server->register('createChiBusinessPartnerActive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartnerActive'=>'tns:ChiBusinessPartnerActive', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessPartnerActive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessPartnerActive'), $NAMESPACE);
  
$server->register('updateChiBusinessPartnerActive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartnerActive'=>'tns:ChiBusinessPartnerActive', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessPartnerActive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiBusinessPartnerPassive
 */
$server->wsdl->addComplexType('ChiBusinessPartnerPassive', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chibusinesspartnerpassive_id' => array('name' => 'fk_chibusinesspartnerpassive_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiBusinessPartnerPassive' => array('name' => 'ChiBusinessPartnerPassive', 'type' => 'tns:ChiBusinessPartnerPassiveList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'NMUCActor' => array('name' => 'NMUCActor', 'type' => 'tns:NMUCActorList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBusinessPartnerPassiveList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBusinessPartnerPassive[]')
    ),
    'tns:ChiBusinessPartnerPassive'
);
$server->register('getChiBusinessPartnerPassiveList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiBusinessPartnerPassiveList'), $NAMESPACE);
  
$server->register('createChiBusinessPartnerPassive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartnerPassive'=>'tns:ChiBusinessPartnerPassive', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiBusinessPartnerPassive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiBusinessPartnerPassive'), $NAMESPACE);
  
$server->register('updateChiBusinessPartnerPassive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiBusinessPartnerPassive'=>'tns:ChiBusinessPartnerPassive', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiBusinessPartnerPassive',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiWorkerExternal
 */
$server->wsdl->addComplexType('ChiWorkerExternal', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chiworkerexternal_id' => array('name' => 'fk_chiworkerexternal_id', 'type' => 'xsd:string'),
        'is_OfflineUser' => array('name' => 'is_OfflineUser', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiWorkerExternal' => array('name' => 'ChiWorkerExternal', 'type' => 'tns:ChiWorkerExternalList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'NMUCActor' => array('name' => 'NMUCActor', 'type' => 'tns:NMUCActorList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiWorkerExternalList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiWorkerExternal[]')
    ),
    'tns:ChiWorkerExternal'
);
$server->register('getChiWorkerExternalList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiWorkerExternalList'), $NAMESPACE);
  
$server->register('createChiWorkerExternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorkerExternal'=>'tns:ChiWorkerExternal', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiWorkerExternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiWorkerExternal'), $NAMESPACE);
  
$server->register('updateChiWorkerExternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorkerExternal'=>'tns:ChiWorkerExternal', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiWorkerExternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiWorkerInternal
 */
$server->wsdl->addComplexType('ChiWorkerInternal', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chiworkerinternal_id' => array('name' => 'fk_chiworkerinternal_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiWorkerInternal' => array('name' => 'ChiWorkerInternal', 'type' => 'tns:ChiWorkerInternalList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'NMUCActor' => array('name' => 'NMUCActor', 'type' => 'tns:NMUCActorList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiWorkerInternalList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiWorkerInternal[]')
    ),
    'tns:ChiWorkerInternal'
);
$server->register('getChiWorkerInternalList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiWorkerInternalList'), $NAMESPACE);
  
$server->register('createChiWorkerInternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorkerInternal'=>'tns:ChiWorkerInternal', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiWorkerInternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiWorkerInternal'), $NAMESPACE);
  
$server->register('updateChiWorkerInternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiWorkerInternal'=>'tns:ChiWorkerInternal', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiWorkerInternal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for NMUCActor
 */
$server->wsdl->addComplexType('NMUCActor', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chiworkerexternal_id' => array('name' => 'fk_chiworkerexternal_id', 'type' => 'xsd:string'),
        'fk_chiworkerinternal_id' => array('name' => 'fk_chiworkerinternal_id', 'type' => 'xsd:string'),
        'fk_chiworker_id' => array('name' => 'fk_chiworker_id', 'type' => 'xsd:string'),
        'fk_chibusinesspartneractive_id' => array('name' => 'fk_chibusinesspartneractive_id', 'type' => 'xsd:string'),
        'fk_chibusinesspartnerpassive_id' => array('name' => 'fk_chibusinesspartnerpassive_id', 'type' => 'xsd:string'),
        'fk_chibusinesspartner_id' => array('name' => 'fk_chibusinesspartner_id', 'type' => 'xsd:string'),
        'fk_chibusinessusecasecore_id' => array('name' => 'fk_chibusinessusecasecore_id', 'type' => 'xsd:string'),
        'fk_chibusinessusecase_id' => array('name' => 'fk_chibusinessusecase_id', 'type' => 'xsd:string'),
        'fk_actor_id' => array('name' => 'fk_actor_id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMUCActorList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMUCActor[]')
    ),
    'tns:NMUCActor'
);

/**
 * WSDL definition for ChiGoal
 */
$server->wsdl->addComplexType('ChiGoal', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chigoal_id' => array('name' => 'fk_chigoal_id', 'type' => 'xsd:string'),
        'Priority' => array('name' => 'Priority', 'type' => 'xsd:string'),
        'Value_ammount' => array('name' => 'Value_ammount', 'type' => 'xsd:string'),
        'Value_Goal' => array('name' => 'Value_Goal', 'type' => 'xsd:string'),
        'Value_Name' => array('name' => 'Value_Name', 'type' => 'xsd:string'),
        'GoalType' => array('name' => 'GoalType', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiGoal' => array('name' => 'ChiGoal', 'type' => 'tns:ChiGoalList'),
        'ChiRequirement' => array('name' => 'ChiRequirement', 'type' => 'tns:ChiRequirementList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiGoalList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiGoal[]')
    ),
    'tns:ChiGoal'
);
$server->register('getChiGoalList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiGoalList'), $NAMESPACE);
  
$server->register('createChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiGoal'=>'tns:ChiGoal', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiGoal'), $NAMESPACE);
  
$server->register('updateChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiGoal'=>'tns:ChiGoal', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiGoal',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiRequirement
 */
$server->wsdl->addComplexType('ChiRequirement', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chirequirement_id' => array('name' => 'fk_chirequirement_id', 'type' => 'xsd:string'),
        'fk_chigoal_id' => array('name' => 'fk_chigoal_id', 'type' => 'xsd:string'),
        'reqType' => array('name' => 'reqType', 'type' => 'xsd:string'),
        'Priority' => array('name' => 'Priority', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Proofreader' => array('name' => 'Proofreader', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiRequirement' => array('name' => 'ChiRequirement', 'type' => 'tns:ChiRequirementList'),
        'ChiIssue' => array('name' => 'ChiIssue', 'type' => 'tns:ChiIssueList'),
        'NMFeatureRequirements' => array('name' => 'NMFeatureRequirements', 'type' => 'tns:NMFeatureRequirementsList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiRequirementList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiRequirement[]')
    ),
    'tns:ChiRequirement'
);
$server->register('getChiRequirementList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiRequirementList'), $NAMESPACE);
  
$server->register('createChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirement'=>'tns:ChiRequirement', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiRequirement'), $NAMESPACE);
  
$server->register('updateChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirement'=>'tns:ChiRequirement', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiRequirement',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiFeature
 */
$server->wsdl->addComplexType('ChiFeature', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Proofreader' => array('name' => 'Proofreader', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiBusinessUseCase' => array('name' => 'ChiBusinessUseCase', 'type' => 'tns:ChiBusinessUseCaseList'),
        'NMFeatureRequirements' => array('name' => 'NMFeatureRequirements', 'type' => 'tns:NMFeatureRequirementsList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'ChiBusinessUseCaseCore' => array('name' => 'ChiBusinessUseCaseCore', 'type' => 'tns:ChiBusinessUseCaseCoreList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiFeatureList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiFeature[]')
    ),
    'tns:ChiFeature'
);
$server->register('getChiFeatureList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiFeatureList'), $NAMESPACE);
  
$server->register('createChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeature'=>'tns:ChiFeature', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiFeature'), $NAMESPACE);
  
$server->register('updateChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeature'=>'tns:ChiFeature', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiIssue
 */
$server->wsdl->addComplexType('ChiIssue', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chirequirement_id' => array('name' => 'fk_chirequirement_id', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Responsible' => array('name' => 'Responsible', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiIssueList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiIssue[]')
    ),
    'tns:ChiIssue'
);
$server->register('getChiIssueList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiIssueList'), $NAMESPACE);
  
$server->register('createChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiIssue'=>'tns:ChiIssue', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiIssue'), $NAMESPACE);
  
$server->register('updateChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiIssue'=>'tns:ChiIssue', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiIssue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiFeatureStatus
 */
$server->wsdl->addComplexType('ChiFeatureStatus', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiFeatureStatusList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiFeatureStatus[]')
    ),
    'tns:ChiFeatureStatus'
);
$server->register('getChiFeatureStatusList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiFeatureStatusList'), $NAMESPACE);
  
$server->register('createChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeatureStatus'=>'tns:ChiFeatureStatus', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiFeatureStatus'), $NAMESPACE);
  
$server->register('updateChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiFeatureStatus'=>'tns:ChiFeatureStatus', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiFeatureStatus',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiGoalType
 */
$server->wsdl->addComplexType('ChiGoalType', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiGoalTypeList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiGoalType[]')
    ),
    'tns:ChiGoalType'
);
$server->register('getChiGoalTypeList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiGoalTypeList'), $NAMESPACE);
  
$server->register('createChiGoalType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiGoalType'=>'tns:ChiGoalType', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiGoalType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiGoalType'), $NAMESPACE);
  
$server->register('updateChiGoalType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiGoalType'=>'tns:ChiGoalType', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiGoalType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiRequirementStatus
 */
$server->wsdl->addComplexType('ChiRequirementStatus', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiRequirementStatusList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiRequirementStatus[]')
    ),
    'tns:ChiRequirementStatus'
);

/**
 * WSDL definition for ChiRequirementType
 */
$server->wsdl->addComplexType('ChiRequirementType', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiRequirementTypeList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiRequirementType[]')
    ),
    'tns:ChiRequirementType'
);
$server->register('getChiRequirementTypeList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiRequirementTypeList'), $NAMESPACE);
  
$server->register('createChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirementType'=>'tns:ChiRequirementType', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiRequirementType'), $NAMESPACE);
  
$server->register('updateChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiRequirementType'=>'tns:ChiRequirementType', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiRequirementType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for NMFeatureRequirements
 */
$server->wsdl->addComplexType('NMFeatureRequirements', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chifeature_id' => array('name' => 'fk_chifeature_id', 'type' => 'xsd:string'),
        'fk_chirequirement_id' => array('name' => 'fk_chirequirement_id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMFeatureRequirementsList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMFeatureRequirements[]')
    ),
    'tns:NMFeatureRequirements'
);

/**
 * WSDL definition for ChiActionKey
 */
$server->wsdl->addComplexType('ChiActionKey', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'action' => array('name' => 'action', 'type' => 'xsd:string'),
        'config' => array('name' => 'config', 'type' => 'xsd:string'),
        'context' => array('name' => 'context', 'type' => 'xsd:string'),
        'sourceMultiplicity' => array('name' => 'sourceMultiplicity', 'type' => 'xsd:string'),
        'sourceNavigability' => array('name' => 'sourceNavigability', 'type' => 'xsd:string'),
        'targetMultiplicity' => array('name' => 'targetMultiplicity', 'type' => 'xsd:string'),
        'targetNavigability' => array('name' => 'targetNavigability', 'type' => 'xsd:string'),
        'relationType' => array('name' => 'relationType', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiActionKeyList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiActionKey[]')
    ),
    'tns:ChiActionKey'
);
$server->register('getChiActionKeyList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiActionKeyList'), $NAMESPACE);
  
$server->register('createChiActionKey',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiActionKey'=>'tns:ChiActionKey', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiActionKey',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiActionKey'), $NAMESPACE);
  
$server->register('updateChiActionKey',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiActionKey'=>'tns:ChiActionKey', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiActionKey',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for NMChiControllerActionKeyChiController
 */
$server->wsdl->addComplexType('NMChiControllerActionKeyChiController', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chicontrolleractionkeytarget_id' => array('name' => 'fk_chicontrolleractionkeytarget_id', 'type' => 'xsd:string'),
        'fk_chicontrolleractionkeysource_id' => array('name' => 'fk_chicontrolleractionkeysource_id', 'type' => 'xsd:string'),
        'action' => array('name' => 'action', 'type' => 'xsd:string'),
        'config' => array('name' => 'config', 'type' => 'xsd:string'),
        'context' => array('name' => 'context', 'type' => 'xsd:string'),
        'sourceMultiplicity' => array('name' => 'sourceMultiplicity', 'type' => 'xsd:string'),
        'sourceNavigability' => array('name' => 'sourceNavigability', 'type' => 'xsd:string'),
        'targetMultiplicity' => array('name' => 'targetMultiplicity', 'type' => 'xsd:string'),
        'targetNavigability' => array('name' => 'targetNavigability', 'type' => 'xsd:string'),
        'relationType' => array('name' => 'relationType', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMChiControllerActionKeyChiControllerList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMChiControllerActionKeyChiController[]')
    ),
    'tns:NMChiControllerActionKeyChiController'
);

/**
 * WSDL definition for NMChiControllerActionKeyChiView
 */
$server->wsdl->addComplexType('NMChiControllerActionKeyChiView', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chiview_id' => array('name' => 'fk_chiview_id', 'type' => 'xsd:string'),
        'fk_chicontroller_id' => array('name' => 'fk_chicontroller_id', 'type' => 'xsd:string'),
        'action' => array('name' => 'action', 'type' => 'xsd:string'),
        'config' => array('name' => 'config', 'type' => 'xsd:string'),
        'context' => array('name' => 'context', 'type' => 'xsd:string'),
        'sourceMultiplicity' => array('name' => 'sourceMultiplicity', 'type' => 'xsd:string'),
        'sourceNavigability' => array('name' => 'sourceNavigability', 'type' => 'xsd:string'),
        'targetMultiplicity' => array('name' => 'targetMultiplicity', 'type' => 'xsd:string'),
        'targetNavigability' => array('name' => 'targetNavigability', 'type' => 'xsd:string'),
        'relationType' => array('name' => 'relationType', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMChiControllerActionKeyChiViewList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMChiControllerActionKeyChiView[]')
    ),
    'tns:NMChiControllerActionKeyChiView'
);

/**
 * WSDL definition for NMChiNodeChiMany2Many
 */
$server->wsdl->addComplexType('NMChiNodeChiMany2Many', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chinode_id' => array('name' => 'fk_chinode_id', 'type' => 'xsd:string'),
        'fk_chinodemanytomany_id' => array('name' => 'fk_chinodemanytomany_id', 'type' => 'xsd:string'),
        'sourceMultiplicity' => array('name' => 'sourceMultiplicity', 'type' => 'xsd:string'),
        'sourceNavigability' => array('name' => 'sourceNavigability', 'type' => 'xsd:string'),
        'targetMultiplicity' => array('name' => 'targetMultiplicity', 'type' => 'xsd:string'),
        'targetNavigability' => array('name' => 'targetNavigability', 'type' => 'xsd:string'),
        'relationType' => array('name' => 'relationType', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMChiNodeChiMany2ManyList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMChiNodeChiMany2Many[]')
    ),
    'tns:NMChiNodeChiMany2Many'
);

/**
 * WSDL definition for NMChiControllerChiController
 */
$server->wsdl->addComplexType('NMChiControllerChiController', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chicontrollertarget_id' => array('name' => 'fk_chicontrollertarget_id', 'type' => 'xsd:string'),
        'fk_chicontrollersource_id' => array('name' => 'fk_chicontrollersource_id', 'type' => 'xsd:string'),
        'sourceMultiplicity' => array('name' => 'sourceMultiplicity', 'type' => 'xsd:string'),
        'sourceNavigability' => array('name' => 'sourceNavigability', 'type' => 'xsd:string'),
        'targetMultiplicity' => array('name' => 'targetMultiplicity', 'type' => 'xsd:string'),
        'targetNavigability' => array('name' => 'targetNavigability', 'type' => 'xsd:string'),
        'relationType' => array('name' => 'relationType', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMChiControllerChiControllerList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMChiControllerChiController[]')
    ),
    'tns:NMChiControllerChiController'
);

/**
 * WSDL definition for Feature
 */
$server->wsdl->addComplexType('Feature', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'visibility' => array('name' => 'visibility', 'type' => 'xsd:string'),
        'isAbstract' => array('name' => 'isAbstract', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('FeatureList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Feature[]')
    ),
    'tns:Feature'
);
$server->register('getFeatureList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:FeatureList'), $NAMESPACE);
  
$server->register('createFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Feature'=>'tns:Feature', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Feature'), $NAMESPACE);
  
$server->register('updateFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Feature'=>'tns:Feature', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteFeature',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiNodeManyToMany
 */
$server->wsdl->addComplexType('ChiNodeManyToMany', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chicontroller_id' => array('name' => 'fk_chicontroller_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'display_value' => array('name' => 'display_value', 'type' => 'xsd:string'),
        'parent_order' => array('name' => 'parent_order', 'type' => 'xsd:string'),
        'child_order' => array('name' => 'child_order', 'type' => 'xsd:string'),
        'pk_name' => array('name' => 'pk_name', 'type' => 'xsd:string'),
        'is_searchable' => array('name' => 'is_searchable', 'type' => 'xsd:string'),
        'orderby' => array('name' => 'orderby', 'type' => 'xsd:string'),
        'is_soap' => array('name' => 'is_soap', 'type' => 'xsd:string'),
        'initparams' => array('name' => 'initparams', 'type' => 'xsd:string'),
        'table_name' => array('name' => 'table_name', 'type' => 'xsd:string'),
        'is_ordered' => array('name' => 'is_ordered', 'type' => 'xsd:string'),
        'visibility' => array('name' => 'visibility', 'type' => 'xsd:string'),
        'isAbstract' => array('name' => 'isAbstract', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'NMChiNodeChiMany2Many' => array('name' => 'NMChiNodeChiMany2Many', 'type' => 'tns:NMChiNodeChiMany2ManyList'),
        'ChiAssociation' => array('name' => 'ChiAssociation', 'type' => 'tns:ChiAssociationList'),
        'ChiAssociation' => array('name' => 'ChiAssociation', 'type' => 'tns:ChiAssociationList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'ChiValue' => array('name' => 'ChiValue', 'type' => 'tns:ChiValueList'),
        'ChiView' => array('name' => 'ChiView', 'type' => 'tns:ChiViewList'),
        'ChiObject' => array('name' => 'ChiObject', 'type' => 'tns:ChiObjectList'),
        'ChiValueRef' => array('name' => 'ChiValueRef', 'type' => 'tns:ChiValueRefList'),
        'Operation' => array('name' => 'Operation', 'type' => 'tns:OperationList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiNodeManyToManyList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiNodeManyToMany[]')
    ),
    'tns:ChiNodeManyToMany'
);
$server->register('getChiNodeManyToManyList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiNodeManyToManyList'), $NAMESPACE);
  
$server->register('createChiNodeManyToMany',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiNodeManyToMany'=>'tns:ChiNodeManyToMany', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiNodeManyToMany',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiNodeManyToMany'), $NAMESPACE);
  
$server->register('updateChiNodeManyToMany',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiNodeManyToMany'=>'tns:ChiNodeManyToMany', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiNodeManyToMany',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiValueRef
 */
$server->wsdl->addComplexType('ChiValueRef', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chinodemanytomany_id' => array('name' => 'fk_chinodemanytomany_id', 'type' => 'xsd:string'),
        'fk_chinode_id' => array('name' => 'fk_chinode_id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiValueRefList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiValueRef[]')
    ),
    'tns:ChiValueRef'
);
$server->register('getChiValueRefList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiValueRefList'), $NAMESPACE);
  
$server->register('createChiValueRef',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiValueRef'=>'tns:ChiValueRef', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiValueRef',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiValueRef'), $NAMESPACE);
  
$server->register('updateChiValueRef',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiValueRef'=>'tns:ChiValueRef', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiValueRef',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Property
 */
$server->wsdl->addComplexType('Property', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chicontroller_id' => array('name' => 'fk_chicontroller_id', 'type' => 'xsd:string'),
        'fk_chisystem_id' => array('name' => 'fk_chisystem_id', 'type' => 'xsd:string'),
        'default' => array('name' => 'default', 'type' => 'xsd:string'),
        'PropertyType' => array('name' => 'PropertyType', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('PropertyList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Property[]')
    ),
    'tns:Property'
);
$server->register('getPropertyList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:PropertyList'), $NAMESPACE);
  
$server->register('createProperty',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Property'=>'tns:Property', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readProperty',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Property'), $NAMESPACE);
  
$server->register('updateProperty',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Property'=>'tns:Property', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteProperty',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiNode
 */
$server->wsdl->addComplexType('ChiNode', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chicontroller_id' => array('name' => 'fk_chicontroller_id', 'type' => 'xsd:string'),
        'display_value' => array('name' => 'display_value', 'type' => 'xsd:string'),
        'parent_order' => array('name' => 'parent_order', 'type' => 'xsd:string'),
        'child_order' => array('name' => 'child_order', 'type' => 'xsd:string'),
        'pk_name' => array('name' => 'pk_name', 'type' => 'xsd:string'),
        'is_searchable' => array('name' => 'is_searchable', 'type' => 'xsd:string'),
        'orderby' => array('name' => 'orderby', 'type' => 'xsd:string'),
        'is_soap' => array('name' => 'is_soap', 'type' => 'xsd:string'),
        'initparams' => array('name' => 'initparams', 'type' => 'xsd:string'),
        'table_name' => array('name' => 'table_name', 'type' => 'xsd:string'),
        'is_ordered' => array('name' => 'is_ordered', 'type' => 'xsd:string'),
        'visibility' => array('name' => 'visibility', 'type' => 'xsd:string'),
        'isAbstract' => array('name' => 'isAbstract', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiObject' => array('name' => 'ChiObject', 'type' => 'tns:ChiObjectList'),
        'NMChiNodeChiMany2Many' => array('name' => 'NMChiNodeChiMany2Many', 'type' => 'tns:NMChiNodeChiMany2ManyList'),
        'ChiValueRef' => array('name' => 'ChiValueRef', 'type' => 'tns:ChiValueRefList'),
        'ChiView' => array('name' => 'ChiView', 'type' => 'tns:ChiViewList'),
        'ChiValue' => array('name' => 'ChiValue', 'type' => 'tns:ChiValueList'),
        'ChiAssociation' => array('name' => 'ChiAssociation', 'type' => 'tns:ChiAssociationList'),
        'ChiAssociation' => array('name' => 'ChiAssociation', 'type' => 'tns:ChiAssociationList'),
        'Operation' => array('name' => 'Operation', 'type' => 'tns:OperationList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiNodeList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiNode[]')
    ),
    'tns:ChiNode'
);
$server->register('getChiNodeList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiNodeList'), $NAMESPACE);
  
$server->register('createChiNode',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiNode'=>'tns:ChiNode', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiNode',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiNode'), $NAMESPACE);
  
$server->register('updateChiNode',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiNode'=>'tns:ChiNode', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiNode',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiController
 */
$server->wsdl->addComplexType('ChiController', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chibusinessusecasecore_id' => array('name' => 'fk_chibusinessusecasecore_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chibusinessusecase_id' => array('name' => 'fk_chibusinessusecase_id', 'type' => 'xsd:string'),
        'visibility' => array('name' => 'visibility', 'type' => 'xsd:string'),
        'isAbstract' => array('name' => 'isAbstract', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'NMChiControllerActionKeyChiController' => array('name' => 'NMChiControllerActionKeyChiController', 'type' => 'tns:NMChiControllerActionKeyChiControllerList'),
        'NMChiControllerActionKeyChiController' => array('name' => 'NMChiControllerActionKeyChiController', 'type' => 'tns:NMChiControllerActionKeyChiControllerList'),
        'NMChiControllerActionKeyChiView' => array('name' => 'NMChiControllerActionKeyChiView', 'type' => 'tns:NMChiControllerActionKeyChiViewList'),
        'NMChiControllerChiController' => array('name' => 'NMChiControllerChiController', 'type' => 'tns:NMChiControllerChiControllerList'),
        'NMChiControllerChiController' => array('name' => 'NMChiControllerChiController', 'type' => 'tns:NMChiControllerChiControllerList'),
        'Property' => array('name' => 'Property', 'type' => 'tns:PropertyList'),
        'ChiNode' => array('name' => 'ChiNode', 'type' => 'tns:ChiNodeList'),
        'Operation' => array('name' => 'Operation', 'type' => 'tns:OperationList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'ChiValue' => array('name' => 'ChiValue', 'type' => 'tns:ChiValueList'),
        'ChiNodeManyToMany' => array('name' => 'ChiNodeManyToMany', 'type' => 'tns:ChiNodeManyToManyList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiControllerList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiController[]')
    ),
    'tns:ChiController'
);
$server->register('getChiControllerList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiControllerList'), $NAMESPACE);
  
$server->register('createChiController',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiController'=>'tns:ChiController', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiController',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiController'), $NAMESPACE);
  
$server->register('updateChiController',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiController'=>'tns:ChiController', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiController',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiView
 */
$server->wsdl->addComplexType('ChiView', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chinodemanytomany_id' => array('name' => 'fk_chinodemanytomany_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chinode_id' => array('name' => 'fk_chinode_id', 'type' => 'xsd:string'),
        'visibility' => array('name' => 'visibility', 'type' => 'xsd:string'),
        'isAbstract' => array('name' => 'isAbstract', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'NMChiControllerActionKeyChiView' => array('name' => 'NMChiControllerActionKeyChiView', 'type' => 'tns:NMChiControllerActionKeyChiViewList'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiViewList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiView[]')
    ),
    'tns:ChiView'
);
$server->register('getChiViewList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiViewList'), $NAMESPACE);
  
$server->register('createChiView',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiView'=>'tns:ChiView', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiView',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiView'), $NAMESPACE);
  
$server->register('updateChiView',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiView'=>'tns:ChiView', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiView',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiAuthors
 */
$server->wsdl->addComplexType('ChiAuthors', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Role' => array('name' => 'Role', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiAuthorsList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiAuthors[]')
    ),
    'tns:ChiAuthors'
);
$server->register('getChiAuthorsList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiAuthorsList'), $NAMESPACE);
  
$server->register('createChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiAuthors'=>'tns:ChiAuthors', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiAuthors'), $NAMESPACE);
  
$server->register('updateChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiAuthors'=>'tns:ChiAuthors', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiAuthors',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiValue
 */
$server->wsdl->addComplexType('ChiValue', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chicontroller_id' => array('name' => 'fk_chicontroller_id', 'type' => 'xsd:string'),
        'fk_chisystem_id' => array('name' => 'fk_chisystem_id', 'type' => 'xsd:string'),
        'fk_chinodemanytomany_id' => array('name' => 'fk_chinodemanytomany_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chinode_id' => array('name' => 'fk_chinode_id', 'type' => 'xsd:string'),
        'display_type' => array('name' => 'display_type', 'type' => 'xsd:string'),
        'restrictions_description' => array('name' => 'restrictions_description', 'type' => 'xsd:string'),
        'restrictions_match' => array('name' => 'restrictions_match', 'type' => 'xsd:string'),
        'restrictions_not_match' => array('name' => 'restrictions_not_match', 'type' => 'xsd:string'),
        'input_type' => array('name' => 'input_type', 'type' => 'xsd:string'),
        'app_data_type' => array('name' => 'app_data_type', 'type' => 'xsd:string'),
        'db_data_type' => array('name' => 'db_data_type', 'type' => 'xsd:string'),
        'is_editable' => array('name' => 'is_editable', 'type' => 'xsd:string'),
        'column_name' => array('name' => 'column_name', 'type' => 'xsd:string'),
        'default' => array('name' => 'default', 'type' => 'xsd:string'),
        'PropertyType' => array('name' => 'PropertyType', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiValueList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiValue[]')
    ),
    'tns:ChiValue'
);
$server->register('getChiValueList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiValueList'), $NAMESPACE);
  
$server->register('createChiValue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiValue'=>'tns:ChiValue', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiValue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiValue'), $NAMESPACE);
  
$server->register('updateChiValue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiValue'=>'tns:ChiValue', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiValue',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for DisplayType
 */
$server->wsdl->addComplexType('DisplayType', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('DisplayTypeList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:DisplayType[]')
    ),
    'tns:DisplayType'
);
$server->register('getDisplayTypeList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:DisplayTypeList'), $NAMESPACE);
  
$server->register('createDisplayType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'DisplayType'=>'tns:DisplayType', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readDisplayType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:DisplayType'), $NAMESPACE);
  
$server->register('updateDisplayType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'DisplayType'=>'tns:DisplayType', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteDisplayType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for InputType
 */
$server->wsdl->addComplexType('InputType', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('InputTypeList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:InputType[]')
    ),
    'tns:InputType'
);
$server->register('getInputTypeList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:InputTypeList'), $NAMESPACE);
  
$server->register('createInputType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'InputType'=>'tns:InputType', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readInputType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:InputType'), $NAMESPACE);
  
$server->register('updateInputType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'InputType'=>'tns:InputType', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteInputType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiAssociation
 */
$server->wsdl->addComplexType('ChiAssociation', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chinodetarget_id' => array('name' => 'fk_chinodetarget_id', 'type' => 'xsd:string'),
        'fk_chinodesource_id' => array('name' => 'fk_chinodesource_id', 'type' => 'xsd:string'),
        'fk_chinodemanytomanysource_id' => array('name' => 'fk_chinodemanytomanysource_id', 'type' => 'xsd:string'),
        'fk_chinodemanytomanytarget_id' => array('name' => 'fk_chinodemanytomanytarget_id', 'type' => 'xsd:string'),
        'fk_name' => array('name' => 'fk_name', 'type' => 'xsd:string'),
        'sourceMultiplicity' => array('name' => 'sourceMultiplicity', 'type' => 'xsd:string'),
        'sourceNavigability' => array('name' => 'sourceNavigability', 'type' => 'xsd:string'),
        'targetMultiplicity' => array('name' => 'targetMultiplicity', 'type' => 'xsd:string'),
        'targetNavigability' => array('name' => 'targetNavigability', 'type' => 'xsd:string'),
        'relationType' => array('name' => 'relationType', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiAssociationList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiAssociation[]')
    ),
    'tns:ChiAssociation'
);
$server->register('getChiAssociationList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiAssociationList'), $NAMESPACE);
  
$server->register('createChiAssociation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiAssociation'=>'tns:ChiAssociation', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiAssociation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiAssociation'), $NAMESPACE);
  
$server->register('updateChiAssociation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiAssociation'=>'tns:ChiAssociation', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiAssociation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Operation
 */
$server->wsdl->addComplexType('Operation', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chinodemanytomany_id' => array('name' => 'fk_chinodemanytomany_id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_chicontroller_id' => array('name' => 'fk_chicontroller_id', 'type' => 'xsd:string'),
        'fk_chinode_id' => array('name' => 'fk_chinode_id', 'type' => 'xsd:string'),
        'ReturnType' => array('name' => 'ReturnType', 'type' => 'xsd:string'),
        'Parameters' => array('name' => 'Parameters', 'type' => 'xsd:string'),
        'visibility' => array('name' => 'visibility', 'type' => 'xsd:string'),
        'isAbstract' => array('name' => 'isAbstract', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('OperationList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Operation[]')
    ),
    'tns:Operation'
);
$server->register('getOperationList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:OperationList'), $NAMESPACE);
  
$server->register('createOperation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Operation'=>'tns:Operation', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readOperation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Operation'), $NAMESPACE);
  
$server->register('updateOperation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Operation'=>'tns:Operation', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteOperation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Relation
 */
$server->wsdl->addComplexType('Relation', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'sourceMultiplicity' => array('name' => 'sourceMultiplicity', 'type' => 'xsd:string'),
        'sourceNavigability' => array('name' => 'sourceNavigability', 'type' => 'xsd:string'),
        'targetMultiplicity' => array('name' => 'targetMultiplicity', 'type' => 'xsd:string'),
        'targetNavigability' => array('name' => 'targetNavigability', 'type' => 'xsd:string'),
        'relationType' => array('name' => 'relationType', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('RelationList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Relation[]')
    ),
    'tns:Relation'
);
$server->register('getRelationList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:RelationList'), $NAMESPACE);
  
$server->register('createRelation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Relation'=>'tns:Relation', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readRelation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Relation'), $NAMESPACE);
  
$server->register('updateRelation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Relation'=>'tns:Relation', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteRelation',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for RelationMultiplicity
 */
$server->wsdl->addComplexType('RelationMultiplicity', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('RelationMultiplicityList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:RelationMultiplicity[]')
    ),
    'tns:RelationMultiplicity'
);

/**
 * WSDL definition for RelationType
 */
$server->wsdl->addComplexType('RelationType', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('RelationTypeList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:RelationType[]')
    ),
    'tns:RelationType'
);
$server->register('getRelationTypeList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:RelationTypeList'), $NAMESPACE);
  
$server->register('createRelationType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'RelationType'=>'tns:RelationType', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readRelationType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:RelationType'), $NAMESPACE);
  
$server->register('updateRelationType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'RelationType'=>'tns:RelationType', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteRelationType',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiClass
 */
$server->wsdl->addComplexType('ChiClass', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'visibility' => array('name' => 'visibility', 'type' => 'xsd:string'),
        'isAbstract' => array('name' => 'isAbstract', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiClassList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiClass[]')
    ),
    'tns:ChiClass'
);
$server->register('getChiClassList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ChiClassList'), $NAMESPACE);
  
$server->register('createChiClass',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiClass'=>'tns:ChiClass', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChiClass',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:ChiClass'), $NAMESPACE);
  
$server->register('updateChiClass',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'ChiClass'=>'tns:ChiClass', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChiClass',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for ChiBaseStatus
 */
$server->wsdl->addComplexType('ChiBaseStatus', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBaseStatusList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBaseStatus[]')
    ),
    'tns:ChiBaseStatus'
);

/**
 * WSDL definition for Counter
 */
$server->wsdl->addComplexType('Counter', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Activity' => array('name' => 'Activity', 'type' => 'xsd:string'),
        'ActivityDecision' => array('name' => 'ActivityDecision', 'type' => 'xsd:string'),
        'ActivityFinal' => array('name' => 'ActivityFinal', 'type' => 'xsd:string'),
        'ActivityInitial' => array('name' => 'ActivityInitial', 'type' => 'xsd:string'),
        'ActivityReceive' => array('name' => 'ActivityReceive', 'type' => 'xsd:string'),
        'ActivitySend' => array('name' => 'ActivitySend', 'type' => 'xsd:string'),
        'ChiBusinessPartner' => array('name' => 'ChiBusinessPartner', 'type' => 'xsd:string'),
        'ChiBusinessPartnerActive' => array('name' => 'ChiBusinessPartnerActive', 'type' => 'xsd:string'),
        'ChiBusinessPartnerPassive' => array('name' => 'ChiBusinessPartnerPassive', 'type' => 'xsd:string'),
        'ChiBusinessProcess' => array('name' => 'ChiBusinessProcess', 'type' => 'xsd:string'),
        'ChiBusinessUseCase' => array('name' => 'ChiBusinessUseCase', 'type' => 'xsd:string'),
        'ChiBusinessUseCaseCore' => array('name' => 'ChiBusinessUseCaseCore', 'type' => 'xsd:string'),
        'ChiController' => array('name' => 'ChiController', 'type' => 'xsd:string'),
        'ChiFeature' => array('name' => 'ChiFeature', 'type' => 'xsd:string'),
        'ChiGoal' => array('name' => 'ChiGoal', 'type' => 'xsd:string'),
        'ChiIssue' => array('name' => 'ChiIssue', 'type' => 'xsd:string'),
        'ChiNode' => array('name' => 'ChiNode', 'type' => 'xsd:string'),
        'ChiRequirement' => array('name' => 'ChiRequirement', 'type' => 'xsd:string'),
        'ChiSystem' => array('name' => 'ChiSystem', 'type' => 'xsd:string'),
        'ChiValue' => array('name' => 'ChiValue', 'type' => 'xsd:string'),
        'ChiView' => array('name' => 'ChiView', 'type' => 'xsd:string'),
        'ChiWorker' => array('name' => 'ChiWorker', 'type' => 'xsd:string'),
        'ChiWorkerExternal' => array('name' => 'ChiWorkerExternal', 'type' => 'xsd:string'),
        'ChiWorkerInternal' => array('name' => 'ChiWorkerInternal', 'type' => 'xsd:string'),
        'Operation' => array('name' => 'Operation', 'type' => 'xsd:string'),
        'Diagram' => array('name' => 'Diagram', 'type' => 'xsd:string'),
        'ActivitySet' => array('name' => 'ActivitySet', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('CounterList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Counter[]')
    ),
    'tns:Counter'
);

/**
 * WSDL definition for History
 */
$server->wsdl->addComplexType('History', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'data' => array('name' => 'data', 'type' => 'xsd:string'),
        'duplicate' => array('name' => 'duplicate', 'type' => 'xsd:string'),
        'eventtype' => array('name' => 'eventtype', 'type' => 'xsd:string'),
        'affectedoid' => array('name' => 'affectedoid', 'type' => 'xsd:string'),
        'otheroid' => array('name' => 'otheroid', 'type' => 'xsd:string'),
        'timestamp' => array('name' => 'timestamp', 'type' => 'xsd:string'),
        'user' => array('name' => 'user', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('HistoryList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:History[]')
    ),
    'tns:History'
);

/**
 * WSDL definition for Language
 */
$server->wsdl->addComplexType('Language', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'code' => array('name' => 'code', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('LanguageList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Language[]')
    ),
    'tns:Language'
);
$server->register('getLanguageList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:LanguageList'), $NAMESPACE);
  
$server->register('createLanguage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Language'=>'tns:Language', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readLanguage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Language'), $NAMESPACE);
  
$server->register('updateLanguage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Language'=>'tns:Language', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteLanguage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Visibility
 */
$server->wsdl->addComplexType('Visibility', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('VisibilityList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Visibility[]')
    ),
    'tns:Visibility'
);

/**
 * WSDL definition for EntityBase
 */
$server->wsdl->addComplexType('EntityBase', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('EntityBaseList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:EntityBase[]')
    ),
    'tns:EntityBase'
);
$server->register('getEntityBaseList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:EntityBaseList'), $NAMESPACE);
  
$server->register('createEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'EntityBase'=>'tns:EntityBase', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:EntityBase'), $NAMESPACE);
  
$server->register('updateEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'EntityBase'=>'tns:EntityBase', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteEntityBase',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for EntityBaseExtended
 */
$server->wsdl->addComplexType('EntityBaseExtended', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('EntityBaseExtendedList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:EntityBaseExtended[]')
    ),
    'tns:EntityBaseExtended'
);

/**
 * WSDL definition for Figure
 */
$server->wsdl->addComplexType('Figure', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chiobject_id' => array('name' => 'fk_chiobject_id', 'type' => 'xsd:string'),
        'fk_activity_id' => array('name' => 'fk_activity_id', 'type' => 'xsd:string'),
        'fk_activitydecision_id' => array('name' => 'fk_activitydecision_id', 'type' => 'xsd:string'),
        'fk_activityreceive_id' => array('name' => 'fk_activityreceive_id', 'type' => 'xsd:string'),
        'fk_activitysend_id' => array('name' => 'fk_activitysend_id', 'type' => 'xsd:string'),
        'fk_activityinitial_id' => array('name' => 'fk_activityinitial_id', 'type' => 'xsd:string'),
        'fk_activityfinal_id' => array('name' => 'fk_activityfinal_id', 'type' => 'xsd:string'),
        'fk_chisystem_id' => array('name' => 'fk_chisystem_id', 'type' => 'xsd:string'),
        'fk_chiworkerexternal_id' => array('name' => 'fk_chiworkerexternal_id', 'type' => 'xsd:string'),
        'fk_chiworkerinternal_id' => array('name' => 'fk_chiworkerinternal_id', 'type' => 'xsd:string'),
        'fk_chiworker_id' => array('name' => 'fk_chiworker_id', 'type' => 'xsd:string'),
        'fk_chibusinesspartneractive_id' => array('name' => 'fk_chibusinesspartneractive_id', 'type' => 'xsd:string'),
        'fk_chibusinesspartnerpassive_id' => array('name' => 'fk_chibusinesspartnerpassive_id', 'type' => 'xsd:string'),
        'fk_chibusinesspartner_id' => array('name' => 'fk_chibusinesspartner_id', 'type' => 'xsd:string'),
        'fk_actor_id' => array('name' => 'fk_actor_id', 'type' => 'xsd:string'),
        'fk_chibusinessprocess_id' => array('name' => 'fk_chibusinessprocess_id', 'type' => 'xsd:string'),
        'fk_chibusinessusecasecore_id' => array('name' => 'fk_chibusinessusecasecore_id', 'type' => 'xsd:string'),
        'fk_chibusinessusecase_id' => array('name' => 'fk_chibusinessusecase_id', 'type' => 'xsd:string'),
        'fk_chigoal_id' => array('name' => 'fk_chigoal_id', 'type' => 'xsd:string'),
        'fk_chirequirement_id' => array('name' => 'fk_chirequirement_id', 'type' => 'xsd:string'),
        'fk_chifeature_id' => array('name' => 'fk_chifeature_id', 'type' => 'xsd:string'),
        'fk_chiissue_id' => array('name' => 'fk_chiissue_id', 'type' => 'xsd:string'),
        'fk_operation_id' => array('name' => 'fk_operation_id', 'type' => 'xsd:string'),
        'fk_chinodemanytomany_id' => array('name' => 'fk_chinodemanytomany_id', 'type' => 'xsd:string'),
        'fk_chinode_id' => array('name' => 'fk_chinode_id', 'type' => 'xsd:string'),
        'fk_chicontroller_id' => array('name' => 'fk_chicontroller_id', 'type' => 'xsd:string'),
        'fk_chiview_id' => array('name' => 'fk_chiview_id', 'type' => 'xsd:string'),
        'fk_chiclass_id' => array('name' => 'fk_chiclass_id', 'type' => 'xsd:string'),
        'fk_feature_id' => array('name' => 'fk_feature_id', 'type' => 'xsd:string'),
        'fk_chivalue_id' => array('name' => 'fk_chivalue_id', 'type' => 'xsd:string'),
        'fk_property_id' => array('name' => 'fk_property_id', 'type' => 'xsd:string'),
        'fk_glossary_id' => array('name' => 'fk_glossary_id', 'type' => 'xsd:string'),
        'fk_diagram_id' => array('name' => 'fk_diagram_id', 'type' => 'xsd:string'),
        'fk_chibase_id' => array('name' => 'fk_chibase_id', 'type' => 'xsd:string'),
        'fk_activityset_id' => array('name' => 'fk_activityset_id', 'type' => 'xsd:string'),
        'BackgroundColor' => array('name' => 'BackgroundColor', 'type' => 'xsd:string'),
        'ForegroundColor' => array('name' => 'ForegroundColor', 'type' => 'xsd:string'),
        'GID' => array('name' => 'GID', 'type' => 'xsd:string'),
        'Height' => array('name' => 'Height', 'type' => 'xsd:string'),
        'PositionY' => array('name' => 'PositionY', 'type' => 'xsd:string'),
        'PositionX' => array('name' => 'PositionX', 'type' => 'xsd:string'),
        'Width' => array('name' => 'Width', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('FigureList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Figure[]')
    ),
    'tns:Figure'
);

/**
 * WSDL definition for ChiBase
 */
$server->wsdl->addComplexType('ChiBase', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChiBaseList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:ChiBase[]')
    ),
    'tns:ChiBase'
);

/**
 * WSDL definition for Model
 */
$server->wsdl->addComplexType('Model', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Package' => array('name' => 'Package', 'type' => 'tns:PackageList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ModelList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Model[]')
    ),
    'tns:Model'
);
$server->register('getModelList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:ModelList'), $NAMESPACE);
  
$server->register('createModel',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Model'=>'tns:Model', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readModel',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Model'), $NAMESPACE);
  
$server->register('updateModel',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Model'=>'tns:Model', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteModel',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Package
 */
$server->wsdl->addComplexType('Package', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'fk_model_id' => array('name' => 'fk_model_id', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'ChiBase' => array('name' => 'ChiBase', 'type' => 'tns:ChiBaseList'),
        'Package' => array('name' => 'Package', 'type' => 'tns:PackageList'),
        'Diagram' => array('name' => 'Diagram', 'type' => 'tns:DiagramList'),
        'Glossary' => array('name' => 'Glossary', 'type' => 'tns:GlossaryList'),
        'Property' => array('name' => 'Property', 'type' => 'tns:PropertyList'),
        'ChiValue' => array('name' => 'ChiValue', 'type' => 'tns:ChiValueList'),
        'Feature' => array('name' => 'Feature', 'type' => 'tns:FeatureList'),
        'ChiClass' => array('name' => 'ChiClass', 'type' => 'tns:ChiClassList'),
        'ChiView' => array('name' => 'ChiView', 'type' => 'tns:ChiViewList'),
        'ChiController' => array('name' => 'ChiController', 'type' => 'tns:ChiControllerList'),
        'ChiNode' => array('name' => 'ChiNode', 'type' => 'tns:ChiNodeList'),
        'ChiNodeManyToMany' => array('name' => 'ChiNodeManyToMany', 'type' => 'tns:ChiNodeManyToManyList'),
        'Operation' => array('name' => 'Operation', 'type' => 'tns:OperationList'),
        'ChiIssue' => array('name' => 'ChiIssue', 'type' => 'tns:ChiIssueList'),
        'ChiFeature' => array('name' => 'ChiFeature', 'type' => 'tns:ChiFeatureList'),
        'ChiRequirement' => array('name' => 'ChiRequirement', 'type' => 'tns:ChiRequirementList'),
        'ChiGoal' => array('name' => 'ChiGoal', 'type' => 'tns:ChiGoalList'),
        'ChiBusinessUseCase' => array('name' => 'ChiBusinessUseCase', 'type' => 'tns:ChiBusinessUseCaseList'),
        'ChiBusinessUseCaseCore' => array('name' => 'ChiBusinessUseCaseCore', 'type' => 'tns:ChiBusinessUseCaseCoreList'),
        'ChiBusinessProcess' => array('name' => 'ChiBusinessProcess', 'type' => 'tns:ChiBusinessProcessList'),
        'Actor' => array('name' => 'Actor', 'type' => 'tns:ActorList'),
        'ChiBusinessPartner' => array('name' => 'ChiBusinessPartner', 'type' => 'tns:ChiBusinessPartnerList'),
        'ChiBusinessPartnerPassive' => array('name' => 'ChiBusinessPartnerPassive', 'type' => 'tns:ChiBusinessPartnerPassiveList'),
        'ChiBusinessPartnerActive' => array('name' => 'ChiBusinessPartnerActive', 'type' => 'tns:ChiBusinessPartnerActiveList'),
        'ChiWorker' => array('name' => 'ChiWorker', 'type' => 'tns:ChiWorkerList'),
        'ChiWorkerInternal' => array('name' => 'ChiWorkerInternal', 'type' => 'tns:ChiWorkerInternalList'),
        'ChiWorkerExternal' => array('name' => 'ChiWorkerExternal', 'type' => 'tns:ChiWorkerExternalList'),
        'ChiSystem' => array('name' => 'ChiSystem', 'type' => 'tns:ChiSystemList'),
        'ActivityFinal' => array('name' => 'ActivityFinal', 'type' => 'tns:ActivityFinalList'),
        'ActivityInitial' => array('name' => 'ActivityInitial', 'type' => 'tns:ActivityInitialList'),
        'ActivitySend' => array('name' => 'ActivitySend', 'type' => 'tns:ActivitySendList'),
        'ActivityReceive' => array('name' => 'ActivityReceive', 'type' => 'tns:ActivityReceiveList'),
        'ActivityDecision' => array('name' => 'ActivityDecision', 'type' => 'tns:ActivityDecisionList'),
        'Activity' => array('name' => 'Activity', 'type' => 'tns:ActivityList'),
        'ChiObject' => array('name' => 'ChiObject', 'type' => 'tns:ChiObjectList'),
        'ActivitySet' => array('name' => 'ActivitySet', 'type' => 'tns:ActivitySetList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('PackageList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Package[]')
    ),
    'tns:Package'
);
$server->register('getPackageList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:PackageList'), $NAMESPACE);
  
$server->register('createPackage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Package'=>'tns:Package', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readPackage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Package'), $NAMESPACE);
  
$server->register('updatePackage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Package'=>'tns:Package', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deletePackage',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Diagram
 */
$server->wsdl->addComplexType('Diagram', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'Width' => array('name' => 'Width', 'type' => 'xsd:string'),
        'Height' => array('name' => 'Height', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('DiagramList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Diagram[]')
    ),
    'tns:Diagram'
);
$server->register('getDiagramList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:DiagramList'), $NAMESPACE);
  
$server->register('createDiagram',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Diagram'=>'tns:Diagram', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readDiagram',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Diagram'), $NAMESPACE);
  
$server->register('updateDiagram',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Diagram'=>'tns:Diagram', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteDiagram',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Glossary
 */
$server->wsdl->addComplexType('Glossary', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_package_id' => array('name' => 'fk_package_id', 'type' => 'xsd:string'),
        'entryType' => array('name' => 'entryType', 'type' => 'xsd:string'),
        'Alias' => array('name' => 'Alias', 'type' => 'xsd:string'),
        'Status' => array('name' => 'Status', 'type' => 'xsd:string'),
        'Author' => array('name' => 'Author', 'type' => 'xsd:string'),
        'Version' => array('name' => 'Version', 'type' => 'xsd:string'),
        'Name' => array('name' => 'Name', 'type' => 'xsd:string'),
        'Notes' => array('name' => 'Notes', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'Figure' => array('name' => 'Figure', 'type' => 'tns:FigureList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('GlossaryList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Glossary[]')
    ),
    'tns:Glossary'
);
$server->register('getGlossaryList',
	array('login'=>'xsd:string', 'password'=>'xsd:string'),
	array('return'=>'tns:GlossaryList'), $NAMESPACE);
  
$server->register('createGlossary',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Glossary'=>'tns:Glossary', 'parentoid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readGlossary',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
	array('return'=>'tns:Glossary'), $NAMESPACE);
  
$server->register('updateGlossary',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'Glossary'=>'tns:Glossary', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteGlossary',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
	array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for NMFiguresDiagram
 */
$server->wsdl->addComplexType('NMFiguresDiagram', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMFiguresDiagramList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMFiguresDiagram[]')
    ),
    'tns:NMFiguresDiagram'
);

$server->register('search',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'searchterm'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);

/**  
 * SOAP Method search 
 * @param login The login name
 * @param password The login password
 * @param searchterm The search term
 * @return string
 */  
function search($login, $password, $searchterm)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'searchterm' => $searchterm, 'usr_action' => 'soapSearch'));
	$result = doSoapCall();
	return $result->getValue('soapResult');
}  


$server->register('advancedSearch',
	array('login'=>'xsd:string', 'password'=>'xsd:string', 'type'=>'xsd:string', 'query'=>'xsd:string'),
	array('return'=>'tns:ObjectList'), $NAMESPACE);

/**  
 * SOAP Method advancedSearch 
 * @param login The login name
 * @param password The login password
 * @param type The type to search for
 * @param query The query definition (@see StringQuery)
 * @return string
 */  
function advancedSearch($login, $password, $type, $query)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'type' => $type, 'query' => $query, 'usr_action' => 'soapAdvancedSearch'));
	$result = doSoapCall();
	return $result->getValue('soapResult');
}  


// Use the request to (try to) invoke the service
$HTTP_RAW_POST_DATA = isset($HTTP_RAW_POST_DATA) ? $HTTP_RAW_POST_DATA : '';
$server->service($HTTP_RAW_POST_DATA);


/**  
 * SOAP Method getActivitySetList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getActivitySetList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ActivitySet'));
// PROTECTED REGION ID(soap/Methods/getActivitySetList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createActivitySet
 * @param login The login name
 * @param password The login password
 * @param ActivitySet The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createActivitySet($login, $password, $ActivitySet, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ActivitySet',  PersistenceFacade::composeOID(array('type' => 'ActivitySet')) => $ActivitySet, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createActivitySet) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readActivitySet 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readActivitySet($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readActivitySet) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateActivitySet 
 * @param login The login name
 * @param password The login password
 * @param ActivitySet The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateActivitySet($login, $password, $ActivitySet, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ActivitySet, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateActivitySet) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteActivitySet
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteActivitySet($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteActivitySet) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiObjectList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiObjectList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiObject'));
// PROTECTED REGION ID(soap/Methods/getChiObjectList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiObject
 * @param login The login name
 * @param password The login password
 * @param ChiObject The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiObject($login, $password, $ChiObject, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiObject',  PersistenceFacade::composeOID(array('type' => 'ChiObject')) => $ChiObject, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiObject) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiObject 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiObject($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiObject) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiObject 
 * @param login The login name
 * @param password The login password
 * @param ChiObject The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiObject($login, $password, $ChiObject, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiObject, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiObject) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiObject
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiObject($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiObject) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getControlFlowList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getControlFlowList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ControlFlow'));
// PROTECTED REGION ID(soap/Methods/getControlFlowList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createControlFlow
 * @param login The login name
 * @param password The login password
 * @param ControlFlow The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createControlFlow($login, $password, $ControlFlow, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ControlFlow',  PersistenceFacade::composeOID(array('type' => 'ControlFlow')) => $ControlFlow, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createControlFlow) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readControlFlow 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readControlFlow($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readControlFlow) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateControlFlow 
 * @param login The login name
 * @param password The login password
 * @param ControlFlow The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateControlFlow($login, $password, $ControlFlow, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ControlFlow, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateControlFlow) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteControlFlow
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteControlFlow($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteControlFlow) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getActivityList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getActivityList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Activity'));
// PROTECTED REGION ID(soap/Methods/getActivityList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createActivity
 * @param login The login name
 * @param password The login password
 * @param Activity The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createActivity($login, $password, $Activity, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Activity',  PersistenceFacade::composeOID(array('type' => 'Activity')) => $Activity, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createActivity) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readActivity 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readActivity($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readActivity) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateActivity 
 * @param login The login name
 * @param password The login password
 * @param Activity The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateActivity($login, $password, $Activity, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Activity, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateActivity) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteActivity
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteActivity($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteActivity) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getActivityDecisionList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getActivityDecisionList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ActivityDecision'));
// PROTECTED REGION ID(soap/Methods/getActivityDecisionList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createActivityDecision
 * @param login The login name
 * @param password The login password
 * @param ActivityDecision The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createActivityDecision($login, $password, $ActivityDecision, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ActivityDecision',  PersistenceFacade::composeOID(array('type' => 'ActivityDecision')) => $ActivityDecision, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createActivityDecision) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readActivityDecision 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readActivityDecision($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readActivityDecision) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateActivityDecision 
 * @param login The login name
 * @param password The login password
 * @param ActivityDecision The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateActivityDecision($login, $password, $ActivityDecision, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ActivityDecision, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateActivityDecision) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteActivityDecision
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteActivityDecision($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteActivityDecision) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getActivityReceiveList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getActivityReceiveList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ActivityReceive'));
// PROTECTED REGION ID(soap/Methods/getActivityReceiveList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createActivityReceive
 * @param login The login name
 * @param password The login password
 * @param ActivityReceive The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createActivityReceive($login, $password, $ActivityReceive, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ActivityReceive',  PersistenceFacade::composeOID(array('type' => 'ActivityReceive')) => $ActivityReceive, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createActivityReceive) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readActivityReceive 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readActivityReceive($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readActivityReceive) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateActivityReceive 
 * @param login The login name
 * @param password The login password
 * @param ActivityReceive The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateActivityReceive($login, $password, $ActivityReceive, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ActivityReceive, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateActivityReceive) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteActivityReceive
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteActivityReceive($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteActivityReceive) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getActivitySendList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getActivitySendList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ActivitySend'));
// PROTECTED REGION ID(soap/Methods/getActivitySendList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createActivitySend
 * @param login The login name
 * @param password The login password
 * @param ActivitySend The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createActivitySend($login, $password, $ActivitySend, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ActivitySend',  PersistenceFacade::composeOID(array('type' => 'ActivitySend')) => $ActivitySend, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createActivitySend) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readActivitySend 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readActivitySend($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readActivitySend) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateActivitySend 
 * @param login The login name
 * @param password The login password
 * @param ActivitySend The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateActivitySend($login, $password, $ActivitySend, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ActivitySend, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateActivitySend) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteActivitySend
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteActivitySend($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteActivitySend) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getActivityInitialList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getActivityInitialList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ActivityInitial'));
// PROTECTED REGION ID(soap/Methods/getActivityInitialList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createActivityInitial
 * @param login The login name
 * @param password The login password
 * @param ActivityInitial The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createActivityInitial($login, $password, $ActivityInitial, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ActivityInitial',  PersistenceFacade::composeOID(array('type' => 'ActivityInitial')) => $ActivityInitial, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createActivityInitial) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readActivityInitial 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readActivityInitial($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readActivityInitial) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateActivityInitial 
 * @param login The login name
 * @param password The login password
 * @param ActivityInitial The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateActivityInitial($login, $password, $ActivityInitial, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ActivityInitial, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateActivityInitial) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteActivityInitial
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteActivityInitial($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteActivityInitial) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getActivityFinalList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getActivityFinalList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ActivityFinal'));
// PROTECTED REGION ID(soap/Methods/getActivityFinalList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createActivityFinal
 * @param login The login name
 * @param password The login password
 * @param ActivityFinal The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createActivityFinal($login, $password, $ActivityFinal, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ActivityFinal',  PersistenceFacade::composeOID(array('type' => 'ActivityFinal')) => $ActivityFinal, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createActivityFinal) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readActivityFinal 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readActivityFinal($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readActivityFinal) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateActivityFinal 
 * @param login The login name
 * @param password The login password
 * @param ActivityFinal The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateActivityFinal($login, $password, $ActivityFinal, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ActivityFinal, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateActivityFinal) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteActivityFinal
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteActivityFinal($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteActivityFinal) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiSystemList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiSystemList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiSystem'));
// PROTECTED REGION ID(soap/Methods/getChiSystemList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiSystem
 * @param login The login name
 * @param password The login password
 * @param ChiSystem The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiSystem($login, $password, $ChiSystem, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiSystem',  PersistenceFacade::composeOID(array('type' => 'ChiSystem')) => $ChiSystem, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiSystem) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiSystem 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiSystem($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiSystem) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiSystem 
 * @param login The login name
 * @param password The login password
 * @param ChiSystem The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiSystem($login, $password, $ChiSystem, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiSystem, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiSystem) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiSystem
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiSystem($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiSystem) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getTranslationList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getTranslationList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Translation'));
// PROTECTED REGION ID(soap/Methods/getTranslationList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createTranslation
 * @param login The login name
 * @param password The login password
 * @param Translation The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createTranslation($login, $password, $Translation, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Translation',  PersistenceFacade::composeOID(array('type' => 'Translation')) => $Translation, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createTranslation) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readTranslation 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readTranslation($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readTranslation) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateTranslation 
 * @param login The login name
 * @param password The login password
 * @param Translation The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateTranslation($login, $password, $Translation, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Translation, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateTranslation) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteTranslation
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteTranslation($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteTranslation) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getLocktableList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getLocktableList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Locktable'));
// PROTECTED REGION ID(soap/Methods/getLocktableList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createLocktable
 * @param login The login name
 * @param password The login password
 * @param Locktable The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createLocktable($login, $password, $Locktable, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Locktable',  PersistenceFacade::composeOID(array('type' => 'Locktable')) => $Locktable, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createLocktable) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readLocktable 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readLocktable($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readLocktable) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateLocktable 
 * @param login The login name
 * @param password The login password
 * @param Locktable The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateLocktable($login, $password, $Locktable, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Locktable, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateLocktable) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteLocktable
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteLocktable($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteLocktable) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getNMUserRoleList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getNMUserRoleList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'NMUserRole'));
// PROTECTED REGION ID(soap/Methods/getNMUserRoleList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createNMUserRole
 * @param login The login name
 * @param password The login password
 * @param NMUserRole The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createNMUserRole($login, $password, $NMUserRole, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'NMUserRole',  PersistenceFacade::composeOID(array('type' => 'NMUserRole')) => $NMUserRole, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createNMUserRole) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readNMUserRole 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readNMUserRole($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readNMUserRole) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateNMUserRole 
 * @param login The login name
 * @param password The login password
 * @param NMUserRole The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateNMUserRole($login, $password, $NMUserRole, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $NMUserRole, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateNMUserRole) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteNMUserRole
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteNMUserRole($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteNMUserRole) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getRoleRDBList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getRoleRDBList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'RoleRDB'));
// PROTECTED REGION ID(soap/Methods/getRoleRDBList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createRoleRDB
 * @param login The login name
 * @param password The login password
 * @param RoleRDB The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createRoleRDB($login, $password, $RoleRDB, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'RoleRDB',  PersistenceFacade::composeOID(array('type' => 'RoleRDB')) => $RoleRDB, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createRoleRDB) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readRoleRDB 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readRoleRDB($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readRoleRDB) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateRoleRDB 
 * @param login The login name
 * @param password The login password
 * @param RoleRDB The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateRoleRDB($login, $password, $RoleRDB, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $RoleRDB, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateRoleRDB) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteRoleRDB
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteRoleRDB($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteRoleRDB) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getUserRDBList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getUserRDBList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'UserRDB'));
// PROTECTED REGION ID(soap/Methods/getUserRDBList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createUserRDB
 * @param login The login name
 * @param password The login password
 * @param UserRDB The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createUserRDB($login, $password, $UserRDB, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'UserRDB',  PersistenceFacade::composeOID(array('type' => 'UserRDB')) => $UserRDB, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createUserRDB) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readUserRDB 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readUserRDB($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readUserRDB) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateUserRDB 
 * @param login The login name
 * @param password The login password
 * @param UserRDB The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateUserRDB($login, $password, $UserRDB, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $UserRDB, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateUserRDB) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteUserRDB
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteUserRDB($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteUserRDB) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getActorList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getActorList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Actor'));
// PROTECTED REGION ID(soap/Methods/getActorList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createActor
 * @param login The login name
 * @param password The login password
 * @param Actor The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createActor($login, $password, $Actor, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Actor',  PersistenceFacade::composeOID(array('type' => 'Actor')) => $Actor, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createActor) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readActor 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readActor($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readActor) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateActor 
 * @param login The login name
 * @param password The login password
 * @param Actor The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateActor($login, $password, $Actor, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Actor, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateActor) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteActor
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteActor($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteActor) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiWorkerList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiWorkerList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiWorker'));
// PROTECTED REGION ID(soap/Methods/getChiWorkerList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiWorker
 * @param login The login name
 * @param password The login password
 * @param ChiWorker The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiWorker($login, $password, $ChiWorker, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiWorker',  PersistenceFacade::composeOID(array('type' => 'ChiWorker')) => $ChiWorker, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiWorker) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiWorker 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiWorker($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiWorker) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiWorker 
 * @param login The login name
 * @param password The login password
 * @param ChiWorker The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiWorker($login, $password, $ChiWorker, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiWorker, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiWorker) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiWorker
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiWorker($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiWorker) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiBusinessPartnerList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessPartnerList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessPartner'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessPartnerList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessPartner
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartner The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessPartner($login, $password, $ChiBusinessPartner, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessPartner',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessPartner')) => $ChiBusinessPartner, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessPartner) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessPartner 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessPartner($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessPartner) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessPartner 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartner The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessPartner($login, $password, $ChiBusinessPartner, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessPartner, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessPartner) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessPartner
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessPartner($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessPartner) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiBusinessProcessList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessProcessList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessProcess'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessProcessList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessProcess
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessProcess The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessProcess($login, $password, $ChiBusinessProcess, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessProcess',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessProcess')) => $ChiBusinessProcess, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessProcess) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessProcess 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessProcess($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessProcess) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessProcess 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessProcess The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessProcess($login, $password, $ChiBusinessProcess, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessProcess, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessProcess) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessProcess
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessProcess($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessProcess) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiBusinessUseCaseList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessUseCaseList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessUseCase'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessUseCaseList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessUseCase
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessUseCase The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessUseCase($login, $password, $ChiBusinessUseCase, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessUseCase',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessUseCase')) => $ChiBusinessUseCase, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessUseCase) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessUseCase 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessUseCase($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessUseCase) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessUseCase 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessUseCase The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessUseCase($login, $password, $ChiBusinessUseCase, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessUseCase, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessUseCase) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessUseCase
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessUseCase($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessUseCase) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiBusinessUseCaseCoreList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessUseCaseCoreList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessUseCaseCore'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessUseCaseCoreList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessUseCaseCore
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessUseCaseCore The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessUseCaseCore($login, $password, $ChiBusinessUseCaseCore, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessUseCaseCore',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessUseCaseCore')) => $ChiBusinessUseCaseCore, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessUseCaseCore) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessUseCaseCore 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessUseCaseCore($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessUseCaseCore) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessUseCaseCore 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessUseCaseCore The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessUseCaseCore($login, $password, $ChiBusinessUseCaseCore, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessUseCaseCore, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessUseCaseCore) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessUseCaseCore
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessUseCaseCore($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessUseCaseCore) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiBusinessPartnerActiveList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessPartnerActiveList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessPartnerActive'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessPartnerActiveList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessPartnerActive
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartnerActive The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessPartnerActive($login, $password, $ChiBusinessPartnerActive, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessPartnerActive',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessPartnerActive')) => $ChiBusinessPartnerActive, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessPartnerActive) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessPartnerActive 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessPartnerActive($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessPartnerActive) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessPartnerActive 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartnerActive The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessPartnerActive($login, $password, $ChiBusinessPartnerActive, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessPartnerActive, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessPartnerActive) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessPartnerActive
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessPartnerActive($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessPartnerActive) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiBusinessPartnerPassiveList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiBusinessPartnerPassiveList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiBusinessPartnerPassive'));
// PROTECTED REGION ID(soap/Methods/getChiBusinessPartnerPassiveList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiBusinessPartnerPassive
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartnerPassive The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiBusinessPartnerPassive($login, $password, $ChiBusinessPartnerPassive, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiBusinessPartnerPassive',  PersistenceFacade::composeOID(array('type' => 'ChiBusinessPartnerPassive')) => $ChiBusinessPartnerPassive, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiBusinessPartnerPassive) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiBusinessPartnerPassive 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiBusinessPartnerPassive($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiBusinessPartnerPassive) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiBusinessPartnerPassive 
 * @param login The login name
 * @param password The login password
 * @param ChiBusinessPartnerPassive The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiBusinessPartnerPassive($login, $password, $ChiBusinessPartnerPassive, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiBusinessPartnerPassive, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiBusinessPartnerPassive) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiBusinessPartnerPassive
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiBusinessPartnerPassive($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiBusinessPartnerPassive) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiWorkerExternalList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiWorkerExternalList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiWorkerExternal'));
// PROTECTED REGION ID(soap/Methods/getChiWorkerExternalList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiWorkerExternal
 * @param login The login name
 * @param password The login password
 * @param ChiWorkerExternal The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiWorkerExternal($login, $password, $ChiWorkerExternal, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiWorkerExternal',  PersistenceFacade::composeOID(array('type' => 'ChiWorkerExternal')) => $ChiWorkerExternal, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiWorkerExternal) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiWorkerExternal 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiWorkerExternal($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiWorkerExternal) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiWorkerExternal 
 * @param login The login name
 * @param password The login password
 * @param ChiWorkerExternal The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiWorkerExternal($login, $password, $ChiWorkerExternal, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiWorkerExternal, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiWorkerExternal) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiWorkerExternal
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiWorkerExternal($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiWorkerExternal) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiWorkerInternalList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiWorkerInternalList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiWorkerInternal'));
// PROTECTED REGION ID(soap/Methods/getChiWorkerInternalList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiWorkerInternal
 * @param login The login name
 * @param password The login password
 * @param ChiWorkerInternal The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiWorkerInternal($login, $password, $ChiWorkerInternal, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiWorkerInternal',  PersistenceFacade::composeOID(array('type' => 'ChiWorkerInternal')) => $ChiWorkerInternal, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiWorkerInternal) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiWorkerInternal 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiWorkerInternal($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiWorkerInternal) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiWorkerInternal 
 * @param login The login name
 * @param password The login password
 * @param ChiWorkerInternal The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiWorkerInternal($login, $password, $ChiWorkerInternal, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiWorkerInternal, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiWorkerInternal) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiWorkerInternal
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiWorkerInternal($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiWorkerInternal) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiGoalList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiGoalList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiGoal'));
// PROTECTED REGION ID(soap/Methods/getChiGoalList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiGoal
 * @param login The login name
 * @param password The login password
 * @param ChiGoal The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiGoal($login, $password, $ChiGoal, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiGoal',  PersistenceFacade::composeOID(array('type' => 'ChiGoal')) => $ChiGoal, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiGoal) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiGoal 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiGoal($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiGoal) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiGoal 
 * @param login The login name
 * @param password The login password
 * @param ChiGoal The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiGoal($login, $password, $ChiGoal, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiGoal, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiGoal) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiGoal
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiGoal($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiGoal) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiRequirementList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiRequirementList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiRequirement'));
// PROTECTED REGION ID(soap/Methods/getChiRequirementList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiRequirement
 * @param login The login name
 * @param password The login password
 * @param ChiRequirement The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiRequirement($login, $password, $ChiRequirement, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiRequirement',  PersistenceFacade::composeOID(array('type' => 'ChiRequirement')) => $ChiRequirement, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiRequirement) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiRequirement 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiRequirement($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiRequirement) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiRequirement 
 * @param login The login name
 * @param password The login password
 * @param ChiRequirement The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiRequirement($login, $password, $ChiRequirement, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiRequirement, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiRequirement) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiRequirement
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiRequirement($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiRequirement) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiFeatureList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiFeatureList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiFeature'));
// PROTECTED REGION ID(soap/Methods/getChiFeatureList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiFeature
 * @param login The login name
 * @param password The login password
 * @param ChiFeature The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiFeature($login, $password, $ChiFeature, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiFeature',  PersistenceFacade::composeOID(array('type' => 'ChiFeature')) => $ChiFeature, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiFeature) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiFeature 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiFeature($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiFeature) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiFeature 
 * @param login The login name
 * @param password The login password
 * @param ChiFeature The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiFeature($login, $password, $ChiFeature, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiFeature, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiFeature) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiFeature
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiFeature($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiFeature) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiIssueList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiIssueList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiIssue'));
// PROTECTED REGION ID(soap/Methods/getChiIssueList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiIssue
 * @param login The login name
 * @param password The login password
 * @param ChiIssue The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiIssue($login, $password, $ChiIssue, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiIssue',  PersistenceFacade::composeOID(array('type' => 'ChiIssue')) => $ChiIssue, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiIssue) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiIssue 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiIssue($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiIssue) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiIssue 
 * @param login The login name
 * @param password The login password
 * @param ChiIssue The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiIssue($login, $password, $ChiIssue, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiIssue, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiIssue) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiIssue
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiIssue($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiIssue) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiFeatureStatusList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiFeatureStatusList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiFeatureStatus'));
// PROTECTED REGION ID(soap/Methods/getChiFeatureStatusList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiFeatureStatus
 * @param login The login name
 * @param password The login password
 * @param ChiFeatureStatus The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiFeatureStatus($login, $password, $ChiFeatureStatus, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiFeatureStatus',  PersistenceFacade::composeOID(array('type' => 'ChiFeatureStatus')) => $ChiFeatureStatus, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiFeatureStatus) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiFeatureStatus 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiFeatureStatus($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiFeatureStatus) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiFeatureStatus 
 * @param login The login name
 * @param password The login password
 * @param ChiFeatureStatus The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiFeatureStatus($login, $password, $ChiFeatureStatus, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiFeatureStatus, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiFeatureStatus) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiFeatureStatus
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiFeatureStatus($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiFeatureStatus) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiGoalTypeList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiGoalTypeList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiGoalType'));
// PROTECTED REGION ID(soap/Methods/getChiGoalTypeList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiGoalType
 * @param login The login name
 * @param password The login password
 * @param ChiGoalType The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiGoalType($login, $password, $ChiGoalType, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiGoalType',  PersistenceFacade::composeOID(array('type' => 'ChiGoalType')) => $ChiGoalType, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiGoalType) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiGoalType 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiGoalType($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiGoalType) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiGoalType 
 * @param login The login name
 * @param password The login password
 * @param ChiGoalType The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiGoalType($login, $password, $ChiGoalType, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiGoalType, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiGoalType) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiGoalType
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiGoalType($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiGoalType) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiRequirementTypeList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiRequirementTypeList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiRequirementType'));
// PROTECTED REGION ID(soap/Methods/getChiRequirementTypeList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiRequirementType
 * @param login The login name
 * @param password The login password
 * @param ChiRequirementType The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiRequirementType($login, $password, $ChiRequirementType, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiRequirementType',  PersistenceFacade::composeOID(array('type' => 'ChiRequirementType')) => $ChiRequirementType, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiRequirementType) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiRequirementType 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiRequirementType($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiRequirementType) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiRequirementType 
 * @param login The login name
 * @param password The login password
 * @param ChiRequirementType The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiRequirementType($login, $password, $ChiRequirementType, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiRequirementType, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiRequirementType) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiRequirementType
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiRequirementType($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiRequirementType) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiActionKeyList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiActionKeyList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiActionKey'));
// PROTECTED REGION ID(soap/Methods/getChiActionKeyList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiActionKey
 * @param login The login name
 * @param password The login password
 * @param ChiActionKey The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiActionKey($login, $password, $ChiActionKey, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiActionKey',  PersistenceFacade::composeOID(array('type' => 'ChiActionKey')) => $ChiActionKey, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiActionKey) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiActionKey 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiActionKey($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiActionKey) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiActionKey 
 * @param login The login name
 * @param password The login password
 * @param ChiActionKey The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiActionKey($login, $password, $ChiActionKey, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiActionKey, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiActionKey) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiActionKey
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiActionKey($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiActionKey) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getFeatureList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getFeatureList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Feature'));
// PROTECTED REGION ID(soap/Methods/getFeatureList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createFeature
 * @param login The login name
 * @param password The login password
 * @param Feature The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createFeature($login, $password, $Feature, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Feature',  PersistenceFacade::composeOID(array('type' => 'Feature')) => $Feature, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createFeature) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readFeature 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readFeature($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readFeature) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateFeature 
 * @param login The login name
 * @param password The login password
 * @param Feature The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateFeature($login, $password, $Feature, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Feature, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateFeature) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteFeature
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteFeature($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteFeature) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiNodeManyToManyList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiNodeManyToManyList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiNodeManyToMany'));
// PROTECTED REGION ID(soap/Methods/getChiNodeManyToManyList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiNodeManyToMany
 * @param login The login name
 * @param password The login password
 * @param ChiNodeManyToMany The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiNodeManyToMany($login, $password, $ChiNodeManyToMany, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiNodeManyToMany',  PersistenceFacade::composeOID(array('type' => 'ChiNodeManyToMany')) => $ChiNodeManyToMany, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiNodeManyToMany) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiNodeManyToMany 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiNodeManyToMany($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiNodeManyToMany) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiNodeManyToMany 
 * @param login The login name
 * @param password The login password
 * @param ChiNodeManyToMany The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiNodeManyToMany($login, $password, $ChiNodeManyToMany, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiNodeManyToMany, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiNodeManyToMany) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiNodeManyToMany
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiNodeManyToMany($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiNodeManyToMany) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiValueRefList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiValueRefList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiValueRef'));
// PROTECTED REGION ID(soap/Methods/getChiValueRefList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiValueRef
 * @param login The login name
 * @param password The login password
 * @param ChiValueRef The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiValueRef($login, $password, $ChiValueRef, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiValueRef',  PersistenceFacade::composeOID(array('type' => 'ChiValueRef')) => $ChiValueRef, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiValueRef) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiValueRef 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiValueRef($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiValueRef) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiValueRef 
 * @param login The login name
 * @param password The login password
 * @param ChiValueRef The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiValueRef($login, $password, $ChiValueRef, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiValueRef, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiValueRef) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiValueRef
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiValueRef($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiValueRef) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getPropertyList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getPropertyList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Property'));
// PROTECTED REGION ID(soap/Methods/getPropertyList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createProperty
 * @param login The login name
 * @param password The login password
 * @param Property The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createProperty($login, $password, $Property, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Property',  PersistenceFacade::composeOID(array('type' => 'Property')) => $Property, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createProperty) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readProperty 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readProperty($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readProperty) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateProperty 
 * @param login The login name
 * @param password The login password
 * @param Property The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateProperty($login, $password, $Property, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Property, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateProperty) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteProperty
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteProperty($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteProperty) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiNodeList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiNodeList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiNode'));
// PROTECTED REGION ID(soap/Methods/getChiNodeList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiNode
 * @param login The login name
 * @param password The login password
 * @param ChiNode The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiNode($login, $password, $ChiNode, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiNode',  PersistenceFacade::composeOID(array('type' => 'ChiNode')) => $ChiNode, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiNode) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiNode 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiNode($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiNode) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiNode 
 * @param login The login name
 * @param password The login password
 * @param ChiNode The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiNode($login, $password, $ChiNode, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiNode, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiNode) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiNode
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiNode($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiNode) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiControllerList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiControllerList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiController'));
// PROTECTED REGION ID(soap/Methods/getChiControllerList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiController
 * @param login The login name
 * @param password The login password
 * @param ChiController The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiController($login, $password, $ChiController, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiController',  PersistenceFacade::composeOID(array('type' => 'ChiController')) => $ChiController, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiController) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiController 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiController($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiController) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiController 
 * @param login The login name
 * @param password The login password
 * @param ChiController The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiController($login, $password, $ChiController, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiController, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiController) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiController
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiController($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiController) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiViewList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiViewList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiView'));
// PROTECTED REGION ID(soap/Methods/getChiViewList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiView
 * @param login The login name
 * @param password The login password
 * @param ChiView The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiView($login, $password, $ChiView, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiView',  PersistenceFacade::composeOID(array('type' => 'ChiView')) => $ChiView, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiView) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiView 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiView($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiView) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiView 
 * @param login The login name
 * @param password The login password
 * @param ChiView The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiView($login, $password, $ChiView, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiView, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiView) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiView
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiView($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiView) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiAuthorsList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiAuthorsList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiAuthors'));
// PROTECTED REGION ID(soap/Methods/getChiAuthorsList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiAuthors
 * @param login The login name
 * @param password The login password
 * @param ChiAuthors The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiAuthors($login, $password, $ChiAuthors, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiAuthors',  PersistenceFacade::composeOID(array('type' => 'ChiAuthors')) => $ChiAuthors, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiAuthors) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiAuthors 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiAuthors($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiAuthors) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiAuthors 
 * @param login The login name
 * @param password The login password
 * @param ChiAuthors The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiAuthors($login, $password, $ChiAuthors, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiAuthors, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiAuthors) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiAuthors
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiAuthors($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiAuthors) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiValueList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiValueList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiValue'));
// PROTECTED REGION ID(soap/Methods/getChiValueList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiValue
 * @param login The login name
 * @param password The login password
 * @param ChiValue The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiValue($login, $password, $ChiValue, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiValue',  PersistenceFacade::composeOID(array('type' => 'ChiValue')) => $ChiValue, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiValue) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiValue 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiValue($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiValue) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiValue 
 * @param login The login name
 * @param password The login password
 * @param ChiValue The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiValue($login, $password, $ChiValue, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiValue, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiValue) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiValue
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiValue($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiValue) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getDisplayTypeList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getDisplayTypeList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'DisplayType'));
// PROTECTED REGION ID(soap/Methods/getDisplayTypeList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createDisplayType
 * @param login The login name
 * @param password The login password
 * @param DisplayType The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createDisplayType($login, $password, $DisplayType, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'DisplayType',  PersistenceFacade::composeOID(array('type' => 'DisplayType')) => $DisplayType, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createDisplayType) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readDisplayType 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readDisplayType($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readDisplayType) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateDisplayType 
 * @param login The login name
 * @param password The login password
 * @param DisplayType The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateDisplayType($login, $password, $DisplayType, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $DisplayType, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateDisplayType) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteDisplayType
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteDisplayType($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteDisplayType) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getInputTypeList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getInputTypeList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'InputType'));
// PROTECTED REGION ID(soap/Methods/getInputTypeList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createInputType
 * @param login The login name
 * @param password The login password
 * @param InputType The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createInputType($login, $password, $InputType, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'InputType',  PersistenceFacade::composeOID(array('type' => 'InputType')) => $InputType, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createInputType) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readInputType 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readInputType($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readInputType) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateInputType 
 * @param login The login name
 * @param password The login password
 * @param InputType The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateInputType($login, $password, $InputType, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $InputType, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateInputType) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteInputType
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteInputType($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteInputType) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiAssociationList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiAssociationList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiAssociation'));
// PROTECTED REGION ID(soap/Methods/getChiAssociationList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiAssociation
 * @param login The login name
 * @param password The login password
 * @param ChiAssociation The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiAssociation($login, $password, $ChiAssociation, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiAssociation',  PersistenceFacade::composeOID(array('type' => 'ChiAssociation')) => $ChiAssociation, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiAssociation) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiAssociation 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiAssociation($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiAssociation) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiAssociation 
 * @param login The login name
 * @param password The login password
 * @param ChiAssociation The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiAssociation($login, $password, $ChiAssociation, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiAssociation, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiAssociation) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiAssociation
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiAssociation($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiAssociation) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getOperationList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getOperationList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Operation'));
// PROTECTED REGION ID(soap/Methods/getOperationList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createOperation
 * @param login The login name
 * @param password The login password
 * @param Operation The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createOperation($login, $password, $Operation, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Operation',  PersistenceFacade::composeOID(array('type' => 'Operation')) => $Operation, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createOperation) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readOperation 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readOperation($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readOperation) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateOperation 
 * @param login The login name
 * @param password The login password
 * @param Operation The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateOperation($login, $password, $Operation, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Operation, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateOperation) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteOperation
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteOperation($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteOperation) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getRelationList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getRelationList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Relation'));
// PROTECTED REGION ID(soap/Methods/getRelationList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createRelation
 * @param login The login name
 * @param password The login password
 * @param Relation The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createRelation($login, $password, $Relation, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Relation',  PersistenceFacade::composeOID(array('type' => 'Relation')) => $Relation, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createRelation) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readRelation 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readRelation($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readRelation) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateRelation 
 * @param login The login name
 * @param password The login password
 * @param Relation The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateRelation($login, $password, $Relation, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Relation, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateRelation) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteRelation
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteRelation($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteRelation) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getRelationTypeList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getRelationTypeList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'RelationType'));
// PROTECTED REGION ID(soap/Methods/getRelationTypeList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createRelationType
 * @param login The login name
 * @param password The login password
 * @param RelationType The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createRelationType($login, $password, $RelationType, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'RelationType',  PersistenceFacade::composeOID(array('type' => 'RelationType')) => $RelationType, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createRelationType) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readRelationType 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readRelationType($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readRelationType) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateRelationType 
 * @param login The login name
 * @param password The login password
 * @param RelationType The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateRelationType($login, $password, $RelationType, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $RelationType, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateRelationType) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteRelationType
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteRelationType($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteRelationType) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChiClassList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChiClassList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'ChiClass'));
// PROTECTED REGION ID(soap/Methods/getChiClassList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChiClass
 * @param login The login name
 * @param password The login password
 * @param ChiClass The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChiClass($login, $password, $ChiClass, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'ChiClass',  PersistenceFacade::composeOID(array('type' => 'ChiClass')) => $ChiClass, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChiClass) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChiClass 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChiClass($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChiClass) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChiClass 
 * @param login The login name
 * @param password The login password
 * @param ChiClass The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChiClass($login, $password, $ChiClass, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $ChiClass, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChiClass) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChiClass
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChiClass($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChiClass) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getLanguageList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getLanguageList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Language'));
// PROTECTED REGION ID(soap/Methods/getLanguageList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createLanguage
 * @param login The login name
 * @param password The login password
 * @param Language The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createLanguage($login, $password, $Language, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Language',  PersistenceFacade::composeOID(array('type' => 'Language')) => $Language, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createLanguage) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readLanguage 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readLanguage($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readLanguage) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateLanguage 
 * @param login The login name
 * @param password The login password
 * @param Language The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateLanguage($login, $password, $Language, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Language, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateLanguage) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteLanguage
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteLanguage($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteLanguage) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getEntityBaseList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getEntityBaseList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'EntityBase'));
// PROTECTED REGION ID(soap/Methods/getEntityBaseList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createEntityBase
 * @param login The login name
 * @param password The login password
 * @param EntityBase The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createEntityBase($login, $password, $EntityBase, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'EntityBase',  PersistenceFacade::composeOID(array('type' => 'EntityBase')) => $EntityBase, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createEntityBase) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readEntityBase 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readEntityBase($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readEntityBase) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateEntityBase 
 * @param login The login name
 * @param password The login password
 * @param EntityBase The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateEntityBase($login, $password, $EntityBase, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $EntityBase, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateEntityBase) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteEntityBase
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteEntityBase($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteEntityBase) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getModelList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getModelList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Model'));
// PROTECTED REGION ID(soap/Methods/getModelList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createModel
 * @param login The login name
 * @param password The login password
 * @param Model The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createModel($login, $password, $Model, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Model',  PersistenceFacade::composeOID(array('type' => 'Model')) => $Model, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createModel) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readModel 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readModel($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readModel) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateModel 
 * @param login The login name
 * @param password The login password
 * @param Model The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateModel($login, $password, $Model, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Model, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateModel) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteModel
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteModel($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteModel) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getPackageList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getPackageList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Package'));
// PROTECTED REGION ID(soap/Methods/getPackageList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createPackage
 * @param login The login name
 * @param password The login password
 * @param Package The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createPackage($login, $password, $Package, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Package',  PersistenceFacade::composeOID(array('type' => 'Package')) => $Package, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createPackage) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readPackage 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readPackage($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readPackage) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updatePackage 
 * @param login The login name
 * @param password The login password
 * @param Package The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updatePackage($login, $password, $Package, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Package, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updatePackage) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deletePackage
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deletePackage($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deletePackage) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getDiagramList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getDiagramList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Diagram'));
// PROTECTED REGION ID(soap/Methods/getDiagramList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createDiagram
 * @param login The login name
 * @param password The login password
 * @param Diagram The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createDiagram($login, $password, $Diagram, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Diagram',  PersistenceFacade::composeOID(array('type' => 'Diagram')) => $Diagram, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createDiagram) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readDiagram 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readDiagram($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readDiagram) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateDiagram 
 * @param login The login name
 * @param password The login password
 * @param Diagram The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateDiagram($login, $password, $Diagram, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Diagram, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateDiagram) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteDiagram
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteDiagram($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteDiagram) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getGlossaryList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getGlossaryList($login, $password)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'list', 'type' => 'Glossary'));
// PROTECTED REGION ID(soap/Methods/getGlossaryList) ENABLED START
	$result = doSoapCall();
	return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createGlossary
 * @param login The login name
 * @param password The login password
 * @param Glossary The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createGlossary($login, $password, $Glossary, $parentoid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'new', 'newtype' => 'Glossary',  PersistenceFacade::composeOID(array('type' => 'Glossary')) => $Glossary, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createGlossary) ENABLED START
	$result = doSoapCall();
	return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readGlossary 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readGlossary($login, $password, $oid, $depth)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readGlossary) ENABLED START
	$result = doSoapCall();
	return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateGlossary 
 * @param login The login name
 * @param password The login password
 * @param Glossary The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateGlossary($login, $password, $Glossary, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'save', $oid => $Glossary, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateGlossary) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteGlossary
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteGlossary($login, $password, $oid)  
{
	$_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'usr_action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteGlossary) ENABLED START
	$result = doSoapCall();
	return $result;
// PROTECTED REGION END
}  

/**
 * Do the soap call using the ActionMapper
 * @return The Response instance from the executed Controller
 */
function doSoapCall()
{
  // initialize the application
  $application = &Application::getInstance();
  $callParams = &$application->initialize('include/', 'config.ini', 'ExitController', '', $_GET['usr_action'], MSG_FORMAT_SOAP);

  // set the error handler
  $GLOBALS['EXCEPTION_HANDLER'] = "onError";
  
  // login with the data given in the request
  $session = &SessionData::getInstance();
  $objectFactory = &ObjectFactory::getInstance();
  $authUser = new AuthUser();
  if ($authUser->login($_GET['login'], $_GET['password']))
  {
    // login succeeded, store the user in the session
    $session->set('auth_user', $authUser);
  
    // process the requested action
    $request = new Request(
      $callParams['controller'], 
      $callParams['context'], 
      $callParams['action'], 
      $callParams['data']
    );
    $request->setFormat(MSG_FORMAT_SOAP);
    $request->setResponseFormat(MSG_FORMAT_SOAP);
    $response = &ActionMapper::processAction($request);
    $error = $response->getValue('errorMsg');
    if (strlen($error) > 0)
      WCMFException::trow($error);
  }
  else
    WCMFException::trow("Login failed");

  // cleanup
  $lockManager = &LockManager::getInstance();
  $lockManager->releaseAllLocks();
  $session->destroy();
      
  return $response;
}

/**
 * Global error handling function. Assigned to EXCEPTION_HANDLER 
 * which means it is called by WCMFException::trow()
 * @param message The error message
 * @param file The php file in which the error occured (optional)
 * @param line The line in the php file in which the error occured (optional)
 * @return The value
 */
function onError($message, $file='', $line='') 
{ 
  global $server;
  $server->fault('SOAP-ENV:SERVER', $message, '', WCMFException::getStackTrace());
  Log::error($message." (".$file.", ".$line.").\n".WCMFException::getStackTrace());
}
?>
