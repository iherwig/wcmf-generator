req.figure.list = [
	"ChiGoal",
	"ChiRequirement",
	"ChiFeature",
	"ChiIssue",
	"ChiBusinessPartnerActive",
	"ChiBusinessPartnerPassive",
	"ChiBusinessProcess",
	"ChiBusinessUseCase",
	"ChiBusinessUseCaseCore",
	"ChiWorkerExternal",
	"ChiWorkerInternal"
];

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.Actor.js
   Description: this class reppresent a generic actor.
  */
  


req.figure.Actor = function(label) {
	req.figure.RectFigure.call(this, "Actor", label);
}

req.figure.Actor.prototype = new req.figure.RectFigure;

req.figure.Actor.prototype.type = "req.figure.Actor";

req.figure.Actor.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "Actor",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "Actor"
				});
}

req.figure.Actor.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=Actor",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.Actor.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'Actor Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.Actor.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiAuthors.js
   Description: all the involved in the project can be considered authors.
  */
  


req.figure.ChiAuthors = function(label) {
	req.figure.RectFigure.call(this, "ChiAuthors", label);
}

req.figure.ChiAuthors.prototype = new req.figure.RectFigure;

req.figure.ChiAuthors.prototype.type = "req.figure.ChiAuthors";

req.figure.ChiAuthors.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiAuthors",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiAuthors"
				});
}

req.figure.ChiAuthors.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiAuthors",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiAuthors.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiAuthors Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Role',
	        name: 'Role',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiAuthors.prototype.getConstraints = function() {
	return {
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBase.js
   Description: 
  */
  


req.figure.ChiBase = function(label) {
	req.figure.RectFigure.call(this, "ChiBase", label);
}

req.figure.ChiBase.prototype = new req.figure.RectFigure;

req.figure.ChiBase.prototype.type = "req.figure.ChiBase";

req.figure.ChiBase.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiBase",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiBase"
				});
}

req.figure.ChiBase.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiBase",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiBase.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiBase Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiBase.prototype.getConstraints = function() {
	return {
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessPartner.js
   Description: A ChiBusinesPartner is an external person that has a Business relation with the enterprise.
  */
  


req.figure.ChiBusinessPartner = function(label) {
	req.figure.RectFigure.call(this, "ChiBusinessPartner", label);
}

req.figure.ChiBusinessPartner.prototype = new req.figure.RectFigure;

req.figure.ChiBusinessPartner.prototype.type = "req.figure.ChiBusinessPartner";

req.figure.ChiBusinessPartner.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiBusinessPartner",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiBusinessPartner"
				});
}

req.figure.ChiBusinessPartner.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiBusinessPartner",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiBusinessPartner.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiBusinessPartner Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiBusinessPartner.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessPartnerActive.js
   Description: A ChiBusinesPartnerActive is a direct customer of the enterprise.
  */
  


req.figure.ChiBusinessPartnerActive = function(label) {
	req.figure.RectFigure.call(this, "ChiBusinessPartnerActive", label);
}

req.figure.ChiBusinessPartnerActive.prototype = new req.figure.RectFigure;

req.figure.ChiBusinessPartnerActive.prototype.type = "req.figure.ChiBusinessPartnerActive";

req.figure.ChiBusinessPartnerActive.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiBusinessPartnerActive",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiBusinessPartnerActive"
				});
}

req.figure.ChiBusinessPartnerActive.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiBusinessPartnerActive",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiBusinessPartnerActive.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiBusinessPartnerActive Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiBusinessPartnerActive.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessPartnerPassive.js
   Description: A ChiBusinesPartnerPassive is an indirect customer (typically a supplier) of the enterprise.
  */
  


req.figure.ChiBusinessPartnerPassive = function(label) {
	req.figure.RectFigure.call(this, "ChiBusinessPartnerPassive", label);
}

req.figure.ChiBusinessPartnerPassive.prototype = new req.figure.RectFigure;

req.figure.ChiBusinessPartnerPassive.prototype.type = "req.figure.ChiBusinessPartnerPassive";

req.figure.ChiBusinessPartnerPassive.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiBusinessPartnerPassive",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiBusinessPartnerPassive"
				});
}

req.figure.ChiBusinessPartnerPassive.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiBusinessPartnerPassive",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiBusinessPartnerPassive.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiBusinessPartnerPassive Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiBusinessPartnerPassive.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessProcess.js
   Description: A Business Process is a sum of actions that produces a business advantage to the enterprise. It is composed by one or many ChiBusinessUseCases.
  */
  


req.figure.ChiBusinessProcess = function(label) {
	req.figure.RectFigure.call(this, "ChiBusinessProcess", label);
}

req.figure.ChiBusinessProcess.prototype = new req.figure.RectFigure;

req.figure.ChiBusinessProcess.prototype.type = "req.figure.ChiBusinessProcess";

req.figure.ChiBusinessProcess.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiBusinessProcess",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiBusinessProcess"
				});
}

req.figure.ChiBusinessProcess.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiBusinessProcess",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiBusinessProcess.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiBusinessProcess Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiBusinessProcess.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
		ChiBusinessUseCase: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiBusinessUseCaseCore: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		Package: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		Actor: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiRequirement: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiGoal: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiIssue: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiFeature: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessUseCase.js
   Description: A Business Use Case is part of a business process that produces an advantage to the enterprise.
  */
  


req.figure.ChiBusinessUseCase = function(label) {
	req.figure.RectFigure.call(this, "ChiBusinessUseCase", label);
}

req.figure.ChiBusinessUseCase.prototype = new req.figure.RectFigure;

req.figure.ChiBusinessUseCase.prototype.type = "req.figure.ChiBusinessUseCase";

req.figure.ChiBusinessUseCase.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiBusinessUseCase",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiBusinessUseCase"
				});
}

req.figure.ChiBusinessUseCase.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiBusinessUseCase",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiBusinessUseCase.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiBusinessUseCase Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'PrimaryActor',
	        name: 'PrimaryActor',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:Chi format 
	        },
			{	
			fieldLabel: 'OtherActors',
	        name: 'OtherActors',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'GoalInContext',
	        name: 'GoalInContext',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Scope',
	        name: 'Scope',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Level',
	        name: 'Level',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Stakeholders',
	        name: 'Stakeholders',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Precondition',
	        name: 'Precondition',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Trigger',
	        name: 'Trigger',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'MainSuccessScenario',
	        name: 'MainSuccessScenario',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Extensions',
	        name: 'Extensions',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiBusinessUseCase.prototype.getConstraints = function() {
	return {
		
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiBusinessUseCaseCore.js
   Description: A Core Use Case generates a value for an active business partner and is directly connected to the objectives (ChiGoals) of a company or the process of his existence (typically making money).
  */
  


req.figure.ChiBusinessUseCaseCore = function(label) {
	req.figure.RectFigure.call(this, "ChiBusinessUseCaseCore", label);
}

req.figure.ChiBusinessUseCaseCore.prototype = new req.figure.RectFigure;

req.figure.ChiBusinessUseCaseCore.prototype.type = "req.figure.ChiBusinessUseCaseCore";

req.figure.ChiBusinessUseCaseCore.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiBusinessUseCaseCore",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiBusinessUseCaseCore"
				});
}

req.figure.ChiBusinessUseCaseCore.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiBusinessUseCaseCore",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiBusinessUseCaseCore.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiBusinessUseCaseCore Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'PrimaryActor',
	        name: 'PrimaryActor',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:Chi format 
	        },
			{	
			fieldLabel: 'OtherActors',
	        name: 'OtherActors',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'GoalInContext',
	        name: 'GoalInContext',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Scope',
	        name: 'Scope',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Level',
	        name: 'Level',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Stakeholders',
	        name: 'Stakeholders',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Precondition',
	        name: 'Precondition',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Trigger',
	        name: 'Trigger',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'MainSuccessScenario',
	        name: 'MainSuccessScenario',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Extensions',
	        name: 'Extensions',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiBusinessUseCaseCore.prototype.getConstraints = function() {
	return {
		
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiController.js
   Description: 
  */
  


req.figure.ChiController = function(label) {
	req.figure.RectFigure.call(this, "ChiController", label);
}

req.figure.ChiController.prototype = new req.figure.RectFigure;

req.figure.ChiController.prototype.type = "req.figure.ChiController";

req.figure.ChiController.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiController",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiController"
				});
}

req.figure.ChiController.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiController",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiController.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiController Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiController.prototype.getConstraints = function() {
	return {
	
		ChiNode: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiFeature.js
   Description: 
  */
  


req.figure.ChiFeature = function(label) {
	req.figure.RectFigure.call(this, "ChiFeature", label);
}

req.figure.ChiFeature.prototype = new req.figure.RectFigure;

req.figure.ChiFeature.prototype.type = "req.figure.ChiFeature";

req.figure.ChiFeature.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiFeature",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiFeature"
				});
}

req.figure.ChiFeature.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiFeature",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiFeature.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiFeature Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Author',
	        name: 'Author',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:ChiAuthors format 
	        },
			{	
			fieldLabel: 'Proofreader',
	        name: 'Proofreader',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:ChiAuthors format 
	        },
			{	
			fieldLabel: 'Status',
	        name: 'Status',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:ChiFeatureStatus format 
	        },
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiFeature.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
		NMFeatureRequirements: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiFeatureStatus.js
   Description: 
  */
  


req.figure.ChiFeatureStatus = function(label) {
	req.figure.RectFigure.call(this, "ChiFeatureStatus", label);
}

req.figure.ChiFeatureStatus.prototype = new req.figure.RectFigure;

req.figure.ChiFeatureStatus.prototype.type = "req.figure.ChiFeatureStatus";

req.figure.ChiFeatureStatus.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiFeatureStatus",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiFeatureStatus"
				});
}

req.figure.ChiFeatureStatus.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiFeatureStatus",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiFeatureStatus.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiFeatureStatus Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiFeatureStatus.prototype.getConstraints = function() {
	return {
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiGoal.js
   Description: a Measurable scope that the enterprise wants to achieve. 
  */
  


req.figure.ChiGoal = function(label, oid, parentoids, childoids) {
	req.figure.RectFigure.call(this, "ChiGoal", label, oid, parentoids, childoids);
}

req.figure.ChiGoal.prototype = new req.figure.RectFigure;

req.figure.ChiGoal.prototype.type = "req.figure.ChiGoal";

req.figure.ChiGoal.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiGoal",
						dataIndex: "Name",
						sortable: true
					}, {
						header: "parentoids",
						dataIndex: "parentoids",
						hidden: true,
						hideable: false
					}, {
						header: "childoids",
						dataIndex: "childoids",
						hidden: true,
						hideable: false
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiGoal"
				});
}

req.figure.ChiGoal.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiGoal",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}, {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

req.figure.ChiGoal.prototype.showEdit = function(bd, oid){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
		autoLoad: {
			url: req.data.jsonUrl,
			params: {
				sid: req.data.sid,
				usr_action: "display",
				response_format: "JSON",
				oid: oid
			}
		},
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiGoal Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Priority',
	        name: 'Priority',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Value_Name',
	        name: 'Value_Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Value_ammount',
	        name: 'Value_ammount',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Value_Goal',
	        name: 'Value_Goal',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiGoal.prototype.getConstraints = function() {
	return {
		
		ChiGoal: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
		ChiGoal: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiRequirement: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiIssue.js
   Description: 
  */
  


req.figure.ChiIssue = function(label) {
	req.figure.RectFigure.call(this, "ChiIssue", label);
}

req.figure.ChiIssue.prototype = new req.figure.RectFigure;

req.figure.ChiIssue.prototype.type = "req.figure.ChiIssue";

req.figure.ChiIssue.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiIssue",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiIssue"
				});
}

req.figure.ChiIssue.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiIssue",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiIssue.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiIssue Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Author',
	        name: 'Author',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:ChiAuthors format 
	        },
			{	
			fieldLabel: 'Responsible',
	        name: 'Responsible',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:ChiAuthors format 
	        },
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiIssue.prototype.getConstraints = function() {
	return {
		
		ChiRequirement: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiNode.js
   Description: 
  */
  


req.figure.ChiNode = function(label) {
	req.figure.RectFigure.call(this, "ChiNode", label);
}

req.figure.ChiNode.prototype = new req.figure.RectFigure;

req.figure.ChiNode.prototype.type = "req.figure.ChiNode";

req.figure.ChiNode.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiNode",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiNode"
				});
}

req.figure.ChiNode.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiNode",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiNode.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiNode Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'display_value',
	        name: 'display_value',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'parent_order',
	        name: 'parent_order',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'child_order',
	        name: 'child_order',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'pk_name',
	        name: 'pk_name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'is_searchable',
	        name: 'is_searchable',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#fix:true|false format 
	        },
			{	
			fieldLabel: 'orderby',
	        name: 'orderby',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'is_soap',
	        name: 'is_soap',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#fix:true|false format 
	        },
			{	
			fieldLabel: 'initparams',
	        name: 'initparams',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiNode.prototype.getConstraints = function() {
	return {
		
		ChiController: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
		ChiValue: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiRequirement.js
   Description: A Business guide line about the Enterprise or the project.
  */
  


req.figure.ChiRequirement = function(label, oid, parentoids, childoids) {
	req.figure.RectFigure.call(this, "ChiRequirement", label, oid, parentoids, childoids);
}

req.figure.ChiRequirement.prototype = new req.figure.RectFigure;

req.figure.ChiRequirement.prototype.type = "req.figure.ChiRequirement";

req.figure.ChiRequirement.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiRequirement",
						dataIndex: "Name",
						sortable: true
					}, {
						header: "parentoids",
						dataIndex: "parentoids",
						hidden: true,
						hideable: false
					}, {
						header: "childoids",
						dataIndex: "childoids",
						hidden: true,
						hideable: false
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiRequirement"
				});
}

req.figure.ChiRequirement.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiRequirement",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}, {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

req.figure.ChiRequirement.prototype.showEdit = function(bd, oid){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
		autoLoad: {
			url: req.data.jsonUrl,
			params: {
				sid: req.data.sid,
				usr_action: "display",
				response_format: "JSON",
				oid: oid
			}
		},
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiRequirement Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'reqType',
	        name: 'reqType',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:ChiRequirementType format 
	        },
			{	
			fieldLabel: 'Priority',
	        name: 'Priority',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Author',
	        name: 'Author',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:ChiAuthors format 
	        },
			{	
			fieldLabel: 'Proofreader',
	        name: 'Proofreader',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:ChiAuthors format 
	        },
			{	
			fieldLabel: 'Status',
	        name: 'Status',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#async:ChiRequirementStatus format 
	        },
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiRequirement.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiRequirement: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiGoal: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
		ChiIssue: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		NMFeatureRequirements: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiRequirement: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiRequirementStatus.js
   Description: 
  */
  


req.figure.ChiRequirementStatus = function(label) {
	req.figure.RectFigure.call(this, "ChiRequirementStatus", label);
}

req.figure.ChiRequirementStatus.prototype = new req.figure.RectFigure;

req.figure.ChiRequirementStatus.prototype.type = "req.figure.ChiRequirementStatus";

req.figure.ChiRequirementStatus.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiRequirementStatus",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiRequirementStatus"
				});
}

req.figure.ChiRequirementStatus.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiRequirementStatus",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiRequirementStatus.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiRequirementStatus Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiRequirementStatus.prototype.getConstraints = function() {
	return {
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiRequirementType.js
   Description: Type of requirement
  */
  


req.figure.ChiRequirementType = function(label) {
	req.figure.RectFigure.call(this, "ChiRequirementType", label);
}

req.figure.ChiRequirementType.prototype = new req.figure.RectFigure;

req.figure.ChiRequirementType.prototype.type = "req.figure.ChiRequirementType";

req.figure.ChiRequirementType.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiRequirementType",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiRequirementType"
				});
}

req.figure.ChiRequirementType.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiRequirementType",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiRequirementType.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiRequirementType Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiRequirementType.prototype.getConstraints = function() {
	return {
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiValue.js
   Description: 
  */
  


req.figure.ChiValue = function(label) {
	req.figure.RectFigure.call(this, "ChiValue", label);
}

req.figure.ChiValue.prototype = new req.figure.RectFigure;

req.figure.ChiValue.prototype.type = "req.figure.ChiValue";

req.figure.ChiValue.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiValue",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiValue"
				});
}

req.figure.ChiValue.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiValue",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiValue.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiValue Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'app_data_type',
	        name: 'app_data_type',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'db_data_type',
	        name: 'db_data_type',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'is_editable',
	        name: 'is_editable',
	        
	        allowBlank:false,	        
	        inputType:'textfield', //in model originally was in  select#fix:true|false format 
	        },
			{	
			fieldLabel: 'input_type',
	        name: 'input_type',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'display_type',
	        name: 'display_type',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'restrictions_match',
	        name: 'restrictions_match',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'restrictions_not_match',
	        name: 'restrictions_not_match',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'restrictions_description',
	        name: 'restrictions_description',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'column_name',
	        name: 'column_name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiValue.prototype.getConstraints = function() {
	return {
		
		ChiNode: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiView.js
   Description: 
  */
  


req.figure.ChiView = function(label) {
	req.figure.RectFigure.call(this, "ChiView", label);
}

req.figure.ChiView.prototype = new req.figure.RectFigure;

req.figure.ChiView.prototype.type = "req.figure.ChiView";

req.figure.ChiView.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiView",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiView"
				});
}

req.figure.ChiView.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiView",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiView.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiView Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiView.prototype.getConstraints = function() {
	return {
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiWorker.js
   Description: A ChiWorker is a special actor that works within the enterprise. 
  */
  


req.figure.ChiWorker = function(label) {
	req.figure.RectFigure.call(this, "ChiWorker", label);
}

req.figure.ChiWorker.prototype = new req.figure.RectFigure;

req.figure.ChiWorker.prototype.type = "req.figure.ChiWorker";

req.figure.ChiWorker.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiWorker",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiWorker"
				});
}

req.figure.ChiWorker.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiWorker",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiWorker.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiWorker Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiWorker.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiWorkerExternal.js
   Description: A Chi External Worker is an employee that interacts directly with ChiBusinesPartner outside the enterprise.
  */
  


req.figure.ChiWorkerExternal = function(label) {
	req.figure.RectFigure.call(this, "ChiWorkerExternal", label);
}

req.figure.ChiWorkerExternal.prototype = new req.figure.RectFigure;

req.figure.ChiWorkerExternal.prototype.type = "req.figure.ChiWorkerExternal";

req.figure.ChiWorkerExternal.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiWorkerExternal",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiWorkerExternal"
				});
}

req.figure.ChiWorkerExternal.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiWorkerExternal",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiWorkerExternal.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiWorkerExternal Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'is_OfflineUser',
	        name: 'is_OfflineUser',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiWorkerExternal.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.ChiWorkerInternal.js
   Description: A Chi  Worker Internal is an employee of the enterprise that has no contact with Business partners.
  */
  


req.figure.ChiWorkerInternal = function(label) {
	req.figure.RectFigure.call(this, "ChiWorkerInternal", label);
}

req.figure.ChiWorkerInternal.prototype = new req.figure.RectFigure;

req.figure.ChiWorkerInternal.prototype.type = "req.figure.ChiWorkerInternal";

req.figure.ChiWorkerInternal.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "ChiWorkerInternal",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "ChiWorkerInternal"
				});
}

req.figure.ChiWorkerInternal.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=ChiWorkerInternal",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.ChiWorkerInternal.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'ChiWorkerInternal Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.ChiWorkerInternal.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.EntityBase.js
   Description: 
  */
  


req.figure.EntityBase = function(label) {
	req.figure.RectFigure.call(this, "EntityBase", label);
}

req.figure.EntityBase.prototype = new req.figure.RectFigure;

req.figure.EntityBase.prototype.type = "req.figure.EntityBase";

req.figure.EntityBase.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "EntityBase",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "EntityBase"
				});
}

req.figure.EntityBase.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=EntityBase",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.EntityBase.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'EntityBase Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.EntityBase.prototype.getConstraints = function() {
	return {
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.EntityBaseExtended.js
   Description: 
  */
  


req.figure.EntityBaseExtended = function(label) {
	req.figure.RectFigure.call(this, "EntityBaseExtended", label);
}

req.figure.EntityBaseExtended.prototype = new req.figure.RectFigure;

req.figure.EntityBaseExtended.prototype.type = "req.figure.EntityBaseExtended";

req.figure.EntityBaseExtended.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "EntityBaseExtended",
						dataIndex: "Name",
						sortable: true
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "EntityBaseExtended"
				});
}

req.figure.EntityBaseExtended.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=EntityBaseExtended",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}]
		})
	});
}

req.figure.EntityBaseExtended.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'EntityBaseExtended Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.EntityBaseExtended.prototype.getConstraints = function() {
	return {
	
	};
}

/*
 This file was generated by wCMFGenerator 2.6.1.0012 from model/requirements.xmi on 27.08.08 19:43. 
  Manual modifications should be placed inside the protected regions.
   developer: Giuseppe Platania
   Version: 1.0
   Class: class.Package.js
   Description: 
  */
  


req.figure.Package = function(label) {
	req.figure.RectFigure.call(this, "Package", label);
}

req.figure.Package.prototype = new req.figure.RectFigure;

req.figure.Package.prototype.type = "req.figure.Package";

req.figure.Package.prototype.getGrid = function(store) {
	return new Ext.grid.GridPanel({
					columns: [{
						header: "Package",
						dataIndex: "Name",
						sortable: true
					}, {
						header: "parentoids",
						dataIndex: "parentoids",
						visible: false
					}, {
						header: "childoids",
						dataIndex: "childoids",
						visible: false
					}],
					store: store,
					enableDragDrop: true,
					selModel: new Ext.grid.RowSelectionModel({
						singleSelect: true
					}),
					ddGroup: "gridDDGroup",
					reqClassName: "Package"
				});
}

req.figure.Package.prototype.getStore = function(url){
	return new Ext.data.Store({
		url: url + "&type=Package",
		reader: new Ext.data.JsonReader({
			totalProperty: "totalCount",
			root: "objects",
			id: "oid",
			fields: [{
				name: "Name",
				mapping: "values[1].Name.value"
			}, {
				name: "parentoids",
				mapping: "properties.parentoids"
			}, {
				name: "childoids",
				mapping: "properties.childoids"
			}]
		})
	});
}

req.figure.Package.prototype.showEdit = function(bd){

	Ext.form.Field.prototype.msgTarget = 'side';	
	var form = new Ext.FormPanel({
	
		labelWidth: 150,
		url: '',
		frame: true,
		title: 'Package Edit View',
		bodyStyle: 'padding:5px 5px 0',
		width: 500,
		defaults: {
			width: 230
		},
		defaultType: 'textfield',
		items: [
					{	
			fieldLabel: 'Alias',
	        name: 'Alias',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Version',
	        name: 'Version',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Name',
	        name: 'Name',
	        
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'Notes',
	        name: 'Notes',
	        
	        allowBlank:false,	        
	        inputType:'htmleditor', 
	        },
			{	
			fieldLabel: 'created',
	        name: 'created',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'creator',
	        name: 'creator',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'last_editor',
	        name: 'last_editor',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },
			{	
			fieldLabel: 'modified',
	        name: 'modified',
	        readOnly:true,
	        allowBlank:false,	        
	        inputType:'textfield', 
	        },


				],
		buttons: [{
			text: 'Save',
			handler: function(){
				form.getForm().submit({
					url: 'main.php',
					method: 'POST',
					success: function(form, action){
						alert('Success: ' + action.response.responseText);
					},
					failure: function(form, action){
						alert('Failure: ' + action.failureType);
					}
				});
			}
		}, {
			text: 'Cancel',
			handler: function(){
				form.getForm().reset();
			}
		}]
	});
	
	form.render(bd);
};

req.figure.Package.prototype.getConstraints = function() {
	return {
		
		Package: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},	
		ChiBusinessProcess: {
			label: "depends on",
			inverse: false,
			sourceMaxConns: -1,
			targetMaxConns: -1
		},
		Package: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		Actor: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiRequirement: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiGoal: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiIssue: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiFeature: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiBusinessProcess: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiBusinessPartner: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiBusinessPartnerPassive: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiBusinessPartnerActive: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiWorker: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiWorkerInternal: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
		ChiWorkerExternal: {
			label: "defines",
			inverse: true,
			sourceMaxConns: -1,
			targetMaxConns: 1		
		},
		
	};
}
