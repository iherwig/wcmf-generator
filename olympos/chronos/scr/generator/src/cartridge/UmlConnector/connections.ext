import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

Void establishConnectionsToUseCase(cwm::ManyToMany ch, uml::Actor parentActor, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let childUseCase = um.allOwnedElements().typeSelect(uml::UseCase).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childUseCase != null
		? (
			let conn = parentActor.createAssociation(parentNav, parentAK, "", 1, 1, childUseCase, childNav, childAK, "", 1, 1):
				conn.setName(label)
		) : (
			Void
		)
	)
;

Void establishConnectionsToActor(cwm::Child ch, uml::UseCase parentUseCase, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let childActor = um.allOwnedElements().typeSelect(uml::Actor).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childActor != null
		? (
			let conn = parentUseCase.createAssociation(parentNav, parentAK, "", 1, 1, childActor, childNav, childAK, "", 1, 1):
				conn.setName(label)
		) : (
			Void
		)
	)
;

Void establishConnectionsToClass(cwm::Child ch, uml::Class parentClass, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let conn = parentClass.createAssociation(parentNav, parentAK, "", 1, 1, childClass, childNav, childAK, "", 1, 1):
				conn.setName(label)
		) : (
			Void
		)
	)
;

Void establishConnectionsToClass(cwm::ManyToMany ch, uml::Class parentClass, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let conn = parentClass.createAssociation(parentNav, parentAK, "", 1, 1, childClass, childNav, childAK, "", 1, 1):
				conn.setName(label)
		) : (
			Void
		)
	)
;

Void establishDependencyFromClass(cwm::Child ch, uml::Class parentClass, uml::Model um, String label) :
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let conn = childClass.createDependency(parentClass):
				conn.setName(label)
		) : (
			Void
		)
	)
;

Void establishRealizationToClass(cwm::ManyToMany mtm, uml::Class parentClass, uml::Model um, String label) :
	//(new uml::Generalization).t
	//(new uml::Class).gener
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == mtm.targetType + ":" + mtm.targetOid).first(): (
		childClass != null
		? {
			let rel = new uml::Realization : (
				rel.supplier.add(parentClass) ->
				rel.client.add(childClass) ->
				rel.setName(label)
			) ->
			parentClass.getNearestPackage().packagedElement.add(rel)
			//parentClass.general.add(childClass)
		} : {
			Void
		}
	)
;

Void establishRealizationToUseCase(cwm::Child ch, uml::Class parentClass, uml::Model um, String label) :
	//(new uml::Class).parents().add()
	let childUseCase = um.allOwnedElements().typeSelect(uml::UseCase).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childUseCase != null
		? {
			let rel = new uml::Realization : (
				rel.supplier.add(parentClass) ->
				rel.client.add(childUseCase) ->
				rel.setName(label)
			) ->
			parentClass.getNearestPackage().packagedElement.add(rel)
		} : {
			Void
		}
	)
;

Void establishConnectionsToOpaqueAction(cwm::Child ch, uml::InitialNode parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::OpaqueAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(label)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToActivityFinalNode(cwm::Child ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::ActivityFinalNode).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(label)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToOpaqueAction(cwm::Child ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::OpaqueAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(label)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToDecisionNode(cwm::ManyToMany ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::DecisionNode).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(label)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToSendSignalAction(cwm::Child ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::SendSignalAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(label)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToClass(cwm::Child ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = parent.createAssociation(parentNav, parentAK, "", 1, 1, child, childNav, childAK, "", 1, 1):
				conn.setName(label)
		) : (
			Void
		)
	)
;

Void establishConnectionsToAcceptEventAction(cwm::Child ch, uml::SendSignalAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::AcceptEventAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(label)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToAcceptEventAction(cwm::Child ch, uml::OpaqueAction parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::Association).setN
	let child = um.allOwnedElements().typeSelect(uml::AcceptEventAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(label)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishConnectionsToOpaqueAction(cwm::ManyToMany ch, uml::DecisionNode parent, uml::Model um, String label, uml::AggregationKind parentAK, uml::AggregationKind childAK, Boolean parentNav, Boolean childNav) :
	//(new uml::DecisionNode).activity.
	let child = um.allOwnedElements().typeSelect(uml::OpaqueAction).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		child != null
		? (
			let conn = new uml::ControlFlow: (
				conn.setSource(parent) ->
				conn.setTarget(child) ->
				conn.setName(label)
			) ->
			parent.activity.edge.add(conn)
		) : (
			Void
		)
	)
;

Void establishGeneralizationToActor(cwm::Child ch, uml::Actor parentActor, uml::Model um) :
	//(new uml::Generalization).set
	let childClass = um.allOwnedElements().typeSelect(uml::Actor).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let rel = new uml::Generalization : (
				rel.setSpecific(childClass) ->
				rel.setGeneral(parentActor)
			)
		) : (
			Void
		)
	)
;

Void establishGeneralizationToClass(cwm::ManyToMany ch, uml::Class parentClass, uml::Model um) :
	//(new uml::Generalization).set
	let childClass = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == ch.targetType + ":" + ch.targetOid).first(): (
		childClass != null
		? (
			let rel = new uml::Generalization : (
				rel.setSpecific(childClass) ->
				rel.setGeneral(parentClass)
			)
		) : (
			Void
		)
	)
;
