import cwm;
import Chronos;
import uml;

extension common::util;
extension common::umlutils;

cwm::Child convertToChild(uml::Class otherClass) :
	let result = new cwm::Child : (
		result.setTargetType(otherClass.metaType.name.split("::").last()) ->
		result.setTargetOid(otherClass.getId())
	) ->
	result
;

cwm::ManyToMany convertToMany(uml::Class other) :
	let result = new cwm::ManyToMany : (
		result.setTargetType(other.metaType.name.split("::").last()) ->
		result.setTargetOid(other.getId())
	) ->
	result
;

cwm::Child convertToChild(uml::ActivityFinalNode otherClass) :
	let result = new cwm::Child : (
		result.setTargetType("ActivityFinal") ->
		result.setTargetOid(otherClass.getId())
	) ->
	result
;

cwm::Child convertToChild(uml::OpaqueAction otherClass) :
	let result = new cwm::Child : (
		result.setTargetType("Activity") ->
		result.setTargetOid(otherClass.getId())
	) ->
	result
;

cwm::ManyToMany convertToMany(uml::DecisionNode other) :
	let result = new cwm::ManyToMany : (
		result.setTargetType("ActivityDecision") ->
		result.setTargetOid(other.getId())
	) ->
	result
;

cwm::Child convertToChild(uml::SendSignalAction otherClass) :
	let result = new cwm::Child : (
		result.setTargetType("ActivitySend") ->
		result.setTargetOid(otherClass.getId())
	) ->
	result
;

cwm::ManyToMany convertToMany(uml::OpaqueAction other) :
	let result = new cwm::ManyToMany : (
		result.setTargetType("Activity") ->
		result.setTargetOid(other.getId())
	) ->
	result
;

cwm::Child convertToChild(uml::AcceptEventAction otherClass) :
	let result = new cwm::Child : (
		result.setTargetType("ActivityReceive") ->
		result.setTargetOid(otherClass.getId())
	) ->
	result
;

cwm::ManyToMany convertToMany(uml::Class other, String relationType) :
	let result = new cwm::ManyToMany : (
		result.setTargetType(other.metaType.name.split("::").last()) ->
		result.setRelationType(relationType) ->
		result.setTargetOid(other.getId())
	) ->
	result
;

cwm::ManyToMany convertToMany(uml::Class other, String relationType, String targetType) :
	let result = new cwm::ManyToMany : (
		result.setTargetType(targetType) ->
		result.setRelationType(relationType) ->
		result.setTargetOid(other.getId())
	) ->
	result
;

cwm::ManyToMany convertToMany(uml::Association this, uml::Class source) :
	let result = new cwm::ManyToMany:
	let ownEnd = this.memberEnd.selectFirst(e|e.type == source):
	let otherEnd = ownEnd.getOtherEnd():

	info("Association convert: " + this.name + " class: " + source.name + " ends: " + this.memberEnd.type) ->
	
	result.setRelationType(ownEnd.aggregation.getUwmRelationType()) ->

	result.setTargetType(getTargetType(otherEnd.type.metaType.name.split("::").last())) ->
	result.setTargetRole(getTargetRole(otherEnd.type.metaType.name.split("::").last())) ->
	result.setTargetOid(otherEnd.type.getId()) ->

	result.setSourceMultiplicity(ownEnd.getUwmMultiplicity()) ->
	result.setSourceNavigability(ownEnd.getUwmNavigability()) ->

	result.setTargetMultiplicity(otherEnd.getUwmMultiplicity()) ->
	result.setTargetNavigability(otherEnd.getUwmNavigability()) ->
	
	result
;

String getUwmRelationType(uml::AggregationKind this):
	switch(this) {
		case uml::AggregationKind::composite:
			"composition"
		
		case uml::AggregationKind::shared:
			"aggregation"
			
		case uml::AggregationKind::none:
			"association"
		
		default:
			null
	}
;

String getTargetType(String this):
	this
;

String getTargetRole(String this):
	switch (this) {
		case "ChiNode": "ChiNodeTarget"
		case "ChiManyToMany": "NMChiNodeChiMany2ManyChiNodeEnd"
		default: this
	}
;

String getUwmMultiplicity(uml::Property this):
	this.lowerBound() == 0 && this.upperBound() == -1 ? (
		"*"
	) : (
		this.lowerBound() == this.upperBound() ? (
			this.lowerBound().toString()
		) : (
			this.upperBound() == -1 ? (
				this.lowerBound().toString() + "..*"
			) : (
				this.lowerBound().toString() + ".." + this.upperBound()
			)
		)
	)
;

String getUwmNavigability(uml::Property this):
	this.isNavigable() ?
		"Navigable"
	:
		"Non-Navigable"
;
