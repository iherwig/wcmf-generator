import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::umlutils;

uml::Operation convert(cwm::Operation o):
	let uc = new uml::Operation : {
		uc.setName("Operation:" + o.id)
	} ->
	uc
;

Void transferValues(cwm::Operation c, uml::Model um):
	//(new uml::Class).setT
	let uc = um.allOwnedElements().typeSelect(uml::Operation).select(e|e.name == "Operation:" + c.id).first(): {
		uc.setName(c.name) ->
		c.notes != null ? uc.ownedComment.add(((new uml::Comment).setBody(c.notes))) : Void
/*
		uc.applyStereotype("Chronos::Operation") ->
		uc.setTaggedValue("Chronos::Operation", "ReturnType", c.returnType) ->
		uc.setTaggedValue("Chronos::Operation", "Parameters", c.parameters) ->
		uc.setTaggedValue("Chronos::Operation", "Alias", c.alias) ->
		uc.setTaggedValue("Chronos::Operation", "Version", c.version) ->

		uc.setTaggedValue("Chronos::Operation", "created", c.created) ->
		uc.setTaggedValue("Chronos::Operation", "creator", c.creator) ->
		uc.setTaggedValue("Chronos::Operation", "last_editor", c.lastEditor) ->
		uc.setTaggedValue("Chronos::Operation", "modified", c.modified)
*/
	}
;

cwm::Operation convertToCwm(uml::Operation c) :
	let un = new cwm::Operation : (
		un.setId(c.getId()) ->
		un.setName(c.name) ->
		un.setNotes(c.getComment())
/*
		un.setReturnType(c.getTaggedValue("Chronos::Operation", "ReturnType").toString()) ->
		un.setParameters(c.getTaggedValue("Chronos::Operation", "Parameters").toString()) ->
		un.setAlias(c.getTaggedValue("Chronos::Operation", "Alias").toString()) ->
		un.setVersion(c.getTaggedValue("Chronos::Operation", "Version").toString()) ->

		un.setCreated(c.getTaggedValue("Chronos::Operation", "created").toString()) ->
		un.setCreator(c.getTaggedValue("Chronos::Operation", "creator").toString()) ->
		un.setLastEditor(c.getTaggedValue("Chronos::Operation", "last_editor").toString()) ->
		un.setModified(c.getTaggedValue("Chronos::Operation", "modified").toString())
*/
	) ->
	un
;
