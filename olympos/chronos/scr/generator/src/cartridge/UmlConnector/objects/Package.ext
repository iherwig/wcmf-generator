import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::util;
extension common::umlutils;

extension cartridge::UmlConnector::objects::ChiBusinessProcess;
extension cartridge::UmlConnector::objects::ChiBusinessUseCase;
extension cartridge::UmlConnector::objects::ChiBusinessUseCaseCore;
extension cartridge::UmlConnector::objects::ChiFeature;
extension cartridge::UmlConnector::objects::ChiGoal;
extension cartridge::UmlConnector::objects::ChiIssue;
extension cartridge::UmlConnector::objects::ChiRequirement;
extension cartridge::UmlConnector::objects::ChiWorkerExternal;
extension cartridge::UmlConnector::objects::ChiBusinessPartner;
extension cartridge::UmlConnector::objects::ChiBusinessPartnerActive;
extension cartridge::UmlConnector::objects::ChiBusinessPartnerPassive;
extension cartridge::UmlConnector::objects::ChiController;
extension cartridge::UmlConnector::objects::ChiManyToMany;
extension cartridge::UmlConnector::objects::ChiNode;
extension cartridge::UmlConnector::objects::ChiOpinion;
extension cartridge::UmlConnector::objects::ChiOpinionInner;
extension cartridge::UmlConnector::objects::ChiStakeHolder;
extension cartridge::UmlConnector::objects::ChiSystem;
extension cartridge::UmlConnector::objects::ChiView;
extension cartridge::UmlConnector::objects::ChiWorker;
extension cartridge::UmlConnector::objects::ChiWorkerInternal;

uml::Package convert(cwm::Package p):
	//(new uml::UseCase).ow
	let up = new uml::Package : (
		info("Inside package " + p.name.toString()) ->
	
		up.setName("Package:" + p.id) ->
		up.nestedPackage.addAll(p.chiBusinessProcess.convert()) ->
		up.ownedType.addAll(p.chiBusinessUseCase.convert()) ->
		up.ownedType.addAll(p.chiBusinessUseCaseCore.convert()) ->
		up.ownedType.addAll(p.chiFeature.convert()) ->
		up.ownedType.addAll(p.chiGoal.convert()) ->
		up.ownedType.addAll(p.chiIssue.convert()) ->
		up.ownedType.addAll(p.chiRequirement.convert()) ->
		up.ownedType.addAll(p.chiWorkerExternal.convert()) ->
		up.ownedType.addAll(p.chiBusinessPartner.convert()) ->
		up.ownedType.addAll(p.chiBusinessPartnerActive.convert()) ->
		up.ownedType.addAll(p.chiBusinessPartnerPassive.convert()) ->
		up.ownedType.addAll(p.chiController.convert()) ->
		up.ownedType.addAll(p.chiManyToMany.convert()) ->
		up.ownedType.addAll(p.chiNode.convert()) ->
		up.ownedType.addAll(p.chiOpinion.convert()) ->
		up.ownedType.addAll(p.chiOpinionInner.convert()) ->
		up.ownedType.addAll(p.chiStakeHolder.convert()) ->
		up.ownedType.addAll(p.chiSystem.convert()) ->
		up.ownedType.addAll(p.chiView.convert()) ->
		up.ownedType.addAll(p.chiWorker.convert()) ->
		up.ownedType.addAll(p.chiWorkerInternal.convert()) ->
		up.nestedPackage.addAll(p.package.convert())
	) ->
	up
;

Void establishConnections(cwm::Package p, uml::Model um):
	p.chiGoal.establishConnections(um) ->
	p.chiRequirement.establishConnections(um) ->
	p.chiFeature.establishConnections(um) ->
	//p.chiIssue.establishConnections(um) ->
	//p.chiBusinessProcess.establishConnections(um) ->
	p.chiBusinessPartner.establishConnections(um) ->
	p.chiBusinessUseCase.establishConnections(um) ->
	p.chiBusinessUseCaseCore.establishConnections(um) ->
	p.chiBusinessPartnerActive.establishConnections(um) ->
	p.chiBusinessPartnerPassive.establishConnections(um) ->
	p.chiWorker.establishConnections(um) ->
	p.chiWorkerExternal.establishConnections(um) ->
	p.chiWorkerInternal.establishConnections(um) ->
	p.chiNode.establishConnections(um) ->
	p.chiController.establishConnections(um) ->

	p.package.establishConnections(um)
;

Void transferValues(cwm::Package p, uml::Model um):
	let uc = um.allOwnedElements().typeSelect(uml::Package).select(e|e.name == "Package:" + p.id).first(): (
		p.chiBusinessProcess.transferValues(um) ->
		p.chiBusinessUseCase.transferValues(um) ->
		p.chiBusinessUseCaseCore.transferValues(um) ->
		p.chiFeature.transferValues(um) ->
		p.chiGoal.transferValues(um) ->
		p.chiIssue.transferValues(um) ->
		p.chiRequirement.transferValues(um) ->
		p.chiWorkerExternal.transferValues(um) ->
		p.chiStakeHolder.transferValues(um) ->
		p.chiOpinionInner.transferValues(um) ->
		p.chiOpinion.transferValues(um) ->
		p.chiManyToMany.transferValues(um) ->
		p.chiBusinessPartner.transferValues(um) ->
		p.chiBusinessPartnerActive.transferValues(um) ->
		p.chiBusinessPartnerPassive.transferValues(um) ->
		p.chiWorker.transferValues(um) ->
		p.chiWorkerInternal.transferValues(um) ->
		p.chiNode.transferValues(um) ->
		p.chiSystem.transferValues(um) ->
		p.chiController.transferValues(um) ->
		p.chiView.transferValues(um) ->
		p.package.transferValues(um) ->
	
		uc.setName(p.name != "" ? p.name : "Unnamed Package") ->
		p.notes != null ? uc.ownedComment.add(((new uml::Comment).setBody(p.notes))) : Void
	)
;

cwm::Package convertToCwm(uml::Package p) :
	let up = new cwm::Package : (
		up.setId(p.getId()) ->
		up.setName(p.name) ->
		up.setNotes(p.getComment()) ->
		up.chiBusinessProcess.addAll(p.nestedPackage.select(e|e.getAppliedStereotype("Chronos::ChiBusinessProcess") != null).convertToCwm()) ->
		up.chiBusinessUseCase.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiBusinessUseCase") != null).convertToCwm()) ->
		up.chiBusinessUseCaseCore.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiBusinessUseCaseCore") != null).convertToCwm()) ->
		up.chiFeature.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiFeature") != null).convertToCwm()) ->
		up.chiGoal.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiGoal") != null).convertToCwm()) ->
		up.chiIssue.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiIssue") != null).convertToCwm()) ->
		up.chiRequirement.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiRequirement") != null).convertToCwm()) ->
		up.chiWorkerExternal.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiWorkerExternal") != null).convertToCwm()) ->
		up.chiBusinessPartner.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiBusinessPartner") != null).convertToCwm()) ->
		up.chiBusinessPartnerActive.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiBusinessPartnerActive") != null).convertToCwm()) ->
		up.chiBusinessPartnerPassive.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiBusinessPartnerPassive") != null).convertToCwm()) ->
		up.chiController.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiController") != null).convertToCwm()) ->
		up.chiNode.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiNode") != null).convertToCwm()) ->
		up.chiOpinion.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiOpinion") != null).convertToCwm()) ->
		up.chiOpinionInner.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiOpinionInner") != null).convertToCwm()) ->
		up.chiStakeHolder.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiStakeHolder") != null).convertToCwm()) ->
		up.chiSystem.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiSystem") != null).convertToCwm()) ->
		up.chiView.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiView") != null).convertToCwm()) ->
		up.chiWorker.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiWorker") != null).convertToCwm()) ->
		up.chiWorkerInternal.addAll(p.ownedType.select(e|e.getAppliedStereotype("Chronos::ChiWorkerInternal") != null).convertToCwm()) ->

		up.package.addAll(p.nestedPackage.typeSelect(uml::Package).select(e|e.getAppliedStereotypes().size == 0).convertToCwm())
	) ->
	up
;
