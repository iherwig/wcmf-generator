import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::umlutils;

extension cartridge::UmlConnector::connections;
extension cartridge::UmlConnector::connectionsToCwm;

uml::Class convert(cwm::ChiFeature f):
	let uc = new uml::Class : {
		uc.setName("ChiFeature:" + f.id)
	} ->
	uc
;

Void establishConnections(cwm::ChiFeature f, uml::Model um):
	let uc = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == "ChiFeature:" + f.id).first(): {
		f.child.select(e|e.targetType == "ChiBusinessUseCase").establishRealizationToUseCase(uc, um, "refines") ->
		f.child.select(e|e.targetType == "ChiBusinessUseCaseCore").establishRealizationToUseCase(uc, um, "refines")
	}
;

Void transferValues(cwm::ChiFeature f, uml::Model um):
	//(new uml::Comment).
	let uc = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == "ChiFeature:" + f.id).first(): {
		uc.applyStereotype("Chronos::ChiFeature") ->
		uc.setTaggedValue("Chronos::ChiFeature", "Author", f.author) ->
		uc.setTaggedValue("Chronos::ChiFeature", "Proofreader", f.proofreader) ->
		f.status.translateChiFeatureStatus() != null ? uc.setTaggedValue("Chronos::ChiFeature", "Status", f.status.translateChiFeatureStatus()) : Void ->
		uc.setTaggedValue("Chronos::ChiFeature", "Alias", f.alias) ->
		uc.setTaggedValue("Chronos::ChiFeature", "Version", f.version) ->
		uc.setName(f.name) ->
		f.notes != null ? uc.ownedComment.add(((new uml::Comment).setBody(f.notes))) : Void ->
		uc.setTaggedValue("Chronos::ChiFeature", "created", f.created) ->
		uc.setTaggedValue("Chronos::ChiFeature", "creator", f.creator) ->
		uc.setTaggedValue("Chronos::ChiFeature", "last_editor", f.lastEditor) ->
		uc.setTaggedValue("Chronos::ChiFeature", "modified", f.modified)
	}
;

Chronos::ChiFeatureStatus translateChiFeatureStatus(String source):
	switch(source.toLowerCase()) {
		case "implemented":
			Chronos::ChiFeatureStatus::Implemented
		
		case "proposed":
			Chronos::ChiFeatureStatus::Proposed
		
		case "rejected":
			Chronos::ChiFeatureStatus::Rejected
		
		case "validated":
			Chronos::ChiFeatureStatus::Validated
		
		default:
			null
	}
;

cwm::ChiFeature convertToCwm(Chronos::ChiFeature c) :
	let un = new cwm::ChiFeature : (
		un.setId(c.getId()) ->
		un.setAuthor(c.getTaggedValue("Chronos::ChiFeature", "Author").toString()) ->
		un.setProofreader(c.getTaggedValue("Chronos::ChiFeature", "Proofreader").toString()) ->
		c.getTaggedValue("Chronos::ChiFeature", "Status") != "" ? un.setStatus(c.getTaggedValue("Chronos::ChiFeature", "Status").name.toString()) : Void ->
		un.setAlias(c.getTaggedValue("Chronos::ChiFeature", "Alias").toString()) ->
		un.setVersion(c.getTaggedValue("Chronos::ChiFeature", "Version").toString()) ->
		un.setName(c.name) ->
		un.setNotes(c.getComment()) ->
		un.setCreated(c.getTaggedValue("Chronos::ChiFeature", "created").toString()) ->
		un.setCreator(c.getTaggedValue("Chronos::ChiFeature", "creator").toString()) ->
		un.setLastEditor(c.getTaggedValue("Chronos::ChiFeature", "last_editor").toString()) ->
		un.setModified(c.getTaggedValue("Chronos::ChiFeature", "modified").toString()) ->

		un.child.addAll(c.getRelationships().typeSelect(uml::Realization).client.typeSelect(Chronos::ChiBusinessUseCase).convertToChild())
	) ->
	un
;
