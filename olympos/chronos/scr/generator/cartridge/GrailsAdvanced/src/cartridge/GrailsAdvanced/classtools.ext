import uml;
import Chronos;

extension common::util;
extension common::umlutils;

extension common::cimUml;

extension cartridge::ChronosCommon::domain::ChiNode;

extension cartridge::ChiCmf::extensions::globals;

String getNameOfAssociationClass(Association assoc):
	assoc.getFirstOfManyToMany().type.name.toFirstUpper() + "To" + assoc.getFirstOfManyToMany().getOtherEnd().type.name.toFirstUpper();
	
boolean isManyToManyAssociation(Association assoc):
	(assoc.memberEnd.select(e|e.isMultivalued() && e.getOtherEnd().isMultivalued())).size > 0;
	
boolean isOneToOneAssociation(Association assoc):
	(assoc.memberEnd.select(e|!e.isMultivalued() && !e.getOtherEnd().isMultivalued())).size > 0;
	
Property getFirstOfManyToMany(Association assoc):
	assoc.memberEnd.sortBy(e|e.name).first();

Property getNameOfAssociationClassReference(Association assoc):
	assoc.getNameOfAssociationClass().toFirstLower()+ ":" + assoc.getNameOfAssociationClass();

boolean isReferenceOptional(Property p, Class clazz):
	p.type == clazz && p.getOtherEnd().lowerBound() == 0;

boolean isReferenceMultivalued(Property p, Class clazz):
	p.type == clazz && p.getOtherEnd().isMultivalued();

boolean hasAppliedStereotypes(Property p):
	p.getAppliedStereotypes().size > 0;

boolean isInitialCRUDDOMAIN(Class clazz) :
	(clazz.getAppliedStereotypes().select(e|e.name.matches("CRUD"))).size > 0;

boolean isRequired (Property p) :
	p.lower>0;

boolean isBidirectional (Association assoc) :
	assoc.memberEnd.size==2 && assoc.memberEnd.forAll(e|e.isNavigable());

Property getNavigableOtherEnd(Association assoc, Class c) :
	assoc.memberEnd.select(a|a.type == c && a.getOtherEnd().upperBound() == 1 && a.getOtherEnd().isNavigable());
	
Property getBelongsTo(Association assoc, Class c) :
	assoc.memberEnd.select(a|a.type == c && a.getOtherEnd().isComposition() && !a.getOtherEnd().isMultivalued());
	
boolean isEmbeddedClass(Property p) :
	p.association.getAppliedStereotypes().select(e|e.name.matches("embedded")).size  >0 && p.isNavigable();
	
boolean isMyEmbeddedValue(Property p, Class clazz):
	p.isEmbeddedClass()&& p.type != clazz;

boolean isEmbeddedAssociation(Association a) :
	a.getAppliedStereotypes().select(e|e.name.matches("embedded")).size  >0;
	
String getAssociationPropertyName(Property this):
	!this.name.isNullOrEmpty() ? this.name : this.type.name.toFirstLower()
;

boolean hasRestrictionsMatch(Property this):
	!((String) this.getTaggedValue("Chronos::ChiValue", "restrictions_match")).isNullOrEmpty()
;

boolean isNullable(Property this):
	this.lower == 0
;

String getPropertyName(Property this):
	!this.name.isNullOrEmpty() ?
		this.name
	: (
		this.association != null ?
			this.getAssociationPropertyName()
		:
			null
	)
;

String sanitizeType(String orgTypeName):
	switch(orgTypeName.toLowerCase()) {
		case "string": "String"
		case "float": "Float"
		case "double": "Double"
		case "decimal": "BigDecimal"
		case "int": "Integer"
		case "integer": "Integer"
		case "long": "Long"
		case "boolean": "Boolean"
		case "date": "java.util.Date"
		case "datetime": "java.util.Date"
		case "": "def"
		case null: "def"
		case "<undefined>": "def"
		case "void": "def"
		case "energyasmwh": "def"
		case "enumeratedtype": "def"
		case "flowgateafcusecode": "def"
		case "flowgateidctype": "def"
		case "freqbiasfactor": "def"
		case "participationfactor": "def"
		case "penaltyfactor": "def"
		case "powerrocpermin": "def"
		case "quantity": "def"
		case "rateofchange": "def"
		default: orgTypeName
	}
;

String getValuePrefix(uml::Type this):
	switch(this.name) {
		case "string": "\""
		case "String": "\""
		case "Date": "java.util.Date.parse(\"yyyy-MM-dd z\", \""
		case "date": "java.util.Date.parse(\"yyyy-MM-dd z\", \""
		default: ""
	}
;

String getValuePostfix(uml::Type this):
	switch(this.name) {
		case "string": "\""
		case "String": "\""
		case "Date": " GMT\")"
		case "date": " GMT\")"
		default: ""
	}
;

/**
 * Get the hierarchy role name (Parent, Child) of the ChiNode
 * represented by the association Property p in relation to
 * the ChiNode this
 */
String getHierarchyRole(Chronos::ChiNode this, Property p):
	!(this.isParentNode((Chronos::ChiNode) p.type) || this.isChildNode((Chronos::ChiNode) p.type)) ? 
		""
	: (
		this.isParentNode((Chronos::ChiNode) p.type) ? "Parent" : "Child"
	)
	// these roles should not be used any more
	-> ""
;

/**
 * Convert a package name into a path
 */
String asPath(String package):
	package.replaceAll("\\.", "/")
;
	
List[uml::Class] getImportedClasses(Chronos::ChiNode this):
	let fullQualifiedName = this.getNearestPackage().getPackageName():
	let result = {}:
	result.addAll(this.superClass) ->
	result.addAll(this.ownedAttribute.type) ->
	result.addAll(this.getParentNodesRecursive().type) ->
	
	result.addAll(this.getChildNodesRecursive().type) ->
	result.addAll(this.getOwners()) ->
	result.addAll(this.getBelongsToParentsRecursive().type) ->
	//result.addAll(this.getBelongsToParents().type.getSubClasses()) ->
	
	result.toSet().typeSelect(uml::Classifier).select(e|
		e.getNearestPackage().getPackageName() != fullQualifiedName &&
		e.qualifiedName != RequiredNodeSuperClass() &&
		e.name == e.name.sanitizeType()
	).removeCommonClasses()
;

List[uml::Property] getManyProperties(uml::Association this, uml::Class parentClass):
	this.memberEnd.select(s|s.isReferenceMultivalued(parentClass) && s.getOtherEnd().isNavigable())
;

Chronos::ChiManyToMany getManyToMany(Chronos::ChiNode this, Chronos::ChiNode otherEnd):
	this.getModel().allOwnedElements().typeSelect(Chronos::ChiManyToMany)
	.selectFirst(e|e.getParentNodes().type.containsAll({this, otherEnd}))
;

uml::Property getFirstManyToManyChild(Chronos::ChiNode this, Chronos::ChiNode otherEnd):
	let parents = this.getManyToMany(otherEnd).getParentNodes():

	parents.size > 0 ?
		parents.get(0).type
	:
		Void
;

Boolean isContainer(Chronos::ChiNode this):
	(this.qualifiedName == CONTAINER_NODE()) ||
	this.general.exists(e|((Chronos::ChiNode) e).isContainer())
;

String CONTAINER_NODE():
	GLOBALVAR containerNode
;

String ROOT_PACKAGE():
	GLOBALVAR RootPackage
;

String TARGET_ROOT_PACKAGE():
	GLOBALVAR targetRootPackage
;

String getJavaPackage(uml::Classifier this):
	let relativePackage = this.getNearestPackage().qualifiedName.startsWith(this.getModel().ApplicationPackageAbsolute()) ?
		this.getNearestPackage().qualifiedName.subString(this.getModel().ApplicationPackageAbsolute().length, this.getNearestPackage().qualifiedName.length).replaceAll("::", ".")
	:
		""
	:

	TARGET_ROOT_PACKAGE() + (
		relativePackage.length > 0 ? (
			(!relativePackage.startsWith(".") ? "." : "") + relativePackage
		) : (
			""
		)
	) 
;

String getJavaName(uml::Classifier this):
	this.getJavaPackage() + "." + this.name
;

Void renameKeywords(uml::Model this):
	info("Renaming keyword conflicts ...") ->
	this.allOwnedElements().typeSelect(uml::NamedElement).renameKeywords()
;

Void renameKeywords(uml::NamedElement this):
	let isKeyword = switch(this.name) {
		case "for": true
		case "class": true
		case "switch": true
		default: false
	}:
	
	isKeyword ? (
		warn("Groovy keyword conflict: Adding 'X' to " + this.qualifiedName) ->
		this.setName(this.name + "X")
	) : (
		Void
	)
;

cached List[uml::Property] getOwners(Chronos::ChiNode this):
	{}
		.addAll(this.getModel().allOwnedElements().typeSelect(Chronos::ChiValue).select(e|e.type == this).class.toSet())
;

cached List[uml::Property] getBelongsToParents(Chronos::ChiNode this):
	{}
	.addAll(this.getNavigableParentNodes())
	.addAll(
		this.getOwnAssociationEnds().select(e|
			{}
				.addAll(((Chronos::ChiNode) e.type).getSuperClassesRecursive())
				.add(e.type)
			.contains(this.getFirstManyToManyChild((Chronos::ChiNode) e.type))
			|| e.aggregation != uml::AggregationKind::none
		)
	)
	.select(e|
		(((uml::Property) e).getOtherEnd().aggregation == uml::AggregationKind::none)
		&&
		(
			(((uml::Property) e).aggregation != uml::AggregationKind::none)
			||
			(((uml::Property) e).association.memberEnd.indexOf(e) == 0)
		)
	)
;

cached List[uml::Property] getBelongsToParentsRecursive(Chronos::ChiNode this):
	{}
	.addAll(this.getBelongsToParents())
	.addAll(((List[Chronos::ChiNode]) this.getSuperClassesRecursive()).getBelongsToParents())
	.toSet().toList()
;
