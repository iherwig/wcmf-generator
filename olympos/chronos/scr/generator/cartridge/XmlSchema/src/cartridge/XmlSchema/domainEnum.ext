import uml;
import xmlSchema;
import jaxb;

extension org::openarchitectureware::xsd::lib::qname;

extension common::util;

extension common::nameNormalizer;

xmlSchema::TopLevelSimpleType convertToXsd(uml::Enumeration this, String targetNamespace):
	//(new xmlSchema::TopLevelSimpleType).r

	let result = new xmlSchema::TopLevelSimpleType:
	let restriction = new xmlSchema::RestrictionType1:
	
	info("Converting Enumeration " + this.name) ->
	
	result.setName(this.name.toFirstLower()) ->
	
	restriction.setBase(parseToQName("schema:string")) ->
	restriction.enumeration.addAll(this.ownedLiteral.select(e|e == this.ownedLiteral.selectFirst(f|f.name.normalizeMemberName() == e.name.normalizeMemberName())).convertToXsd()) ->
	result.setRestriction(restriction) ->
	
	result
;

xmlSchema::NoFixedFacet convertToXsd(uml::EnumerationLiteral this):
	let result = new xmlSchema::NoFixedFacet:
	
	info("	Converting EnumerationLiteral " + this.name) ->
	
	result.setValue(this.name.normalizeMemberName()) ->
	
	result
;

jaxb::BindingsType convertToJaxb(uml::EnumerationLiteral this, String targetNamespace):
	//(new jaxb::TypesafeEnumMemberType).
	let result = new jaxb::BindingsType:
	result.setNode("//xs:simpleType[@name='" + this.enumeration.name + "']//xs:enumeration[@value='" + this.name + "']") ->

	this.enumeration.ownedLiteral.exists(e|e.name.toLowerCase() == this.name.toLowerCase() && e != this) ? (
		let newName = this.name.toUpperCase() + "_" + this.enumeration.ownedLiteral.indexOf(this):
		warn("	Adding disambiguous information to " + this.enumeration.name + "." + this.name + " (" + newName + ")") ->
		result.typesafeEnumMember.add(newName.getTypesafeEnumMember())
	) : (
		Void
	) ->
	
	result
;

private jaxb::TypesafeEnumMemberType getTypesafeEnumMember(String str):
	JAVA org.sourceforge.olympos.xmlschema.JaxbHelper.getTypesafeEnumMember(java.lang.String)
;
