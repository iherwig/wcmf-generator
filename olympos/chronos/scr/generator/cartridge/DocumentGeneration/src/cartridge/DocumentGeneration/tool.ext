import uml;
import Chronos;
import diagrams;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::util;

String getFirstPackageName(uml::Model this):
	this.allOwnedElements().typeSelect(uml::Package).first().name
;

Boolean hasAnalysisContent(uml::Package this) :
	(this.allOwnedElements().select(e|
		e.getAppliedStereotype("Chronos::ChiGoal") != null
		|| e.getAppliedStereotype("Chronos::ChiRequirement") != null
		|| e.getAppliedStereotype("Chronos::ChiFeature") != null
		|| e.getAppliedStereotype("Chronos::ChiIssue") != null
	).size > 0)
;

Boolean hasDirectProcessUseCaseContent(uml::Package this) :
	(this.ownedElement.select(e|
		e.getAppliedStereotype("Chronos::ChiBusinessUseCase") != null
		|| e.getAppliedStereotype("Chronos::ChiBusinessUseCaseCore") != null
	).size > 0)
;

Boolean hasDirectProcessActorContent(uml::Package this) :
	(this.ownedElement.select(e|
		e.getAppliedStereotype("Chronos::ChiStakeHolder") != null
		|| e.getAppliedStereotype("Chronos::ChiWorker") != null
		|| e.getAppliedStereotype("Chronos::ChiWorkerInternal") != null
		|| e.getAppliedStereotype("Chronos::ChiWorkerExternal") != null
		|| e.getAppliedStereotype("Chronos::ChiBusinessPartner") != null
		|| e.getAppliedStereotype("Chronos::ChiBusinessPartnerActive") != null
		|| e.getAppliedStereotype("Chronos::ChiBusinessPartnerPassive") != null
	).size > 0)
;

Boolean hasProcessContent(uml::Package this) :
	(this.allOwnedElements().select(e|
		e.getAppliedStereotype("Chronos::ChiBusinessUseCase") != null
		|| e.getAppliedStereotype("Chronos::ChiBusinessUseCaseCore") != null
		|| e.getAppliedStereotype("Chronos::ChiStakeHolder") != null
		|| e.getAppliedStereotype("Chronos::ChiWorker") != null
		|| e.getAppliedStereotype("Chronos::ChiWorkerInternal") != null
		|| e.getAppliedStereotype("Chronos::ChiWorkerExternal") != null
		|| e.getAppliedStereotype("Chronos::ChiBusinessPartner") != null
		|| e.getAppliedStereotype("Chronos::ChiBusinessPartnerActive") != null
		|| e.getAppliedStereotype("Chronos::ChiBusinessPartnerPassive") != null
	).size > 0)
;

String sanitizeHtml(String source) :
	JAVA net.sourceforge.olympos.oaw.openoffice.HtmlConverter.html2openoffice(java.lang.String)
;

String datePublished() : 
	currentDateTime()
;

String replaceXmlChars(String org) :
	org.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;")
;

String getGermanName(uml::Package this) :
	"Paket"
;

String getKey1(uml::Package this):
	"Pakete"
;

String getGermanName(Chronos::ChiGoal this) :
	"Ziel"
;

String getKey1(Chronos::ChiGoal this):
	"Ziele"
;

String getGermanName(Chronos::ChiRequirement this) :
	"Anforderung"
;

String getKey1(Chronos::ChiRequirement this):
	"Anforderungen"
;
String getGermanName(Chronos::ChiFeature this) :
	"Maßnahme"
;

String getKey1(Chronos::ChiFeature this):
	"Maßnahmen"
;

String getGermanName(Chronos::ChiIssue this) :
	"Problem"
;

String getKey1(Chronos::ChiIssue this):
	"Probleme"
;

String getGermanName(Chronos::ChiBusinessProcess this) :
	"Geschäftsprozess"
;

String getKey1(Chronos::ChiBusinessProcess this):
	"Geschäftsprozesse"
;

String getGermanName(Chronos::ChiBusinessUseCase this) :
	"Geschäftsvorfall"
;

String getKey1(Chronos::ChiBusinessUseCase this):
	"Geschäftsvorfälle"
;

String getGermanName(Chronos::ChiBusinessUseCaseCore this) :
	"Haupt-Geschäftsvorfall"
;

String getKey1(Chronos::ChiBusinessUseCaseCore this):
	"Haupt-Geschäftsvorfälle"
;

String getGermanName(Chronos::ChiBusinessPartner this) :
	"Geschäftspartner"
;

String getKey1(Chronos::ChiBusinessPartner this):
	"Geschäftspartner"
;

String getGermanName(Chronos::ChiBusinessPartnerActive this) :
	"GeschäftspartnerAktiv"
;

String getKey1(Chronos::ChiBusinessPartnerActive this):
	"GeschäftspartnerAktiv"
;

String getGermanName(Chronos::ChiBusinessPartnerPassive this) :
	"GeschäftspartnerPassiv"
;

String getKey1(Chronos::ChiBusinessPartnerPassive this):
	"GeschäftspartnerPassiv"
;

String getGermanName(Chronos::ChiWorker this) :
	"Mitarbeiter"
;

String getKey1(Chronos::ChiWorker this):
	"Mitarbeiter"
;

String getGermanName(Chronos::ChiWorkerExternal this) :
	"MitarbeiterImGeschäftspartnerKontakt"
;

String getKey1(Chronos::ChiWorkerExternal this):
	"MitarbeiterImGeschäftspartnerKontakt"
;

String getGermanName(Chronos::ChiWorkerInternal this) :
	"MitarbeiterOhneGeschäftspartnerKontakt"
;

String getKey1(Chronos::ChiWorkerInternal this):
	"MitarbeiterOhneGeschäftspartnerKontakt"
;

String getGermanName(uml::Activity this) :
	"Aktivitäten-Reihe"
;

String getKey1(uml::Activity this):
	"Aktivitäten-Reihen"
;

String getGermanName(uml::InitialNode this) :
	"starten"
;

String getKey1(uml::InitialNode this):
	"starten"
;

String getGermanName(uml::ActivityFinalNode this) :
	"beenden"
;

String getKey1(uml::ActivityFinalNode this):
	"beenden"
;

String getGermanName(uml::OpaqueAction this) :
	"Aktivität"
;

String getKey1(uml::OpaqueAction this):
	"Aktivitäten"
;

String getGermanName(uml::DecisionNode this) :
	"entscheiden"
;

String getKey1(uml::DecisionNode this):
	"entscheiden"
;

String getGermanName(uml::SendSignalAction this) :
	"senden"
;

String getKey1(uml::SendSignalAction this):
	"senden"
;

String getGermanName(uml::AcceptEventAction this) :
	"empfangen"
;

String getKey1(uml::AcceptEventAction this):
	"empfangen"
;

String getGermanName(Chronos::ChiNode this) :
	"Geschäftsobjekt"
;

String getKey1(Chronos::ChiNode this):
	"Geschäftsobjekte"
;

String getGermanName(Chronos::ChiController this) :
	"Steuerung"
;

String getKey1(Chronos::ChiController this):
	"Steuerungen"
;

String getGermanName(Chronos::ChiDiagram this) :
	"Diagram"
;

String getKey1(Chronos::ChiDiagram this):
	"Diagramme"
;


String getGermanName(uml::Element this):
	"UNDEFINED GermanName: " + this.metaType.name
;

String getKey1(uml::Element this):
	"UNDEFINED key1: " + this.metaType.name
;

int getOutlineLevel(int this) :
	this > 9 ? 9 : this
;

diagrams::Image getImage(diagrams::DiagramExport this, String alias):
	this.image.selectFirst(e|e.alias == alias)
;

Real getScaledWidth(diagrams::Image this, Real targetWidth, Real targetHeight):
	this.isScaleWidth(targetWidth, targetHeight) ? (
		let currentRatio = (this.width + E()) / (this.height + E()):
		(targetHeight * currentRatio)
	) :
		targetWidth
;

Real getScaledHeight(diagrams::Image this, Real targetWidth, Real targetHeight):

	this.isScaleWidth(targetWidth, targetHeight) ?
		targetHeight
	: (
		let currentRatio = (this.width + E()) / (this.height + E()):
		(targetWidth / currentRatio)
	)
;

Boolean isScaleWidth(diagrams::Image this, Real targetWidth, Real targetHeight):
	let targetRatio = (targetWidth + E()) / (targetHeight + E()):
	let currentRatio = (this.width + E()) / (this.height + E()):
	
	(targetRatio > currentRatio)
;

cached Real E():
	1.11111 - 1.1111
;
