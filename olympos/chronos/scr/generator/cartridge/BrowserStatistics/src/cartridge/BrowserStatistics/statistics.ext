import uml;
import Chronos;

extension org::openarchitectureware::uml2::profile::profiling;

extension cartridge::ChronosCommon::usecases::Activity;
extension cartridge::ChronosCommon::usecases::DecisionNode;

extension cartridge::ChronosCheck::requirements::ChiGoal;
extension cartridge::ChronosCheck::requirements::ChiRequirement;
extension cartridge::ChronosCheck::requirements::ChiFeature;
extension cartridge::ChronosCheck::requirements::ChiIssue;
extension cartridge::ChronosCheck::usecases::ChiBusinessProcess;
extension cartridge::ChronosCheck::usecases::ChiBusinessUseCase;
extension cartridge::ChronosCheck::usecases::ActivitySet;
extension cartridge::ChronosCheck::usecases::Activity;
extension cartridge::ChronosCheck::usecases::ActivityInitial;
extension cartridge::ChronosCheck::usecases::ActivityFinal;
extension cartridge::ChronosCheck::usecases::ActivityDecision;
extension cartridge::ChronosCheck::usecases::ChiObject;
extension cartridge::ChronosCheck::domain::ChiNode;
extension cartridge::ChronosCheck::domain::ChiValue;
extension cartridge::ChronosCheck::domain::ChiActionKey;

cached E():
	1.11111 - 1.1111
;

//ChiGoal

cached List[Chronos::ChiGoal] getGoalsAll(uml::Model this):
	this.allOwnedElements().typeSelect(Chronos::ChiGoal)
;
cached List[Chronos::ChiGoal] getGoalsNoValidChild(uml::Model this):
	this.getGoalsAll().select(e|!e.hasValidChild())
;

cached List[Chronos::ChiGoal] getGoalsNoValueGoalInt(uml::Model this):
	this.getGoalsAll().select(e|!e.isValueGoalInt())
;

cached List[Chronos::ChiGoal] getGoalsNoPriority(uml::Model this):
	this.getGoalsAll().select(e|!e.hasPriority())
;

cached List[Chronos::ChiGoal] getGoalsBothTypesOfChildren(uml::Model this):
	this.getGoalsAll().select(e|!e.hasOnlyOneTypeOfChildren())
;

cached List[Chronos::ChiGoal] getGoalsNonAchieved(uml::Model this):
	this.getGoalsAll().select(e|!e.isAchieved())
;

//ChiRequirement

cached List[Chronos::ChiRequirement] getRequirementsAll(uml::Model this):
	this.allOwnedElements().typeSelect(Chronos::ChiRequirement)
;

cached List[Chronos::ChiRequirement] getRequirementsWithoutParent(uml::Model this):
	this.getRequirementsAll().select(e|!e.hasParent())
;

cached List[Chronos::ChiRequirement] getRequirementsNoChildren(uml::Model this):
	this.getRequirementsAll().select(e|!e.hasChild())
;

cached List[Chronos::ChiRequirement] getRequirementsMoreThanOneFeature(uml::Model this):
	this.getRequirementsAll().select(e|!e.hasOnlyOneFeature())
;

cached List[Chronos::ChiRequirement] getRequirementsBothTypesOfChildren(uml::Model this):
	this.getRequirementsAll().select(e|!e.hasOnlyOneTypeOfChildren())
;

cached List[Chronos::ChiRequirement] getRequirementsBothFeatureIssue(uml::Model this):
	this.getRequirementsAll().select(e|!e.hasEitherFeatureOrIssue())
;

//ChiFeature

cached List[Chronos::ChiFeature] getFeaturesAll(uml::Model this):
	this.allOwnedElements().typeSelect(Chronos::ChiFeature)
;

cached List[Chronos::ChiFeature] getFeaturesWithoutParent(uml::Model this):
	this.getFeaturesAll().select(e|!e.hasParent())
;

cached List[Chronos::ChiFeature] getFeaturesImplementedIncomplete(uml::Model this):
	this.getFeaturesAll().select(e|!e.isCompletelyImplemented())
;

//ChiIssue

cached List[Chronos::ChiIssue] getIssuesAll(uml::Model this):
	this.allOwnedElements().typeSelect(Chronos::ChiIssue)
;

cached List[Chronos::ChiIssue] getIssuesWithoutParent(uml::Model this):
	this.getIssuesAll().select(e|!e.hasParent())
;

//ChiBusinessProcess

cached List[Chronos::ChiBusinessProcess] getBusinessProcessesAll(uml::Model this):
	this.allOwnedElements().typeSelect(Chronos::ChiBusinessProcess)
;

cached List[Chronos::ChiBusinessProcess] getBusinessProcessesWithoutUc(uml::Model this):
	this.getBusinessProcessesAll().select(e|!e.hasUc())
;

//ChiBusinessUseCase

cached List[Chronos::ChiBusinessUseCase] getBusinessUcAll(uml::Model this):
	this.allOwnedElements().typeSelect(Chronos::ChiBusinessUseCase)
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithoutFeature(uml::Model this):
	this.getBusinessUcAll().select(e|!e.hasFeature())
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithoutScope(uml::Model this):
	this.getBusinessUcAll().select(e|!e.hasScope())
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithoutGoalInContext(uml::Model this):
	this.getBusinessUcAll().select(e|!e.hasGoalInContext())
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithoutTriggerEqInitial(uml::Model this):
	this.getBusinessUcAll().select(e|!e.hasTriggerEqInitial())
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithoutMainSuccessScenarioEqFinal(uml::Model this):
	this.getBusinessUcAll().select(e|!e.hasMainSuccessScenarioEqFinal())
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithPrimaryActorPassive(uml::Model this):
	this.getBusinessUcAll().select(e|!e.isPrimaryActorActive())
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithoutActivitySet(uml::Model this):
	this.getBusinessUcAll().select(e|!e.hasActivitySet())
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithoutActor(uml::Model this):
	this.getBusinessUcAll().select(e|!e.hasActor())
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithoutTrigger(uml::Model this):
	this.getBusinessUcAll().select(e|!e.hasTrigger())
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithoutMainSuccessScenario(uml::Model this):
	this.getBusinessUcAll().select(e|!e.hasMainSuccessScenario())
;

cached List[Chronos::ChiBusinessUseCase] getBusinessUcWithoutPrimaryActor(uml::Model this):
	this.getBusinessUcAll().select(e|!e.hasPrimaryActor())
;

//ActivitySet

cached List[uml::Activity] getActivitySetsAll(uml::Model this):
	this.allOwnedElements().typeSelect(uml::Activity).select(e|e.isActivitySet())
;

cached List[uml::Activity] getActivitySetsDuplicateName(uml::Model this):
	this.getActivitySetsAll().select(e|!e.hasUniqueName())
;

cached List[uml::Activity] getActivitySetsWithoutName(uml::Model this):
	this.getActivitySetsAll().select(e|!e.hasName())
;

cached List[uml::Activity] getActivitySetsWitoutOneInitial(uml::Model this):
	this.getActivitySetsAll().select(e|!e.hasOneInitial())
;

cached List[uml::Activity] getActivitySetsWithoutFinal(uml::Model this):
	this.getActivitySetsAll().select(e|!e.hasFinal())
;

cached List[uml::Activity] getActivitySetsWithoutOneInputChiObject(uml::Model this):
	this.getActivitySetsAll().select(e|!e.hasOneInputChiObject())
;

cached List[uml::Activity] getActivitySetsWithoutOutputChiObject(uml::Model this):
	this.getActivitySetsAll().select(e|!e.hasOutputChiObject())
;

//Activity

cached List[uml::OpaqueAction] getActivitiesAll(uml::Model this):
	this.allOwnedElements().typeSelect(uml::OpaqueAction)
;

cached List[uml::OpaqueAction] getActivitiesWithoutName(uml::Model this):
	this.getActivitiesAll().select(e|!e.hasName())
;

cached List[uml::OpaqueAction] getActivitiesWithoutIncomingOutgoing(uml::Model this):
	this.getActivitiesAll().select(e|!e.hasIncomingOutgoing())
;

cached List[uml::OpaqueAction] getActivitiesDuplicateName(uml::Model this):
	this.getActivitiesAll().select(e|!e.hasUniqueName())
;

cached List[uml::OpaqueAction] getActivitiesGtOneProductionRulesets(uml::Model this):
	this.getActivitiesAll().select(e|!e.hasLeOneProductionRuleset())
;

cached List[uml::OpaqueAction] getActivitiesProductionRulesetNonConsecutive(uml::Model this):
	this.getActivitiesAll().select(e|!e.isProductionRulesetConsecutive())
;

//ActivityInitial

cached List[uml::InitialNode] getInitialsAll(uml::Model this):
	this.allOwnedElements().typeSelect(uml::InitialNode)
;

cached List[uml::InitialNode] getInitialsWithoutOutgoing(uml::Model this):
	this.getInitialsAll().select(e|!e.hasOutgoing())
;

//ActivityFinal

cached List[uml::FinalNode] getFinalsAll(uml::Model this):
	this.allOwnedElements().typeSelect(uml::FinalNode)
;

cached List[uml::FinalNode] getFinalsWithoutIncoming(uml::Model this):
	this.getFinalsAll().select(e|!e.hasIncoming())
;

//ActivityDecision

cached List[uml::DecisionNode] getDecisionsAll(uml::Model this):
	this.allOwnedElements().typeSelect(uml::DecisionNode)
;

cached List[uml::DecisionNode] getDecisionsWithoutName(uml::Model this):
	this.getDecisionsAll().select(e|!e.hasName())
;

cached List[uml::DecisionNode] getDecisionsDuplicateName(uml::Model this):
	this.getDecisionsAll().select(e|!e.hasUniqueName())
;

cached List[uml::DecisionNode] getDecisionsNoIncomingLt2Outgoing(uml::Model this):
	this.getDecisionsAll().select(e|!e.hasOneIncomingGe2Outgoing())
;

cached List[uml::DecisionNode] getDecisionsDuplicateOutgoing(uml::Model this):
	this.getDecisionsAll().select(e|!e.hasUniqueOutgoing())
;

cached List[uml::DecisionNode] getDecisionsGtOneProductionRulesets(uml::Model this):
	this.getDecisionsAll().select(e|!e.hasOneProductionRuleset())
;

cached List[uml::DecisionNode] getDecisionsWithoutPreActivity(uml::Model this):
	this.getDecisionsAll().select(e|!e.hasPreActivity())
;

cached List[uml::DecisionNode] getDecisionsProductionRulesetNonConsecutive(uml::Model this):
	this.getDecisionsAll().select(e|!e.isProductionRulesetConsecutive())
;

cached List[uml::DecisionNode] getDecisionsMultipleWithinProductionRuleset(uml::Model this):
	this.getDecisionsAll().select(e|!e.isSingleWithingProductionRuleset())
;

cached List[uml::DecisionNode] getDecisionsLoopsAll(uml::Model this):
	this.getDecisionsAll().select(e|!e.isLoop())
;

cached List[uml::DecisionNode] getDecisionsLoopsWithoutRequiredArrows(uml::Model this):
	this.getDecisionsLoopsAll().select(e|!e.hasRequiredLoopArrows())
;

cached List[uml::DecisionNode] getDecisionsLoopsWithoutRequiredPredecessors(uml::Model this):
	this.getDecisionsLoopsAll().select(e|!e.hasRequiredLoopPredecessors())
;

cached List[uml::DecisionNode] getDecisionsLoopsWithoutRequiredSuccessors(uml::Model this):
	this.getDecisionsLoopsAll().select(e|!e.hasRequiredLoopSuccessors())
;

cached List[uml::DecisionNode] getDecisionsLoopsWithoutRequiredProductionRuleset(uml::Model this):
	this.getDecisionsLoopsAll().select(e|!e.hasRequiredLoopProductionRuleset())
;

//ChiObject
cached List[uml::DataStoreNode] getObjectsAll(uml::Model this):
	this.allOwnedElements().typeSelect(uml::DataStoreNode)
;

cached List[uml::DataStoreNode] getObjectsWithoutName(uml::Model this):
	this.getObjectsAll().select(e|!e.hasName())
;

cached List[uml::DataStoreNode] getObjectsWithoutIncoming(uml::Model this):
	this.getObjectsAll().select(e|!e.hasIncoming())
;

cached List[uml::DataStoreNode] getObjectsWithoutOutgoing(uml::Model this):
	this.getObjectsAll().select(e|!e.hasOutgoing())
;

cached List[uml::DataStoreNode] getObjectsRequestWithoutOutgoing(uml::Model this):
	this.getObjectsAll().select(e|!e.requestHasOutgoing())
;

cached List[uml::DataStoreNode] getObjectsResponseWithoutIncoming(uml::Model this):
	this.getObjectsAll().select(e|!e.responseHasIncoming())
;

cached List[uml::DataStoreNode] getObjectsResponseDifferentNode(uml::Model this):
	this.getObjectsAll().select(e|!e.responseSameNode())
;

cached List[uml::DataStoreNode] getObjectsWithoutNode(uml::Model this):
	this.getObjectsAll().select(e|!e.hasNode())
;

cached List[uml::DataStoreNode] getObjectsSameNameDifferentNode(uml::Model this):
	this.getObjectsAll().select(e|!e.sameNameSameNode())
;

//ChiNode
cached List[Chronos::ChiNode] getNodesAll(uml::Model this):
	this.allOwnedElements().typeSelect(Chronos::ChiNode)
;

cached List[Chronos::ChiNode] getNodesWithoutName(uml::Model this):
	this.getNodesAll().select(e|!e.hasName())
;

cached List[Chronos::ChiNode] getNodesWithoutOrderby(uml::Model this):
	this.getNodesAll().select(e|!e.hasOrderby())
;

cached List[Chronos::ChiNode] getNodesWithoutInitparams(uml::Model this):
	this.getNodesAll().select(e|!e.hasInitparams())
;

//ChiValue

cached List[Chronos::ChiValue] getValuesAll(uml::Model this):
	this.allOwnedElements().typeSelect(Chronos::ChiValue)
;
cached List[Chronos::ChiValue] getValuesWithoutName(uml::Model this):
	this.getValuesAll().select(e|!e.hasName())
;

cached List[Chronos::ChiValue] getValuesInvalidName(uml::Model this):
	this.getValuesAll().select(e|!e.hasValidName())
;

//ChiActionKey
cached List[Chronos::ChiActionKey] getActionKeysAll(uml::Model this):
	this.allOwnedElements().typeSelect(Chronos::ChiActionKey)
;

cached List[Chronos::ChiActionKey] getActionKeysWithoutConfig(uml::Model this):
	this.getActionKeysAll().select(e|!e.hasConfig())
;

//Package

cached List[uml::Package] getAllPackages(uml::Model this):
	this.allOwnedElements().typeSelect(uml::Package)
;

cached List[uml::Package] getPackagesWithBothSubpackagesAndElements(uml::Model this):
	this.getAllPackages().select(e|e.nestedPackage.size > 0 && e.ownedType.size > 0)
;


List failedRequirements(uml::Model this):
	{}
		.addAll(this.getGoalsBothTypesOfChildren())
		.addAll(this.getGoalsNoPriority())
		.addAll(this.getGoalsNoValidChild())
		.addAll(this.getGoalsNoValueGoalInt())
		.addAll(this.getGoalsNonAchieved())

		.addAll(this.getRequirementsBothFeatureIssue())
		.addAll(this.getRequirementsBothTypesOfChildren())
		.addAll(this.getRequirementsMoreThanOneFeature())
		.addAll(this.getRequirementsNoChildren())
		.addAll(this.getRequirementsWithoutParent())

		.addAll(this.getFeaturesImplementedIncomplete())
		.addAll(this.getFeaturesWithoutParent())

		.addAll(this.getIssuesWithoutParent())
	.toSet().toList()
;

List failedUseCases(uml::Model this):
	{}
		.addAll(this.getBusinessProcessesWithoutUc())

		.addAll(this.getBusinessUcWithPrimaryActorPassive())
		.addAll(this.getBusinessUcWithoutActivitySet())
		.addAll(this.getBusinessUcWithoutActor())
		.addAll(this.getBusinessUcWithoutFeature())
		.addAll(this.getBusinessUcWithoutGoalInContext())
		.addAll(this.getBusinessUcWithoutMainSuccessScenario())
		.addAll(this.getBusinessUcWithoutMainSuccessScenarioEqFinal())
		.addAll(this.getBusinessUcWithoutPrimaryActor())
		.addAll(this.getBusinessUcWithoutScope())
		.addAll(this.getBusinessUcWithoutTrigger())
		.addAll(this.getBusinessUcWithoutTriggerEqInitial())

		.addAll(this.getActivitySetsDuplicateName())
		.addAll(this.getActivitySetsWithoutFinal())
		.addAll(this.getActivitySetsWithoutName())
		.addAll(this.getActivitySetsWithoutOneInputChiObject())
		.addAll(this.getActivitySetsWithoutOutputChiObject())
		.addAll(this.getActivitySetsWitoutOneInitial())

		.addAll(this.getActivitiesDuplicateName())
		.addAll(this.getActivitiesGtOneProductionRulesets())
		.addAll(this.getActivitiesProductionRulesetNonConsecutive())
		.addAll(this.getActivitiesWithoutIncomingOutgoing())
		.addAll(this.getActivitiesWithoutName())

		.addAll(this.getInitialsWithoutOutgoing())

		.addAll(this.getFinalsWithoutIncoming())

		.addAll(this.getDecisionsDuplicateName())
		.addAll(this.getDecisionsDuplicateOutgoing())
		.addAll(this.getDecisionsGtOneProductionRulesets())
		.addAll(this.getDecisionsLoopsWithoutRequiredArrows())
		.addAll(this.getDecisionsLoopsWithoutRequiredPredecessors())
		.addAll(this.getDecisionsLoopsWithoutRequiredProductionRuleset())
		.addAll(this.getDecisionsLoopsWithoutRequiredSuccessors())
		.addAll(this.getDecisionsMultipleWithinProductionRuleset())
		.addAll(this.getDecisionsNoIncomingLt2Outgoing())
		.addAll(this.getDecisionsProductionRulesetNonConsecutive())
		.addAll(this.getDecisionsWithoutName())
		.addAll(this.getDecisionsWithoutPreActivity())

		.addAll(this.getObjectsRequestWithoutOutgoing())
		.addAll(this.getObjectsResponseDifferentNode())
		.addAll(this.getObjectsResponseWithoutIncoming())
		.addAll(this.getObjectsSameNameDifferentNode())
		.addAll(this.getObjectsWithoutIncoming())
		.addAll(this.getObjectsWithoutName())
		.addAll(this.getObjectsWithoutNode())
		.addAll(this.getObjectsWithoutOutgoing())
	.toSet().toList()
;

List failedDomain(uml::Model this):
	{}
		.addAll(this.getNodesWithoutInitparams())
		.addAll(this.getNodesWithoutName())
		.addAll(this.getNodesWithoutOrderby())
		
		.addAll(this.getValuesInvalidName())
		.addAll(this.getValuesWithoutName())
		
		.addAll(this.getActionKeysWithoutConfig())
	.toSet().toList()
;

String calculateTrafficLight(Real this):
	(this == -1) ?
		"null"
	: (
		(this < 0.2) ?
			1
		: (
			(this < 0.4) ?
				2
			: (
				(this < 0.6) ?
					3
				: (
					(this < 0.8) ?
						4
					:
						5
				)
			)
		)
	)
;

String filterNull(Integer this):
	this > 0 ? (
		this.toString()
	) : (
		"null"
	)
;
