import uml;
import Chronos;

extension cartridge::ChronosCommon::usecases::ActivityNode;
extension cartridge::ChronosCommon::usecases::DecisionNode;
extension cartridge::ChronosCommon::usecases::ProductionRuleset;

boolean hasName(uml::DecisionNode this):
	this.isNameNotEmpty()
;

boolean hasUniqueName(uml::DecisionNode this):
	this.isNameUniqueWithinActivity()
;

boolean hasOneIncomingGe2Outgoing(uml::DecisionNode this):
	this.incoming.size >= 1 && this.outgoing.size >= 2
;

boolean hasUniqueOutgoing(uml::DecisionNode this):
	this.getFlowStates().select(e|this.getFlowStates().select(f|e.name == f.name).size != 1).size == 0
;

boolean hasOneProductionRuleset(uml::DecisionNode this):
	this.isAtMostOneProductionRuleset()
;

boolean hasPreActivity(uml::DecisionNode this):
	this.getProductionRuleset() == null && uml::OpaqueAction.isInstance(this.getPreviousNode())
;

boolean isProductionRulesetConsecutive(uml::DecisionNode this):
	this.getProductionRuleset() != null && this.getProductionRuleset().getRulesetParents().containsAll(this.getConsecutiveWithSameProductionRuleset())
;

boolean isSingleWithingProductionRuleset(uml::DecisionNode this):
	this.getProductionRuleset() != null && this.getProductionRuleset().getRulesetParents().typeSelect(uml::DecisionNode).size == 1
;

boolean hasRequiredLoopArrows(uml::DecisionNode this):
	this.isLoop()
	&& this.incoming.select(e|e.name == "LoopContinue").size >= 1
	&& this.outgoing.select(e|e.name == "LoopStart").size == 1
	
;

boolean hasRequiredLoopPredecessors(uml::DecisionNode this):
	this.isLoop()
	&& uml::OpaqueAction.isInstance(this.getLoopPredecessor())
	&& uml::DataStoreNode.isInstance(this.getLoopPredecessor().incoming.source.first())
	&& uml::OpaqueAction.isInstance(this.getLoopPredecessor().incoming.source.incoming.source.first())
;

boolean hasRequiredLoopSuccessors(uml::DecisionNode this):
	this.isLoop()
	&& uml::OpaqueAction.isInstance(this.getLoopStart())
	&& uml::DataStoreNode.isInstance(this.getLoopStart().outgoing.target.first())
;

boolean hasRequiredLoopProductionRuleset(uml::DecisionNode this):
	let rulesets = ((List[uml::ActivityNode]) {}
		.add(this.getLoopPredecessor())
		.add(this.getLoopPredecessor().getPreviousNode())
		.add(this.getLoopStart()))
		
		.getProductionRuleset().toSet():

	this.isLoop() &&
	rulesets.size == 1 && rulesets.toList().first() == this.getProductionRuleset() && rulesets.toList().first() != null
;
