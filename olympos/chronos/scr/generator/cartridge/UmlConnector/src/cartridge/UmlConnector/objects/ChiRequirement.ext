import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::umlutils;

extension cartridge::UmlConnector::connections;
extension cartridge::UmlConnector::connectionsToCwm;

uml::Class convert(cwm::ChiRequirement r):
	let uc = new uml::Class : {
		uc.setName("ChiRequirement:" + r.id)
	} ->
	uc
;

Void establishConnections(cwm::ChiRequirement r, uml::Model um):
	let uc = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == "ChiRequirement:" + r.id).first(): {
		r.child.select(e|e.targetType == "ChiRequirement").establishConnectionsToClass(uc, um, "contains", uml::AggregationKind::composite, uml::AggregationKind::none, false, false) ->
		r.child.select(e|e.targetType == "ChiIssue").establishDependencyFromClass(uc, um, "contains") ->
		r.manyToMany.select(e|e.targetType == "ChiFeature").establishRealizationToClass(uc, um, "is negated by")
	}
;

Void transferValues(cwm::ChiRequirement r, uml::Model um):
	//(new uml::Class).setT
	let uc = um.allOwnedElements().typeSelect(uml::Class).select(e|e.name == "ChiRequirement:" + r.id).first(): (
		let comment = new uml::Comment : (
			uc.applyStereotype("Chronos::ChiRequirement") ->
			//Removed because of oAW EnumerationLiteral serialization error
			//r.reqType.translateChiRequirementType() != null ? uc.setTaggedValue("Chronos::ChiRequirement", "Type", r.reqType.translateChiRequirementType()) : Void ->
			uc.setTaggedValue("Chronos::ChiRequirement", "Type", r.reqType) ->
			uc.setTaggedValue("Chronos::ChiRequirement", "Priority", r.priority) ->
			uc.setTaggedValue("Chronos::ChiRequirement", "Author", r.author) ->
			uc.setTaggedValue("Chronos::ChiRequirement", "Proofreader", r.proofreader) ->
			//Removed because of oAW EnumerationLiteral serialization error
			//r.status.translateChiRequirementStatus() != null ? uc.setTaggedValue("Chronos::ChiRequirement", "Status", r.status.translateChiRequirementStatus()) : Void ->
			uc.setTaggedValue("Chronos::ChiRequirement", "Status", r.status) ->
			uc.setTaggedValue("Chronos::ChiRequirement", "Alias", r.alias) ->
			uc.setTaggedValue("Chronos::ChiRequirement", "Version", r.version) ->
			uc.setName(r.name) ->
			r.notes != null ? (
				comment.setBody(r.notes) ->
				comment.annotatedElement.add(uc) ->
				uc.ownedComment.add(comment)
			) : Void ->
			uc.setTaggedValue("Chronos::ChiRequirement", "created", r.created) ->
			uc.setTaggedValue("Chronos::ChiRequirement", "creator", r.creator) ->
			uc.setTaggedValue("Chronos::ChiRequirement", "last_editor", r.lastEditor) ->
			uc.setTaggedValue("Chronos::ChiRequirement", "modified", r.modified)
		)
	)
;

Chronos::ChiRequirementType translateChiRequirementType(String source):
	//(new uml::Enumeration).ownedLiteral.get(5)
	switch(source.toLowerCase()) {
		case "transport":
			Chronos::ChiRequirementType::Transport
		
		case "scalability":
			Chronos::ChiRequirementType::Scalability
			
		case "persistence":
			Chronos::ChiRequirementType::Persistence
		
		case "performance":
			Chronos::ChiRequirementType::Performance
		
		case "security":
			Chronos::ChiRequirementType::Security
		
		case "business rule":
			//(new Chronos::ChiRequirementType).ownedLiteral.get(5)
			null
			
		default:
			null
	}
;

Chronos::ChiRequirementStatus translateChiRequirementStatus(String source):
	switch(source.toLowerCase()) {
		case "validated":
			Chronos::ChiRequirementStatus::Validated
		
		case "mandatory":
			Chronos::ChiRequirementStatus::Mandatory
			
		case "proposed":
			Chronos::ChiRequirementStatus::Proposed
			
		default:
			null
	}
;

cwm::ChiRequirement convertToCwm(Chronos::ChiRequirement c) :
	let un = new cwm::ChiRequirement : (
		un.setId(c.getId()) ->
		//Removed because of oAW EnumerationLiteral serialization error
		//c.getTaggedValue("Chronos::ChiRequirement", "Type") != "" ? un.setReqType(((Chronos::ChiRequirementType) c.getTaggedValue("Chronos::ChiRequirement", "Type")).name.toString()) : Void ->
		un.setReqType((String) c.getTaggedValue("Chronos::ChiRequirement", "Type")) ->
		un.setPriority((int) c.getValue(c.getAppliedStereotype("Chronos::ChiRequirement"), "Priority")) ->
		un.setAuthor(c.getTaggedValue("Chronos::ChiRequirement", "Author").toString()) ->
		un.setProofreader(c.getTaggedValue("Chronos::ChiRequirement", "Proofreader").toString()) ->
		//Removed because of oAW EnumerationLiteral serialization error
		//c.getTaggedValue("Chronos::ChiRequirement", "Status") != "" ? un.setStatus(((Chronos::ChiRequirementStatus) c.getTaggedValue("Chronos::ChiRequirement", "Status")).name.toString()) : Void ->
		un.setStatus((String) c.getTaggedValue("Chronos::ChiRequirement", "Status")) ->
		un.setAlias(c.getTaggedValue("Chronos::ChiRequirement", "Alias").toString()) ->
		un.setVersion(c.getTaggedValue("Chronos::ChiRequirement", "Version").toString()) ->
		un.setName(c.name) ->
		un.setNotes(c.getComment()) ->
		un.setCreated(c.getTaggedValue("Chronos::ChiRequirement", "created").toString()) ->
		un.setCreator(c.getTaggedValue("Chronos::ChiRequirement", "creator").toString()) ->
		un.setLastEditor(c.getTaggedValue("Chronos::ChiRequirement", "last_editor").toString()) ->
		un.setModified(c.getTaggedValue("Chronos::ChiRequirement", "modified").toString()) ->
		
		un.child.addAll(c.getAssociations().memberEnd.select(e|e.type != c && e.aggregation == uml::AggregationKind::composite).type.typeSelect(Chronos::ChiRequirement).convertToChild()) ->
		un.child.addAll(c.getRelationships().typeSelect(uml::Dependency).client.typeSelect(Chronos::ChiIssue).convertToChild()) ->
		un.manyToMany.addAll(c.getRelationships().typeSelect(uml::Realization).client.typeSelect(Chronos::ChiFeature).convertToMany())
	) ->
	un
;
