import uml;
import Chronos;

extension common::util;

uml::Model importMultiplicity(uml::Model source, uml::Model cim):
	source.allOwnedElements().typeSelect(Chronos::ChiNode).importMultiplicity(cim) ->
	
	source
;

Void importMultiplicity(Chronos::ChiNode this, uml::Model cim):
	let mirror = cim.allOwnedElements().typeSelect(uml::Class).selectFirst(e|e.name == this.name):
	
	mirror != null ? (
		debug("Importing multiplicity of class " + this.name) ->
		this.attribute.select(e|e.association == null && !e.name.isNullOrEmpty()).importMultiplicity(mirror)
	) : (
		Void
	)
;

Void importMultiplicity(uml::Property this, uml::Class mirror):
	let mirrorAttribute = mirror.attribute.selectFirst(e|e.name == this.name):
	
	mirrorAttribute != null ? (
		this.setLower(mirrorAttribute.lowerBound()) ->
		this.setUpper(mirrorAttribute.upperBound()) ->
		debug("	Setting multiplicity of " + this.name + " to " + this.lowerBound() + ".." + this.upperBound() + " (imported from " + mirror.name + "." + mirrorAttribute.name + ")")
	) : (
		Void
	)
;
