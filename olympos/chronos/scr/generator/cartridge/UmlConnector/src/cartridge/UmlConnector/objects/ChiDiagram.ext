import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::util;
extension common::umlutils;

uml::Package convert(cwm::Diagram p):
	//(new uml::UseCase).ow
	let up = new uml::Package : (
		up.setName("Diagram:" + p.id)
	) ->
	up
;

Void establishConnections(cwm::Diagram p, uml::Model um):
	Void
;

Void transferValues(cwm::Diagram c, uml::Model um):
	let uc = um.allOwnedElements().typeSelect(uml::Package).select(e|e.name == "Diagram:" + c.id).first(): (
		let comment = new uml::Comment : (
			uc.applyStereotype("Chronos::ChiDiagram") ->
			uc.setTaggedValue("Chronos::ChiDiagram", "Author", c.author) ->
			uc.setTaggedValue("Chronos::ChiDiagram", "Status", c.status) ->
			uc.setTaggedValue("Chronos::ChiDiagram", "Alias", c.alias) ->
			uc.setTaggedValue("Chronos::ChiDiagram", "Version", c.version) ->
			uc.setName(c.name != "" ? c.name : "Unnamed Diagram") ->
			c.notes != null ? (
				comment.setBody(c.notes) ->
				comment.annotatedElement.add(uc) ->
				uc.ownedComment.add(comment)
			) : Void
		)
	)
;

cwm::Diagram convertToCwm(Chronos::ChiDiagram c) :
	let un = new cwm::Diagram : (
		un.setId(c.getId()) ->
		un.setAuthor(c.getTaggedValue("Chronos::ChiController", "Author").toString()) ->
		un.setStatus(c.getTaggedValue("Chronos::ChiController", "Status").toString()) ->
		un.setAlias(c.getTaggedValue("Chronos::ChiController", "Alias").toString()) ->
		un.setVersion(c.getTaggedValue("Chronos::ChiController", "Version").toString()) ->
		un.setName(c.name) ->
		un.setNotes(c.getComment())
	) ->
	un
;
