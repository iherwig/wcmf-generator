import cwm;
import Chronos;
import uml;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::umlutils;

extension cartridge::UmlConnector::connections;
extension cartridge::UmlConnector::connectionsToCwm;

uml::Actor convert(cwm::ChiWorkerExternal w):
	let uc = new uml::Actor : {
		uc.setName("ChiWorkerExternal:" + w.id)
	} ->
	uc
;

Void establishConnections(cwm::ChiWorkerExternal b, uml::Model um):
	let uc = um.allOwnedElements().typeSelect(uml::Actor).select(e|e.name == "ChiWorkerExternal:" + b.id).first(): (
		b.manyToMany.select(e|e.targetType == "ChiBusinessUseCase").establishConnectionsToUseCase(uc, um, "participates in", uml::AggregationKind::none, uml::AggregationKind::none, true, false) ->
		b.manyToMany.select(e|e.targetType == "ChiBusinessUseCaseCore").establishConnectionsToUseCase(uc, um, "participates in", uml::AggregationKind::none, uml::AggregationKind::none, true, false) ->
		b.child.select(e|e.targetType == "ChiWorkerExternal").establishGeneralizationToActor(uc, um)
	)
;

Void transferValues(cwm::ChiWorkerExternal w, uml::Model um):
	//(new uml::Class).setT
	let uc = um.allOwnedElements().typeSelect(uml::Actor).select(e|e.name == "ChiWorkerExternal:" + w.id).first(): (
		let comment = new uml::Comment : (
			uc.applyStereotype("Chronos::ChiWorkerExternal") ->
			uc.setTaggedValue("Chronos::ChiWorkerExternal", "is_OfflineUser", w.isOfflineUser) ->
			uc.setTaggedValue("Chronos::ChiWorkerExternal", "Author", w.author) ->
			uc.setTaggedValue("Chronos::ChiWorkerExternal", "Status", w.status) ->
			uc.setTaggedValue("Chronos::ChiWorkerExternal", "Alias", w.alias) ->
			uc.setTaggedValue("Chronos::ChiWorkerExternal", "Version", w.version) ->
			uc.setName(w.name) ->
			w.notes != null ? (
				comment.setBody(w.notes) ->
				comment.annotatedElement.add(uc) ->
				uc.ownedComment.add(comment)
			) : Void ->
			uc.setTaggedValue("Chronos::ChiWorkerExternal", "created", w.created) ->
			uc.setTaggedValue("Chronos::ChiWorkerExternal", "creator", w.creator) ->
			uc.setTaggedValue("Chronos::ChiWorkerExternal", "last_editor", w.lastEditor) ->
			uc.setTaggedValue("Chronos::ChiWorkerExternal", "modified", w.modified)
		)
	)
;

cwm::ChiWorkerExternal convertToCwm(Chronos::ChiWorkerExternal c) :
	let un = new cwm::ChiWorkerExternal : (
		un.setId(c.getId()) ->
		un.setIsOfflineUser((boolean) c.getValue(c.getAppliedStereotype("Chronos::ChiWorkerExternal"), "is_OfflineUser")) ->
		un.setAuthor(c.getTaggedValue("Chronos::ChiWorkerExternal", "Author").toString()) ->
		un.setStatus(c.getTaggedValue("Chronos::ChiWorkerExternal", "Status").toString()) ->
		un.setAlias(c.getTaggedValue("Chronos::ChiWorkerExternal", "Alias").toString()) ->
		un.setVersion(c.getTaggedValue("Chronos::ChiWorkerExternal", "Version").toString()) ->
		un.setName(c.name) ->
		un.setNotes(c.getComment()) ->
		un.setCreated(c.getTaggedValue("Chronos::ChiWorkerExternal", "created").toString()) ->
		un.setCreator(c.getTaggedValue("Chronos::ChiWorkerExternal", "creator").toString()) ->
		un.setLastEditor(c.getTaggedValue("Chronos::ChiWorkerExternal", "last_editor").toString()) ->
		un.setModified(c.getTaggedValue("Chronos::ChiWorkerExternal", "modified").toString()) ->

		un.manyToMany.addAll(c.getAssociations().memberEnd.select(e|e.type != c).type.typeSelect(Chronos::ChiBusinessUseCase).convertToMany()) ->
		un.child.addAll(((List[uml::Class]) c.getGenerals()).convertToChild())
	) ->
	un
;
