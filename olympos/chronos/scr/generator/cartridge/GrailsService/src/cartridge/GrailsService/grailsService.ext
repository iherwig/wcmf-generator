import uml;
import Chronos;

extension common::util;
extension common::nameNormalizer;

String asClassName(uml::Activity this):
	this.name.normalizeClassName() + "Service"
;

String asResultType(uml::Activity this):
	this.getLastNode().outgoing.typeSelect(uml::ObjectFlow).target.typeSelect(uml::DataStoreNode).first().getGrailsTypeName()
;

String asTypeOrMap(String typeName):
	!typeName.isNullOrEmpty() && typeName != "def" ? (
		"new " + typeName + "()"
	) : (
		"[:]"
	)
;


String asResultConstructorCall(uml::Activity this):
	this.asResultType().asTypeOrMap()
;

String asRequestType(uml::Activity this):
	let grailsTypeName = this.getFirstNode().incoming.typeSelect(uml::ObjectFlow).source.typeSelect(uml::DataStoreNode).first().getGrailsTypeName():
	
	grailsTypeName != "def" ? (
		grailsTypeName
	) : (
		""
	)
;

String asRequestConstructorCall(uml::Activity this):
	this.asRequestType().asTypeOrMap()
;

String asPackageName(uml::Activity this):
	this.name.normalizePackageName()
;

String asMainMethodName(uml::Activity this):
	this.getInitialNode().name.normalizeMemberName()
;
	
uml::InitialNode getInitialNode(uml::Activity this):
	this.node.typeSelect(uml::InitialNode).first()
;

List[uml::DataStoreNode] getInputVariables(uml::Activity this):
	this.getFirstNode().incoming.typeSelect(uml::ObjectFlow).source
;

List[uml::DataStoreNode] getOutputVariables(uml::Activity this):
	this.getLastNodes().outgoing.typeSelect(uml::ObjectFlow).target
;

uml::DataStoreNode getInputVariable(uml::Activity this):
	this.getInputVariables().first()
;

uml::DataStoreNode getOutputVariable(uml::Activity this):
	this.getOutputVariables().first()
;

uml::ActivityNode getFirstNode(uml::Activity this):
	this.getInitialNode().outgoing.typeSelect(uml::ControlFlow).target.first()
;

List[uml::ActivityNode] getLastNodes(uml::Activity this):
	this.node.typeSelect(uml::FinalNode).first().incoming.typeSelect(uml::ControlFlow).source
;

uml::ActivityNode getLastNode(uml::Activity this):
	this.getLastNodes().first()
;

List[uml::ActivityNode] getMethodNodes(uml::Activity this):
	((List[uml::ActivityNode]) {}
		.addAll(this.node.typeSelect(uml::OpaqueAction).select(e|!e.isDecisionPredecessor()))
		.addAll(this.node.typeSelect(uml::DecisionNode))
	)
	.select(e|e.getProductionRuleset() == null || (e.getProductionRuleset().getLastNodes().contains(e) && !e.getProductionRuleset().getRulesetParents().typeSelect(uml::DecisionNode).first().isLoop()))
;

String getGrailsTypeName(uml::DataStoreNode this):
	let name = this.type.name.normalizeClassName():
	
	!name.isNullOrEmpty() ? 
		name
	:
		"def"
;

String asVariableName(uml::DataStoreNode this):
	this.name.normalizeMemberName()
;

String getSourceVariableName(uml::DataStoreNode this):
	//this.hasKeyword(LIST_ELEMENT_KEYWORD()) ? (
		this.asVariableName()
	//) : (
	//	this.incoming.size > 0 ? (
	//		this.incoming.first().source.asResultName() + "." + this.asVariableName()
	//	) : (
	//		"request"
	//	)
	//)
;

String asClassName(uml::ActivityNode this):
	this.name.normalizeClassName()
;

String asResultName(uml::ActivityNode this):
	this.name.asResult()
;

String asMethodName(uml::ActivityNode this):
	this.name.asMethod()
;

String asSelectionName(uml::DecisionNode this):
	this.asClassName() + "Selection"
;

String asContextName(Ouranos::ProductionRuleset this):
	this.name.normalizeClassName() + "Context"
;

String asResult(String this):
	this.normalizeMemberName() + "Result"
;

String asMethod(String this):
	this.normalizeMemberName()
;
	
String asResultName(Ouranos::ProductionRuleset this):
	this.name.asResult()
;

String asMethodName(Ouranos::ProductionRuleset this):
	this.name.asMethod()
;

String asRuleFileName(Ouranos::ProductionRuleset this):
	this.name.normalizeMemberName()
;

String asFullRuleFilePath(Ouranos::ProductionRuleset this):
	this.getActivity().asClassName() + "/" + this.asRuleFileName() + ".irl"
;

uml::ActivityNode getNextNode(uml::ActivityNode this):
	this.getNextNodes().first()
;

List[uml::ActivityNode] getNextNodes(uml::ActivityNode this):
	this.getNextEdges().target
;

List[uml::ActivityEdge] getNextEdges(uml::ActivityNode this):
	{}
		.addAll(this.outgoing.typeSelect(uml::ControlFlow))
		//Jump over one DataStore for flows like Action --> DataStore --> Action
		.addAll(this.outgoing.typeSelect(uml::ObjectFlow).target.typeSelect(uml::DataStoreNode).outgoing.typeSelect(uml::ObjectFlow))
;

uml::ActivityNode getPreviousNode(uml::ActivityNode this):
	this.getPreviousNodes().first()
;

List[uml::ActivityNode] getPreviousNodes(uml::ActivityNode this):
	this.getPreviousEdges().source
;

List[uml::ActivityEdge] getPreviousEdges(uml::ActivityNode this):
	{}
		.addAll(this.incoming.typeSelect(uml::ControlFlow))
		//Jump over one DataStore for flows like Action --> DataStore --> Action
		.addAll(this.incoming.typeSelect(uml::ObjectFlow).source.typeSelect(uml::DataStoreNode).incoming.typeSelect(uml::ObjectFlow))
;

List[uml::ActivityEdge] getFlowStates(uml::DecisionNode this):
	this.getNextEdges()
;

String asFlowName(uml::ActivityEdge this):
	!this.name.isNullOrEmpty() ? (
		this.name.normalizeConstantName()
	) : (
		"FLOW_STATE_" + this.source.outgoing.indexOf(this)
	)
;

String PROCESSED_KEYWORD(): "GrailsServiceProcessed";

boolean isAlreadyProcessed(uml::ActivityNode this):
	let result = this.hasKeyword(PROCESSED_KEYWORD()):
	
	!result ? (
		this.addKeyword(PROCESSED_KEYWORD())
	) : (
		Void
	) ->
	
	result
;

Ouranos::ProductionRuleset getProductionRuleset(uml::ActivityNode this):
	this.getRelationships().typeSelect(uml::Realization).target.first()
;

List[uml::ActivityNode] getRulesetParents(Ouranos::ProductionRuleset this):
	this.getRelationships().typeSelect(uml::Realization).source
;

List[uml::DataStoreNode] getInputChiObjects(uml::ActivityNode this):
	this.incoming.typeSelect(uml::ObjectFlow).source.typeSelect(uml::DataStoreNode)
;

boolean isLoop(uml::DecisionNode this):
	this.outgoing.select(e|e.name == "LoopStart").size > 0
;

uml::OpaqueAction getLoopPredecessor(uml::DecisionNode this):
	this.incoming.selectFirst(e|e.name != "LoopContinue").source
;

uml::OpaqueAction getLoopStart(uml::DecisionNode this):
	this.outgoing.selectFirst(e|e.name == "LoopStart").target
;

String LIST_ELEMENT_KEYWORD(): "GrailsListElement";

List[uml::ActivityNode] getLastNodes(Ouranos::ProductionRuleset this):
	this.getRulesetParents().select(e|e.getNextNode().getProductionRuleset() != this)
;

List[uml::ActivityNode] getFirstNodes(Ouranos::ProductionRuleset this):
	this.getRulesetParents().select(e|e.getPreviousNode().getProductionRuleset() != this)
;

List[Ouranos::ProductionRuleset] getProductionRulesets (uml::Activity this):
	this.ownedBehavior.typeSelect(Ouranos::ProductionRuleset)
;

List[uml::ActivityEdge] getFlowStates(Ouranos::ProductionRuleset this):
	let decision = this.getRulesetParents().typeSelect(uml::DecisionNode).first():
	
	decision != null ? (
		decision.getNextEdges()
	) : (
		{}
	)
;

List[uml::ActivityNode] getConsecutiveWithSameProductionRuleset(uml::ActivityNode this):
	{}
		.add(this)
		.addAll(this.getPreviousWithSameProductionRuleset())
		.addAll(this.getNextWithSameProductionRuleset())
		.toSet()
;

List[uml::ActivityNode] getPreviousWithSameProductionRuleset(uml::ActivityNode this):
	{}
		.add(this)
		.addAll(this.getPreviousNodes().select(e|e.getProductionRuleset() != null && e.getProductionRuleset() == this.getProductionRuleset()).getPreviousWithSameProductionRuleset())
;

List[uml::ActivityNode] getNextWithSameProductionRuleset(uml::ActivityNode this):
	{}
		.add(this)
		.addAll(this.getNextNodes().select(e|e.getProductionRuleset() != null && e.getProductionRuleset() == this.getProductionRuleset()).getNextWithSameProductionRuleset())
;

boolean isActivitySet(uml::Activity this):
	this.getAppliedStereotypes().size == 0
;

boolean isActivitySet(Ouranos::ProductionRuleset this):
	false
;

List[uml::DecisionNode] getDecisionsWithSelection(uml::Activity this):
	this.getMethodNodes().typeSelect(uml::DecisionNode).select(e|e.getProductionRuleset() == null)
;

String asFullPackageName(Ouranos::ProductionRuleset this):
	CONTEXT_PACKAGE() + "." + this.getActivity().asPackageName()
;

String asFullPackageName(uml::DecisionNode this):
	CONTEXT_PACKAGE() + "." + this.activity.asPackageName()
;

boolean isDecisionPredecessor(uml::OpaqueAction this):
	uml::DecisionNode.isInstance(this.getNextNode()) && this.getNextNode().getProductionRuleset() == null
;

uml::Activity getActivity(Ouranos::ProductionRuleset this):
	this.owner
;

String jrulesFileHeader():
	genericFileHeader()
;

String CONTEXT_PACKAGE(): GLOBALVAR contextPackage;
String SERVICE_PACKAGE(): GLOBALVAR servicePackage;
