«IMPORT uml»
«IMPORT Chronos»

«EXTENSION common::util»
«EXTENSION common::umlutils»
«EXTENSION common::naming»

«EXTENSION cartridge::ChiCmf::extensions::globals»
«EXTENSION cartridge::ChronosCommon::naming»
«EXTENSION cartridge::ChiCmf::extensions::umlutils»
«EXTENSION cartridge::ChiCmf::extensions::util»

«EXTENSION cartridge::ChronosCommon::domain::ChiNode»

«REM» template expands the node base class files -----------------«ENDREM»
«DEFINE file FOR ChiNode»
  «FOREACH this.getRoleNames() AS curRoleName»
    «FILE this.getFullPackageName().asPath()+"/"+curRoleName.asBaseClassFile()-»
<?php
«HeaderText()»
/**
 * This file was generated by ChronosGenerator «GeneratorVersion()» from «ModelFile()» on «Date()». 
 * Manual modifications should be placed inside the protected regions.
 */
«IF curRoleName == this.name-»
  «IF this.hasSuperClass()-»
require_once(BASE."«getSuperClass().getFullPackageName().asPath()»/«getSuperClass().name.asClassFile()»");
  «ENDIF-»
«ELSE-»
require_once(BASE."«this.getFullPackageName().asPath()»/«this.name.asClassFile()»");
«ENDIF-»

/**
 * @class «curRoleName»
 * «curRoleName» description: «this.getComment("\n * ")»
 *
 * @author «this.getAuthor()»
 * @version «this.getVersion()»
 */
class «curRoleName»Base«IF curRoleName == this.name»«IF this.hasSuperClass()» extends «this.getSuperClass().name»«ENDIF»«ELSE» extends «name»«ENDIF»
{
    function «curRoleName»Base($oid=null, $type=null)
    {
«IF this.hasSuperClass()-»
      if ($type == null)
  «IF curRoleName == this.name && this.getSuperClass().name == "Node"-»
        parent::__construct('«curRoleName»', $oid);
  «ELSE-»
        parent::__construct($oid, '«curRoleName»');
  «ENDIF-»
      else
  «IF curRoleName == this.name && this.getSuperClass().name == "Node"-»
        parent::__construct($type, $oid);
  «ELSE-»
        parent::__construct($oid, $type);
  «ENDIF-»
«ENDIF-»
    }
«IF curRoleName != this.name-»
    /**
     * @see PersistentObject::getBaseType()
     */
    function getBaseType()
    {
      return "«this.name»";
    }
«ENDIF-»
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("«curRoleName»");
    }
«IF curRoleName == this.name-»
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("«this.getComment(" ").replaceAll('\\"', '\\\\"')»");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
  «EXPAND valueDisplayNames FOR this-»
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
  «EXPAND valueDescription FOR this-»
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
  «IF this.metaType.toString().contains("ChiManyToMany")-»
      return true;
  «ELSE-»
      return false;
  «ENDIF-»
    }
    /**
     * Getter/Setter for properties
     */
  «EXPAND values FOR this-»
  «IF getOrderByColumn() == "sortkey"-»
    function getSortkey()
    {
      return $this->getValue('sortkey', DATATYPE_IGNORE);
    }
    function setSortkey($sortkey)
    {
      return $this->setValue('sortkey', $sortkey, DATATYPE_IGNORE);
    }
  «ENDIF-»
  «EXPAND references FOR this-»
    /**
     * Getter/Setter for related objects
     */
    function __call($name, $arguments)
    {
  «IF this.getParentNodesRecursive().size > 0-»
    «EXPAND foreignKeys FOR this-»
  «ENDIF-»
  «EXPAND parents FOR this-»
  «EXPAND children FOR this-»
    }

    /**
     * Node class overrides
     */
     
  «EXPAND loadChildren FOR this-»
  «EXPAND getChildrenEx FOR this-»
  «EXPAND addChild FOR this-»
  «EXPAND deleteChild FOR this-»
«ENDIF-»
}
?>
«ENDFILE-»
«ENDFOREACH-»
«ENDDEFINE»

«REM» values -----------------------------------------------------«ENDREM»
«DEFINE values FOR ChiNode-»
  «FOREACH this.getChiValues() AS curValue-»
    function «curValue.name.asGetter()»($unconverted=false)
    {
      if ($unconverted)
        return $this->getUnconvertedValue('«curValue.name»', «curValue.app_data_type»);
      else
        return $this->getValue('«curValue.name»', «curValue.app_data_type»);
    }
    function «curValue.name.asSetter()»($«curValue.name»)
    {
      return $this->setValue('«curValue.name»', $«curValue.name», «curValue.app_data_type»);
    }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» valueDisplayNames ------------------------------------------«ENDREM»
«DEFINE valueDisplayNames FOR ChiNode-»
  «FOREACH this.getChiValuesRecursive() AS curValue-»
      if ($name == '«curValue.name»') $displayName = Message::get("«curValue.name»");
  «ENDFOREACH-»
«ENDDEFINE»

«REM» valueDescription -------------------------------------------«ENDREM»
«DEFINE valueDescription FOR ChiNode-»
  «FOREACH this.getChiValuesRecursive() AS curValue-»
      if ($name == '«curValue.name»') $description = Message::get("«curValue.getComment(" ").replaceAll('\\"', '\\\\"')»");
  «ENDFOREACH-»
«ENDDEFINE»

«REM» references -------------------------------------------------«ENDREM»
«DEFINE references FOR ChiNode-»
  «FOREACH this.getChiValueRefs() AS curReference-»
    function «curReference.name.asGetter()»()
    {
      return $this->getValue('«curReference.name»', DATATYPE_ATTRIBUTE);
    }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» foreignKeys ------------------------------------------------«ENDREM»
«DEFINE foreignKeys FOR ChiNode-»
  «FOREACH this.getParentNodesRecursive() AS curParent-»
      // foreign key: «curParent.getRoleName()»
      if ($name == '«curParent.getRoleName().asGetter()»OID')
      {
        $fkValue = $this->getValue('«curParent.getFKName()»', DATATYPE_IGNORE);
        if ($fkValue != null) {
          return PersistenceFacade::composeOID(array('type' => '«curParent.type.name»', 'id' => array($fkValue)));
        }
        else {
          return null;
        }
      }
      if ($name == '«curParent.getRoleName().asSetter()»')
      {
        $node = &$arguments[0];
        if ($node != null)
        {
          if (!is_a($node, 'node') && !is_a($node, 'Node')) {
            call_user_func_array(array(parent, '«curParent.getRoleName().asSetter()»'), $arguments);
          }
          else {
      «IF this.getParentNodesRecursive().size == 1-»
            $node->addChild($this);
      «ELSE-»
            $this->setValue('«curParent.getFKName()»', $node->getDBID(), DATATYPE_IGNORE);
      «ENDIF-»
          }
        }
        return;
      }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» parents ----------------------------------------------------«ENDREM»
«DEFINE parents FOR ChiNode-»
  «FOREACH this.getParentNodesRecursive() AS curParent-»
      // parent: «curParent.getRoleName()»
      if ($name == '«curParent.getRoleName().asGetter()»Parents') {
        return $this->getParentsEx(null, '«curParent.type.name»', null, null);
      }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» children ---------------------------------------------------«ENDREM»
«DEFINE children FOR ChiNode-»
  «FOREACH this.getChildNodesRecursive() AS curChild-»
      // child: «curChild.getRoleName()»
      if ($name == '«curChild.getRoleName().asGetter()»List')
      {
        Log::warn("use of deprecated method «curChild.getRoleName().asGetter()»List. use «curChild.getRoleName().asGetter()»Children() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->«curChild.getRoleName().asGetter()»Children();
      }
      if ($name == '«curChild.getRoleName().asGetter()»Children') {
        return $this->getChildrenEx(null, '«curChild.type.name»', array('«curChild.getOtherEnd().getFKName()»' => $this->getDBID()), null, false);
      }
«IF curChild.type.metaType.toString().contains("ChiManyToMany")-»
  «FOREACH ((ChiNode)curChild.type).getParentNodes() AS curChildParent-»
    «IF isAtOtherNmEnd(this, (ChiNode) curChildParent.type, (ChiManyToMany) curChild.type)-»
      if ($name == '«curChildParent.type.name.asGetter()»List')
      {
        Log::warn("use of deprecated method «curChildParent.type.name.asGetter()»List. use «curChildParent.type.name.asGetter()»Children() instead.\n".WCMFException::getStackTrace(), __CLASS__);
        return $this->«curChildParent.type.name.asGetter()»Children();
      }
      if ($name == '«curChildParent.type.name.asGetter()»Children')
      {
        // the foreign key column does not exist
        return $this->getChildrenEx(null, '«curChildParent.type.name»', null, null, false);
      }
    «ENDIF-»
  «ENDFOREACH-»
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE»

«REM» loadChildren -----------------------------------------------«ENDREM»
«DEFINE loadChildren FOR ChiNode-»
    /**
     * @see Node::loadChildren()
     * Override this to also load the children of many-to-many relations
     */
    function loadChildren($type, $buildDepth=BUILDDEPTH_SINGLE, $forceUpdate=false)
    {
  «FOREACH this.getChildNodesRecursive() AS curChild-»
«IF curChild.type.metaType.toString().contains("ChiManyToMany")-»
  «FOREACH ((ChiNode)curChild.type).getParentNodesRecursive() AS curChildParent-»
    «IF isAtOtherNmEnd(this, (ChiNode) curChildParent.type, (ChiManyToMany) curChild.type)-»
      // handle «curChild.type.name» as many-to-many type
      if ($type == '«curChildParent.type.name»')
      {
        // for every «curChild.type.name» we have to load the «curChildParent.type.name» 
        $this->loadChildren('«curChild.type.name»');
        $children = parent::getChildrenEx(null, '«curChild.type.name»', array('«curChild.getOtherEnd().getFKName()»' => $this->getDBID()), null, false);
        $persistenceFacade = &PersistenceFacade::getInstance();
        $grandChildren = array();
        for($i=0; $i<sizeof($children); $i++)
        {
          if (PersistenceFacade::isValidOID($children[$i]->«curChildParent.type.name.asGetter()»OID()))
          {
            $grandChild = &$persistenceFacade->load($children[$i]->«curChildParent.type.name.asGetter()»OID(), BUILDDEPTH_SINGLE);
            if ($grandChild != null)
            {
              // establish connetcion
              $grandChild->addChild($children[$i]);
              $grandChild->setState(STATE_CLEAN);
              $children[$i]->setState(STATE_CLEAN);
            }
          }
        }
        return;
      }
    «ENDIF-»
  «ENDFOREACH-»
«ENDIF-»
«ENDFOREACH-»
      // do default
      parent::loadChildren($type, $buildDepth, $forceUpdate);
    }
«ENDDEFINE»

«REM» getChildrenEx ----------------------------------------------«ENDREM»
«DEFINE getChildrenEx FOR ChiNode-»
    /**
     * @see Node::getChildrenEx()
     * Override this to also get the children of many-to-many relations
     */
    function getChildrenEx($oid, $type, $values, $properties, $useRegExp=true)
    {
  «FOREACH getChildNodesRecursive() AS curChild-»
«IF curChild.type.metaType.toString().contains("ChiManyToMany")-»
  «FOREACH ((ChiNode)curChild.type).getParentNodesRecursive() AS curChildParent-»
    «IF isAtOtherNmEnd(this, (ChiNode) curChildParent.type, (ChiManyToMany) curChild.type)-»
      // handle «curChild.type.name» as many-to-many type
      if ($type == '«curChildParent.type.name»' || PersistenceFacade::getOIDParameter($oid, 'type') == '«curChildParent.type.name»')
      {
        // for every «curChild.type.name» we have to get the «curChildParent.type.name» parents 
        $children = parent::getChildrenEx(null, '«curChild.type.name»', array('«curChild.getOtherEnd().getFKName()»' => $this->getDBID()), null, false);
        $grandChildren = array();
        $persistenceFacade = &PersistenceFacade::getInstance();
        for($i=0; $i<sizeof($children); $i++)
        {
          // load the parents
          $grandChildrenParents = array();
          foreach ($children[$i]->getProperty('parentoids') as $parentoid)
          {
            if (PersistenceFacade::getOIDParameter($parentoid, 'type') == '«curChildParent.type.name»')
            {
              $tmpParents = $children[$i]->getParentsEx($parentoid, null, null, null);
              if (sizeof($tmpParents) > 0)
                $curChildParent = &$tmpParents[0];
              else
                $curChildParent = &$persistenceFacade->load($parentoid, BUILDDEPTH_SINGLE);
              if ($curChildParent != null)
                $grandChildrenParents[sizeof($grandChildrenParents)] = &$curChildParent;
            }
          }
          for($j=0; $j<sizeof($grandChildrenParents); $j++)
            $grandChildren[sizeof($grandChildren)] = &$grandChildrenParents[$j];
        }
        return Node::filter($grandChildren, $oid, $type, $values, $properties, $useRegExp);
      }
    «ENDIF-»
  «ENDFOREACH-»
«ENDIF-»
«ENDFOREACH-»
      // do default
      return parent::getChildrenEx($oid, $type, $values, $properties, $useRegExp);
    }
«ENDDEFINE»

«REM» addChild ---------------------------------------------------«ENDREM»
«DEFINE addChild FOR ChiNode-»
    /**
     * @see Node::addChild()
     * Override this to insert association objects if necessary
     */
    function addChild(&$child, $addtype=ADDCHILD_BACK)
    {
  «FOREACH this.getChildNodesRecursive() AS curChild-»
«IF curChild.type.metaType.toString().contains("ChiManyToMany")-»
  «FOREACH ((ChiNode)curChild.type).getParentNodesRecursive() AS curChildParent-»
    «IF isAtOtherNmEnd(this, (ChiNode) curChildParent.type, (ChiManyToMany) curChild.type)-»
      if ($child != null && $child->getType() == '«curChildParent.type.name»')
      {
        // for every «curChildParent.type.name» we have to insert a «curChild.type.name»
        $persistenceFacade = &PersistenceFacade::getInstance();
        // check if the relation already exists
        $relOID = $persistenceFacade->getFirstOID('«curChild.type.name»', array('«curChild.getOtherEnd().getFKName()»' => $this->getDBID(), '«curChildParent.getFKName()»' => $child->getDBID()));
        if ($relOID == null)
        {
          // add the child only if it is not added already
          $associationNode = &$persistenceFacade->create('«curChild.type.name»', BUILDTYPE_SINGLE);
          $associationNode->«this.name.asSetter()»($this);
          $associationNode->«curChildParent.type.name.asSetter()»($child);
          // physically add the child to allow tree iteration for CommitVisior
          $this->addChild($associationNode);
          $child->addChild($associationNode);
        }
        else
          $associationNode = &$persistenceFacade->load($relOID, BUILDTYPE_SINGLE);
        // set child parameter to associationNode and prodeed with default behaviour
        $child = &$associationNode;
      }
    «ENDIF-»
  «ENDFOREACH-»
«ENDIF-»
«ENDFOREACH-»
      // do default
      parent::addChild($child, $addtype);
    }
«ENDDEFINE»

«REM» deleteChild ------------------------------------------------«ENDREM»
«DEFINE deleteChild FOR ChiNode-»
    /**
     * @see Node::deleteChild()
     * Override this to delete association objects if necessary
     */
    function deleteChild($childOID, $reallyDelete=false)
    {
  «FOREACH this.getChildNodesRecursive() AS curChild-»
«IF curChild.type.metaType.toString().contains("ChiManyToMany")-»
  «FOREACH ((ChiNode)curChild.type).getParentNodesRecursive() AS curChildParent-»
    «IF isAtOtherNmEnd(this, (ChiNode) curChildParent.type, (ChiManyToMany) curChild.type)-»
      if (PersistenceFacade::isValidOID($childOID) && PersistenceFacade::getOIDParameter($childOID, 'type') == '«curChildParent.type.name»')
      {
        // for every «curChildParent.type.name» we have to delete the «curChild.type.name»
        // set childOID parameter to the «curChild.type.name»'s object id and proceed with default behaviour
        // check if the connection child is loaded already
        $ids = PersistenceFacade::getOIDParameter($childOID, 'id');
        $associationNodeConstraint = array('«curChild.getOtherEnd().getFKName()»' => $this->getDBID(), '«curChildParent.getFKName()»' => $ids[0]);
        $associationNode = &$this->getFirstChild('«curChild.type.name»', $associationNodeConstraint, null, false);
        if ($associationNode != null)
          $childOID = $associationNode->getOID();
        else
        {
          // try to get it from the database
          $persistenceFacade = &PersistenceFacade::getInstance();
          $relOID = $persistenceFacade->getFirstOID('«curChild.type.name»', $associationNodeConstraint);
          if ($relOID != null)
            $childOID = $relOID;
        }
      }
    «ENDIF-»
  «ENDFOREACH-»
«ENDIF-»
«ENDFOREACH-»
      // do default
      parent::deleteChild($childOID, $reallyDelete);
    }
«ENDDEFINE»
