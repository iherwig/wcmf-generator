import uml;
import Chronos;

extension org::openarchitectureware::uml2::profile::profiling;
extension org::openarchitectureware::util::stdlib::io;

extension common::util;
extension common::umlutils;

extension cartridge::ChronosCommon::naming;

extension cartridge::ChronosCommon::domain::ChiManyToMany;
extension cartridge::ChronosCommon::domain::ChiNode;
extension cartridge::ChronosCommon::domain::ChiActionKey;

extension cartridge::Wcmf::extensions::globals;
extension cartridge::Wcmf::extensions::umlutils;

/**
 * Check if a given class belongs to the wCMF library
 */
boolean isLibraryClass(uml::NamedElement this) : 
	LibraryPackageAbsolute(this.getModel()) != this.getModel().name ?
		this.getQualifiedName().startsWith(LibraryPackageAbsolute(this.getModel()))
	:
		false
;

/**
 * Check if a given class belongs to the application
 */
boolean isApplicationClass(uml::NamedElement this) : 
	ApplicationPackageAbsolute(this.getModel()) != this.getModel().name ?
		this.getQualifiedName().startsWith(ApplicationPackageAbsolute(this.getModel())) && uml::Class.isInstance(this)
	:
		uml::Class.isInstance(this)
;

/**
 * Check if an element is added by the generator
 */
boolean isGeneratorAdded(uml::Element this) : 
	JAVA net.sourceforge.olympos.oaw.extend.Generator.isGeneratorAdded(org.eclipse.uml2.uml.Element)
;

/**
 * Check if an element is inherited by the generator
 */
boolean isGeneratorInherited(uml::Element this) : 
	JAVA net.sourceforge.olympos.oaw.extend.Generator.isGeneratorInherited(org.eclipse.uml2.uml.Element)
;

/**
 * Check if a model contains a application configuration
 */
boolean hasSystemConfig(uml::Model this) :
	this.allOwnedElements().typeSelect(ChiSystem).size > 0
;

/**
 * Get all configuration file names that are referenced in the model
 */
Set[String] getConfigurationFiles(uml::Model this) :
	let fromKeys = this.allOwnedElements().typeSelect(ChiActionKey).config :
		let fromSystem = this.allOwnedElements().typeSelect(ChiSystem).config :
			fromKeys.addAll(fromSystem).toSet()
;

/**
 * Get all configuration sections (ChiSystem instances) from the given config
 */
cached List[ChiSystem] getConfigSections(uml::Model this, String config) :
	this.allOwnedElements().typeSelect(ChiSystem).select(e|e.config == config)
;

/**
 * Check if the given configuration file contains the given section
 */
boolean hasConfigSection(uml::Model this, String config, String section) :
	this.getConfigSections(config).select(e|e.name.toLowerCase() == section.toLowerCase()).size > 0
;

/**
 * Check if a configuation file is the default one
 */
boolean isDefaultConfig(String config) : config == DefaultConfigFile();

/**
 * Check all action keys for the given configuration
 */
cached List[ActionKey] getActionKeys(uml::Model model, String config) :
  model.allOwnedElements().typeSelect(ChiActionKey).select(e|e.config == config)
;

/**
 * Print the action key in the GET parameters format
 */
String asParams(ChiActionKey this) :
  let controller = this.getSourceController() :
    ((controller != null && controller.name != "Controller" ? "&controller="+controller.getFullPackageName().asPhpPackage()+"\\"+controller.name : "") +
      (!this.^context.isNullOrEmpty() ? "&context="+this.^context : "") +
        (!this.action.isNullOrEmpty() ? "&action="+this.action : "")).replaceFirst("^&", "")
;