«IMPORT uml»
«IMPORT Chronos»

«EXTENSION common::util»
«EXTENSION common::umlutils»
«EXTENSION common::naming»

«EXTENSION cartridge::ChronosCommon::naming»
«EXTENSION cartridge::Wcmf::extensions::globals»
«EXTENSION cartridge::Wcmf::extensions::umlutils»
«EXTENSION cartridge::Wcmf::extensions::util»

«EXTENSION cartridge::ChronosCommon::domain::ChiNode»
«EXTENSION cartridge::ChronosCommon::domain::ChiValue»
«EXTENSION cartridge::ChronosCommon::domain::ChiValueRef»
«EXTENSION cartridge::ChronosCommon::domain::ChiManyToMany»

«REM» This template expands the mapper files ---------------------«ENDREM»

«DEFINE file FOR ChiNode»
  «FILE this.getFullPackageName().asPath()+"/_base/"+this.name.asMapper().asPhpClassFile()-»
<?php
«HeaderText()»
/**
 * This file was generated by ChronosGenerator «GeneratorVersion()» from «ModelFile()»«IF PrintGenerateDate()» on «Date()»«ENDIF».
 * Manual modifications should be placed inside the protected regions.
 */
namespace «this.getFullPackageName().asPhpPackage()»\_base;

use «this.getFullPackageName().asPhpPackage()»\«this.name»;

use wcmf\lib\i18n\Message;
use wcmf\lib\model\mapper\NodeUnifiedRDBMapper;
use wcmf\lib\model\mapper\RDBAttributeDescription;
use wcmf\lib\model\mapper\RDBManyToManyRelationDescription;
use wcmf\lib\model\mapper\RDBManyToOneRelationDescription;
use wcmf\lib\model\mapper\RDBOneToManyRelationDescription;
use wcmf\lib\persistence\ReferenceDescription;
use wcmf\lib\persistence\ObjectId;

/**
 * «this.name.asMapper()» maps «this.name» Nodes to the database.
«IF !this.getComment("\n * ").isNullOrEmpty()» * «this.getComment("\n * ")»«ENDIF»
 */
class «this.name.asMapper()» extends NodeUnifiedRDBMapper {

  /**
   * @see RDBMapper::getType()
   */
  public function getType() {
    return '«this.getFullPackageName().asPackageName()».«this.name»';
  }

  /**
   * @see PersistenceMapper::getTypeDisplayName()
   */
  public function getTypeDisplayName(Message $message) {
    return $message->getText("«this.name»");
  }

  /**
   * @see PersistenceMapper::getTypeDescription()
   */
  public function getTypeDescription(Message $message) {
    return $message->getText("«this.getComment("\\\\n").replaceAll('\\"', '\\\\"')»");
  }

  /**
   * @see PersistenceMapper::getAttributeDisplayName()
   */
  public function getAttributeDisplayName($name, Message $message) {
    $displayName = $name;
    if (false) {}
«EXPAND attributeDisplayNames FOR this-»
    return $displayName;
  }

  /**
   * @see PersistenceMapper::getAttributeDescription()
   */
  public function getAttributeDescription($name, Message $message) {
    $description = $name;
    if (false) {}
«EXPAND attributeDescription FOR this-»
    return $description;
  }

  /**
   * @see PersistenceMapper::getPkNames()
   */
  public function getPkNames() {
    return «EXPAND primaryKeyArray»;
  }

  /**
   * @see PersistenceMapper::getProperties()
   */
  public function getProperties() {
    return array(
«IF this.metaType.toString().contains("ChiManyToMany")-»
      'manyToMany' => array(«FOREACH this.getParentNodes() AS curParent SEPARATOR ', '»'«curParent.getRoleName()»'«ENDFOREACH»),
«ENDIF-»
      'is_searchable' => «this.is_searchable.boolString()»,
«IF !this.display_value.isNullOrEmpty()-»
      'display_value' => '«this.display_value»',
«ENDIF-»
«IF !this.parent_order.isNullOrEmpty()-»
      'parent_order' => '«this.parent_order»',
«ENDIF-»
«IF !this.child_order.isNullOrEmpty()-»
      'child_order' => '«this.child_order»',
«ENDIF-»
«PROTECT CSTART "// " CEND "" ID (this.getFullPackageName().asPath()+"/_base/"+this.name.asMapper().asPhpClassFile()+"/Properties").asProtectedRegionId()»
«ENDPROTECT»
    );
  }

  /**
   * @see RDBMapper::getOwnDefaultOrder()
   */
  public function getOwnDefaultOrder($roleName=null) {
    $orderDefs = array();
«IF getOrderByName() == defaultOrderByName()-»
  «FOREACH this.getParentNodesRecursive() AS curParent-»
    if ($roleName == '«curParent.getRoleName()»') {
      $orderDefs[] = array('sortFieldName' => '«this.getOrderByNameForParent(curParent)»', 'sortDirection' => '«this.getOrderByDirection()»', 'isSortkey' => true);
    }
  «ENDFOREACH-»
    if ($roleName == null) {
      $orderDefs[] = array('sortFieldName' => '«this.getOrderByName()»', 'sortDirection' => '«this.getOrderByDirection()»', 'isSortkey' => true);
    }
«ELSE-»
  «FOREACH this.getOrderByNames() AS orderByName-»
    $orderDefs[] = array('sortFieldName' => '«orderByName»', 'sortDirection' => '«this.getOrderByDirection(orderByName)»', 'isSortkey' => false);
  «ENDFOREACH-»
«ENDIF-»
    return $orderDefs;
  }

  /**
   * @see RDBMapper::getRelationDescriptions()
   */
  protected function getRelationDescriptions() {
    return array(
«EXPAND relations-»
    );
  }

  /**
   * @see RDBMapper::getAttributeDescriptions()
   */
  protected function getAttributeDescriptions() {
    return array(
«EXPAND attributes-»
  «IF getOrderByName() == defaultOrderByName()-»
  «FOREACH this.getParentNodesRecursive() AS curParent-»
      /**
       * Sort key for ordering in relation to «curParent.getRoleName()»
       */
      '«this.getOrderByNameForParent(curParent)»' => new RDBAttributeDescription('«this.getOrderByNameForParent(curParent)»', 'Float', array('DATATYPE_IGNORE'), null, «REM»NOBR«ENDREM-»
'regexp:{"pattern":"^[0-9.]*$"}', '', true, 'text[class="tiny"]', 'text', '«getTableName()»', '«this.getOrderByNameForParent(curParent)»'),
    «ENDFOREACH-»
      /**
       * Sort key for ordering
       */
      '«this.getOrderByName()»' => new RDBAttributeDescription('«this.getOrderByName()»', 'Float', array('DATATYPE_IGNORE'), null, «REM»NOBR«ENDREM-»
'regexp:{"pattern":"^[0-9.]*$"}', '', true, 'text[class="tiny"]', 'text', '«getTableName()»', '«this.getOrderByName()»'),
        «ENDIF-»
«EXPAND references-»
    );
  }

  /**
   * @see RDBMapper::createObject()
   */
  protected function createObject(ObjectId $oid=null, array $initialData=null) {
    return new «this.name»($oid, $initialData);
  }

  /**
   * @see NodeUnifiedRDBMapper::getTableName()
   */
  protected function getTableName() {
    return '«getTableName()»';
  }
}
/**
 * Additional names to be included by l10n tools ([Pl.]: plural forms)
 * - $message->getText("«this.name» [Pl.]")
«FOREACH this.getParentNodesRecursive() AS curParent-»
 * - $message->getText("«curParent.getRoleName()»")
 * - $message->getText("«curParent.getRoleName()» [Pl.]")
«ENDFOREACH-»
«FOREACH this.getChildNodesRecursive() AS curChild-»
 * - $message->getText("«curChild.getRoleName()»")
 * - $message->getText("«curChild.getRoleName()» [Pl.]")
«ENDFOREACH-»
 * Restrictions descriptions to be included by l10n tools
«FOREACH this.getChiValuesRecursive() AS curValue-»
  «IF !curValue.restrictions_description.isNullOrEmpty()-»
 * - $message->getText("«curValue.restrictions_description»")
  «ENDIF-»
«ENDFOREACH-»
 */
?>
«ENDFILE-»
«ENDDEFINE»

«REM» primaryKeyArray --------------------------------------------«ENDREM»
«DEFINE primaryKeyArray FOR ChiNode-»
array(«FOREACH this.getPKValues() AS curPk SEPARATOR ', '»'«curPk.name»'«ENDFOREACH»)«REM»NOBR«ENDREM-»
«ENDDEFINE»

«REM» references -------------------------------------------------«ENDREM»
«DEFINE references FOR ChiNode-»
  «FOREACH this.getChiValueRefs() AS curReference ITERATOR Index1-»
     /*
      * «this.getComment(" ")»
      */
      '«curReference.name»' => new ReferenceDescription('«curReference.name»', '«curReference.getReferencedNode().name»', '«curReference.getReferencedValue().name»'),
  «ENDFOREACH-»
«ENDDEFINE»

«REM» relations ---------------------------------------------------«ENDREM»
«DEFINE relations FOR ChiNode-»
  «FOREACH this.getChildNodesRecursive() AS curChild ITERATOR Index1-»
    «IF !((ChiNode)curChild.type).isAbstract-»
      «IF curChild.type.metaType.toString().contains("ChiManyToMany") && curChild.type.getOtherEndAllowSourceType(curChild.getOtherEnd(), false).size == 1-»
        «LET curChild.type.getOtherEndAllowSourceType(curChild.getOtherEnd(), false).first() AS otherNmEnd-»
      '«otherNmEnd.getRoleName()»' => new RDBManyToManyRelationDescription(
      /* this -> nm  */ «EXPAND oneToManyRelation(curChild)»,
      /* nm -> other */ «EXPAND manyToOneRelation(otherNmEnd) FOR curChild.type»
      ),
        «ENDLET-»
      «ELSE-»
      '«curChild.getRoleName()»' => «EXPAND oneToManyRelation(curChild)-»,
      «ENDIF-»
    «ENDIF-»
  «ENDFOREACH-»
  «FOREACH this.getParentNodesRecursive() AS curParent ITERATOR Index1-»
    «IF !((ChiNode)curParent.type).isAbstract-»
      '«curParent.getRoleName()»' => «EXPAND manyToOneRelation(curParent)-»,
    «ENDIF-»
  «ENDFOREACH-»
«ENDDEFINE»

«REM» one-to-many ---------------------------------------------------«ENDREM»
«DEFINE oneToManyRelation(uml::Property child) FOR ChiNode-»
new RDBOneToManyRelationDescription(
        '«this.getFullPackageName().asPackageName()».«this.name»', '«child.getOtherEnd().getRoleName()»', '«this.getFullPackageName().asPackageName()».«child.type.name»', '«child.getRoleName()»',
        '«child.getOtherEnd().getLower()»', '1', '«child.getLower()»', '«IF child.getUpper() == -1»unbounded«ELSE»«child.getUpper()»«ENDIF-»', «REM»NOBR«ENDREM-»
'«child.getOtherEnd().aggregation»', '«child.aggregation»', '«child.getOtherEnd().isNavigable()»', '«child.isNavigable()»', 'child', «REM»NOBR«ENDREM-»
'«this.getPKValues().first().name»', '«child.getOtherEnd().getFKName()»'
      )«REM»NOBR«ENDREM-»
«ENDDEFINE»

«REM» many-to-one ---------------------------------------------------«ENDREM»
«DEFINE manyToOneRelation(uml::Property parent) FOR ChiNode-»
new RDBManyToOneRelationDescription(
        '«this.getFullPackageName().asPackageName()».«this.name»', '«parent.getOtherEnd().getRoleName()»', '«this.getFullPackageName().asPackageName()».«parent.type.name»', '«parent.getRoleName()»',
        '«parent.getOtherEnd().getLower()»', '«IF parent.getOtherEnd().getUpper() == -1»unbounded«ELSE»«parent.getOtherEnd().getUpper()»«ENDIF-»', '«parent.getLower()»', '1', «REM»NOBR«ENDREM-»
'«parent.getOtherEnd().aggregation»', '«parent.aggregation»', '«parent.getOtherEnd().isNavigable()»', '«parent.isNavigable()»', 'parent', «REM»NOBR«ENDREM-»
'«parent.type.getPKValues().first().name»', '«parent.getFKName()»'
      )«REM»NOBR«ENDREM-»
«ENDDEFINE»

«REM» attributes ---------------------------------------------------«ENDREM»
«DEFINE attributes FOR ChiNode-»
  «FOREACH this.getChiValuesRecursive() AS curValue ITERATOR Index1-»
     /**
      * «curValue.getComment(" ")»
      */
      '«curValue.name»' => new RDBAttributeDescription('«curValue.name»', '«curValue.type.name»', array(«FOREACH curValue.app_data_type.split("\\|") AS curTag SEPARATOR ", "-»'«curTag»'«ENDFOREACH-»), «REM»NOBR«ENDREM-»
«IF curValue.defaultValue.stringValue().isNullOrEmpty()»null«ELSE»'«curValue.defaultValue.stringValue().replaceAll("'", "\\\\'")»'«ENDIF», '«curValue.restrictions_match.replaceAll("'", "\\\\'")»', «REM»NOBR«ENDREM-»
«IF !curValue.restrictions_description.isNullOrEmpty()-»'«curValue.restrictions_description.replaceAll("'", "\\\\'")»'«ELSE-»''«ENDIF-», «curValue.is_editable.boolString()», '«curValue.input_type.replaceAll("'", "\\\\'")»', «REM»NOBR«ENDREM-»
'«curValue.display_type»', '«getTableName()»', '«curValue.getColumnName()»'),
  «ENDFOREACH-»
«ENDDEFINE»

«REM» attributeDisplayNames ------------------------------------------«ENDREM»
«DEFINE attributeDisplayNames FOR ChiNode-»
  «FOREACH this.getChiValuesRecursive() AS curValue-»
      elseif ($name == '«curValue.name»') { $displayName = $message->getText("«curValue.name»"); }
  «ENDFOREACH-»
  «FOREACH this.getChiValueRefs() AS curReference-»
      elseif ($name == '«curReference.name»') { $displayName = $message->getText("«curReference.name»"); }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» attributeDescription -------------------------------------------«ENDREM»
«DEFINE attributeDescription FOR ChiNode-»
  «FOREACH this.getChiValuesRecursive() AS curValue-»
      elseif ($name == '«curValue.name»') { $description = $message->getText("«curValue.getComment("\\\\n").replaceAll('\\"', '\\\\"')»"); }
  «ENDFOREACH-»
  «FOREACH this.getChiValueRefs() AS curReference-»
      elseif ($name == '«curReference.name»') { $description = $message->getText("«curReference.getComment("\\\\n").replaceAll('\\"', '\\\\"')»"); }
  «ENDFOREACH-»
«ENDDEFINE»