import uml;

extension common::util;

/**
 * Swap all Composition/Aggregation ends in the Model
 */
Void swapDiamonds(uml::Model this) :
	let p = this.allOwnedElements().typeSelect(uml::Property).select(e|
		e.aggregation == AggregationKind::composite || e.aggregation == AggregationKind::shared) :
	info("Swapping composite/shared relation ends") ->
	p.collect(e|e.swapDiamonds()) ->
  this
;

/**
 * Swap Composition/Aggregation end for the given Property
 */
Void swapDiamonds(uml::Property this) :
	let oak = this.getOtherEnd().aggregation :
	this.getOtherEnd().setAggregation(this.aggregation) ->
	this.setAggregation(oak)
;
