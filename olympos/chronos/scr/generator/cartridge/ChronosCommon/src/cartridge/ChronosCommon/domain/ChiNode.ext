import uml;
import Chronos;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::util;
extension common::umlutils;

extension cartridge::ChronosCommon::naming;
extension cartridge::ChronosCommon::util;

extension cartridge::ChronosCommon::domain::ChiValue;
extension cartridge::ChronosCommon::domain::ChiManyToMany;

String STEREOTYPE_CHI_NODE() : "Chronos::ChiNode";

/**
 * ChiNode extensions
 */

/**
 * Methods for retrieving parent nodes. Parents are at the composite or shared end (uml::Property) or the one
 * that is navigable in an association with the node.
 */

/**
 * Check if a node has parent nodes (including associations added by the generator)
 */
Boolean hasParentNodesRecursive(ChiNode this):
	this.getParentNodesRecursive().size >= 0 ? true : false
;
/**
 * Get all parent nodes (including associations added by the generator)
 */
cached List[uml::Property] getParentNodesRecursive(ChiNode this) :
	this.getParentNodes(true).select(e|e.type.isNode())
;
/**
 * Check if a node has parent nodes
 */
Boolean hasParentNodes(ChiNode this):
	this.getParentNodes().size >= 0 ? true : false
;
/**
 * Get all parent nodes
 */
cached List[uml::Property] getParentNodes(ChiNode this) :
	this.getParentNodes(false).select(e|e.type.isNode())
;
/**
 * Check if a node is a parent node
 */
Boolean isParentNode(ChiNode this, ChiNode other) :
	this.isParentNode(other, false)
;
/**
 * Private calls to JAVA extensions
 */
private List[uml::Property] getParentNodes(ChiNode this, boolean recursive) :
	JAVA net.sourceforge.olympos.oaw.extend.NodeHelper.getParents(org.eclipse.uml2.uml.Class, java.lang.Boolean)
;
private Boolean isParentNode(ChiNode this, ChiNode other, Boolean recursive) :
	JAVA net.sourceforge.olympos.oaw.extend.NodeHelper.isParent(org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Class, java.lang.Boolean)
;

/**
 * Methods for retrieving child nodes. Children are at otherEnd (uml::Property) of parent ends.
 */

/**
 * Check if a node has child nodes (including associations added by the generator)
 */
Boolean hasChildNodesRecursive(ChiNode this):
	this.getChildNodesRecursive().size >= 0 ? true : false
;
/**
 * Get all child nodes (including associations added by the generator)
 */
cached List[uml::Property] getChildNodesRecursive(ChiNode this) :
	this.getChildNodes(true).select(e|e.type.isNode())
;
/**
 * Check if a node has child nodes (including associations added by the generator)
 */
Boolean hasChildNodes(ChiNode this):
	this.getChildNodes().size >= 0 ? true : false
;
/**
 * Get all child nodes
 */
cached List[uml::Property] getChildNodes(ChiNode this) :
	this != null ?
		this.getChildNodes(false).select(e|e.type.isNode())
	:
		null
;
/**
 * Check if a node is a child node
 */
Boolean isChildNode(ChiNode this, ChiNode other) :
	this.isChildNode(other, false)
;
/**
 * Private calls to JAVA extensions
 */
private List[Property] getChildNodes(ChiNode this, boolean recursive) :
	JAVA net.sourceforge.olympos.oaw.extend.NodeHelper.getChildren(org.eclipse.uml2.uml.Class, java.lang.Boolean)
;
private Boolean isChildNode(ChiNode this, ChiNode other, Boolean recursive) :
	JAVA net.sourceforge.olympos.oaw.extend.NodeHelper.isChild(org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Class, java.lang.Boolean)
;

/**
 * Methods for retrieving attributes
 */

/**
 * Get all attributes (including attributes added by the generator)
 */
cached List[ChiValue] getChiValuesRecursive(ChiNode this):
	this.attribute.typeSelect(ChiValue)
;

/**
 * Get all references
 */
cached List[ChiValueRef] getChiValueRefs(ChiNode this):
	this.attribute.typeSelect(ChiValueRef)
;

/**
 * Get the init params
 */
String getInitparams(ChiNode this) :
	// use the next line, if initparams tagged value is of type ChiSystem
	//this.initparams != null ? this.initparams.name : "database"
	// use the next line, if initparams tagged value is of type String
	!this.initparams.isNullOrEmpty() ? this.initparams : "database"
;

/**
 * Get the table name
 */
String getTableName(ChiNode this) :
	this.table_name.length > 0 ? this.table_name : this.name
;

/**
 * Get all order attribute names from the orderby tagged value
 */
String getOrderByNames(ChiNode this) :
	this.orderby.split("\\|").trim().collect(v|v.split(" ").first().trim()).select(v|v != "none")
;

/**
 * Get the first order column and direction from the orderby tagged value
 */
String getOrderByColumn(ChiNode this) :
	let name = this.getOrderByNames().first() :
	let dir = this.getOrderByDirection(name) :
		let orderVal = this.getChiValuesRecursive().select(v|v.name == name).first() :
			orderVal != null ? orderVal.getColumnName()+" "+dir : (name == defaultOrderByName() ? name : "")
;

/**
 * Get the first order attribute from the orderby tagged value
 */
String getOrderByName(ChiNode this) :
	let name = this.getOrderByNames().first() :
		let orderVal = this.getChiValuesRecursive().select(v|v.name == name).first() :
			orderVal != null ? orderVal.name : (name == defaultOrderByName() ? name : null)
;

/**
 * Get the order direction for the given order attribute from the orderby tagged value (ASC or DESC, defaults to ASC)
 */
String getOrderByDirection(ChiNode this, String name) :
	let dir = this.orderby.split("\\|").trim().select(v|v.split(" ").first().trim() == name).split(" ").last().trim() :
		dir.toUpperCase() == "ASC" || dir.toUpperCase() == "DESC" ? dir.toUpperCase() : "ASC"
;

/**
 * Get the first order direction from the orderby tagged value (ASC or DESC, defaults to ASC)
 */
String getOrderByDirection(ChiNode this) :
	let name = this.getOrderByNames().first() :
		this.getOrderByDirection(name)
;

/**
 * Get the order column that should be used in relation to a given parent.
 * It will only contain a value, if getOrderByName returns the defaultOrderByName
 */
String getOrderByNameForParent(ChiNode this, Property parent) :
	let orderByName = this.getOrderByName() :
		orderByName == defaultOrderByName() ? orderByName+"_"+parent.getRoleName().toLowerCase() : null
;

/**
 * Get the primary key tagged value or default pk name if not set
 */
String getPKName(ChiNode this) :
	this.pk_name == null || this.pk_name.length == 0 ? defaultPKName(this) : this.pk_name
;

/**
 * Set the primary key tagged value
 */
Void setPKName(ChiNode this, String name) :
	this.setTaggedValue(STEREOTYPE_CHI_NODE(), "pk_name", name)
;

/**
 * Get the foreign key
 */
String getFKName(Property parent) :
	let association = parent.association :
	association != null ?
		(let fk_name = association.getTaggedValue(STEREOTYPE_CHI_ASSOCIATION(), "fk_name") :
			fk_name == null || fk_name.toString().length == 0 ? defaultFKName(parent) : fk_name) :
		defaultFKName(parent)
;

/**
 * Get the primary keys (from the tagged value)
 */
List[ChiValue] getPKValues(ChiNode this) :
	let pkNameStr = this.pk_name.split("\\|") :
		this.getChiValuesRecursive().select(v|pkNameStr.contains(v.name))
;

/**
 * Check if an attribute is a fk value
 * (this is delegated to the generator, because the result was calcualted during post processing)
 */
boolean isFKValue(ChiValue this) :
	JAVA net.sourceforge.olympos.oaw.extend.Generator.isFKValue(org.eclipse.uml2.uml.Property)
;

/**
 * Get the class that is referenced by a fk value
 * (this is delegated to the generator, because the result was calcualted during post processing)
 */
Class getFKClass(ChiValue this) :
	JAVA net.sourceforge.olympos.oaw.extend.Generator.getFKClass(org.eclipse.uml2.uml.Property)
;

/**
 * Checks whether a ChiNode is at the other end of an N:M relation.
 */
 Boolean isAtOtherNmEnd(ChiNode this, ChiNode otherNode, ChiManyToMany nm) :
/*
Algorithm remarks:
1) This Node may not be other Node
2) The common superclasses of this Node and the other Node (if any) may not
   have a relation to NM

Test Scenario:

Class hierarchy:
ChiBase
	ChiBusinessUseCase
		ChiBusinessUseCaseCore
	Actor
		ChiWorker
			ChiWorkerInternal
			ChiWorkerExternal
		ChiBusinessPartner
			ChiBusinessPartnerActive

Relations:
ChiBusinessUseCase ---NMUCActor--- Actor

Test Case:
this = ChiWorkerInternal
nm = NMUCActor

TRUE for otherNode = ChiBusinessUseCase, ChiBusinessUseCaseCore
FALSE for all other
*/
 	otherNode.name != this.name
	&& this.getSuperClassesRecursive().add(this).select(
		e|otherNode.getSuperClassesRecursive().add(otherNode).contains(e)
	).typeSelect(Chronos::ChiNode).select(
		e|((Chronos::ChiNode) e).getChildNodes().select(
			f|f.type == nm
		).size > 0
	).size == 0
 ;


List[uml::Property] getManyToManyResolvedParentNodes(ChiNode this):
	this.resolveManyToMany(this.getParentNodesRecursive(), true)
;

List[uml::Property] getManyToManyResolvedChildNodes(ChiNode this):
	this.resolveManyToMany(this.getChildNodesRecursive(), true)
;

List[uml::Property] getNotAbstractParentNodes(ChiNode this):
	this.resolveManyToMany(this.getParentNodesRecursive().select(e|!((Chronos::ChiNode) e.type).isAbstract), false)
;

List[uml::Property] getNotAbstractChildNodes(ChiNode this):
	this.resolveManyToMany(this.getChildNodesRecursive().select(e|!((Chronos::ChiNode) e.type).isAbstract), false)
;

List[uml::Property] getNotAbstractNavigableParentNodes(ChiNode this):
	this.getNotAbstractParentNodes().select(e|e.isNavigable())
;

List[uml::Property] getNotAbstractNavigableChildNodes(Chronos::ChiNode this):
	this.getNotAbstractChildNodes().select(e|e.isNavigable())
;

List[uml::Property] getNavigableParentNodes(ChiNode this):
	this.resolveManyToMany(this.getParentNodesRecursive().select(e|e.isNavigable()), false)
;

List[uml::Property] getNavigableChildNodes(ChiNode this):
	this.resolveManyToMany(this.getChildNodesRecursive().select(e|e.isNavigable()), false)
;

List[uml::Property] resolveManyToMany(ChiNode this, List[uml::Property] list, boolean includeAbstract):
	let result = (List[uml::Property]) {}:

	result.addAll(list.select(e|!((Chronos::ChiNode) e.type).isManyToMany())) ->
	result.addAll(((List[Chronos::ChiManyToMany]) list.select(e|((Chronos::ChiNode) e.type).isManyToMany()).type).getOtherEnd(this, includeAbstract)) ->

	result
;

boolean isDisplayValue(Chronos::ChiValue this, Chronos::ChiNode node):
	!node.display_value.isNullOrEmpty() ? (
		node.display_value.toLowerCase().contains(this.name.toLowerCase())
	) : (
		false
	)
;

/**
 * Check if an element is added by the generator
 */
boolean isNode(uml::Element this) :
	this.getAppliedStereotype(STEREOTYPE_CHI_NODE()) != null || this.getAppliedStereotype(STEREOTYPE_CHI_MANY_TO_MANY()) != null
;
