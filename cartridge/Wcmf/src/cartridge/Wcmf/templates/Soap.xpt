«IMPORT uml»
«IMPORT Chronos»

«EXTENSION common::util»
«EXTENSION common::umlutils»
«EXTENSION common::naming»

«EXTENSION cartridge::ChronosCommon::naming»
«EXTENSION cartridge::Wcmf::extensions::globals»
«EXTENSION cartridge::Wcmf::extensions::umlutils»
«EXTENSION cartridge::Wcmf::extensions::util»

«EXTENSION cartridge::ChronosCommon::domain::ChiNode»

«REM» This template expands the soap service definitions ---------«ENDREM»

«DEFINE file FOR Model-»
  «FILE ApplicationPath()+"/public/soap-interface.php"-»
<?php
«HeaderText()-»
/**
 * This file was generated by ChronosGenerator«IF !GeneratorVersion().isNullOrEmpty()» «GeneratorVersion()»«ENDIF» from «ModelFile()»«IF PrintGenerateDate()» on «Date()»«ENDIF».
 * Manual modifications should be placed inside the protected regions.
 * NOTE: This file was created in the application root directory to
 *       ensure that everything is working correctly
 */
«EXPAND methodImpl FOREACH this.allOwnedElements().typeSelect(ChiNode)-»
«EXPAND wsdl FOREACH this.allOwnedElements().typeSelect(ChiNode)-»
«ENDFILE-»
«ENDDEFINE»

«REM» wsdl -------------------------------------------------------«ENDREM»
«DEFINE wsdl FOR ChiNode-»
  «IF this.isApplicationClass()-»

/**
 * WSDL definition for «this.name.asType()»
 */
$server->wsdl->addComplexType('«this.name»', 'complexType', 'struct', 'sequence', '', [
    'oid' => ['name' => 'oid', 'type' => 'xsd:string'],
  «FOREACH this.getValues() AS curValue-»
    '«curValue.name»' => ['name' => '«curValue.name»', 'type' => 'xsd:string'],
  «ENDFOREACH-»
  «IF getOrderByName() == "sortkey"-»
    'sortkey' => ['name' => 'sortkey', 'type' => 'xsd:string'],
  «ENDIF-»
  «FOREACH this.getNotAbstractNavigableParentNodes() AS curParent-»
    '«curParent.type.name.asType()»' => ['name' => '«curParent.type.name.asType()»', 'type' => 'tns:«curParent.type.name.asType()»List'],
  «ENDFOREACH-»
  «FOREACH this.getNotAbstractNavigableChildNodes() AS curChild-»
    '«curChild.type.name.asType()»' => ['name' => '«curChild.type.name.asType()»', 'type' => 'tns:«curChild.type.name.asType()»List'],
  «ENDFOREACH-»
  ]
);
$server->wsdl->addComplexType('«this.name.asType()»List', 'complexType', 'array', '', 'SOAP-ENC:Array', [], [
    ['ref' => 'SOAP-ENC:arrayType', 'wsdl:arrayType' => 'tns:«this.name.asType()»[]']
  ],
  'tns:«this.name.asType()»'
);
$server->wsdl->addComplexType('«this.name.asType()»ListResult', 'complexType', 'struct', 'sequence', '', [
    'list' => ['name' => 'list', 'type' => 'tns:«this.name.asType()»List'],
    'totalCount' => ['name' => 'totalCount', 'type' => 'xsd:integer']
  ]
);
    «IF !this.is_soap.isNullOrFalse()-»
$server->register('get«this.name.asType()»List', [
    'limit' => 'xsd:integer', 'offset' => 'xsd:integer',
    'sortFieldName' => 'xsd:string', 'sortDirection' => 'xsd:string',
    'query' => 'xsd:string'
  ],
  ['return' => 'tns:«this.name.asType()»ListResult'],
  $server::TNS, $server->wsdl->endpoint.'#get«this.name.asType()»List', 'document', 'literal'
);
$server->register('create«this.name.asType()»',
  ['«this.name»' => 'tns:«this.name.asType()»'],
  ['return' => 'tns:«this.name.asType()»'],
  $server::TNS, $server->wsdl->endpoint.'#create«this.name.asType()»', 'document', 'literal'
);
$server->register('read«this.name.asType()»',
  ['oid' => 'xsd:string', 'depth' => 'xsd:integer'],
  ['return' => 'tns:«this.name.asType()»'],
  $server::TNS, $server->wsdl->endpoint.'#read«this.name.asType()»', 'document', 'literal'
);
$server->register('update«this.name.asType()»',
  ['«this.name»' => 'tns:«this.name.asType()»'],
  ['return' => 'tns:«this.name.asType()»'],
  $server::TNS, $server->wsdl->endpoint.'#update«this.name.asType()»', 'document', 'literal'
);
$server->register('delete«this.name.asType()»',
  ['oid' => 'xsd:string'],
  ['return' => 'xsd:string'],
  $server::TNS, $server->wsdl->endpoint.'#delete«this.name.asType()»', 'document', 'literal'
);
    «ENDIF-»
  «ENDIF-»
«ENDDEFINE»

«REM» methodImpl -------------------------------------------------«ENDREM»
«DEFINE methodImpl FOR ChiNode-»
  «IF this.isApplicationClass() && !this.is_soap.isNullOrFalse()-»

/**
 * SOAP Method get«this.name.asType()»List
 * @return Array of tns:«this.name.asType()» instances on success
 */
function get«this.name.asType()»List($limit=null, $offset=null, $sortFieldName=null, $sortDirection=null, $query=null) {
  global $server;
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/get"+this.name.asType()+"List").asProtectedRegionId()»
  $params = ['className' => '«this.name»', 'completeObjects' => true];
  if ($limit) { $params['limit'] = $limit; }
  if ($offset) { $params['offset'] = $offset; }
  if ($sortFieldName) { $params['sortFieldName'] = $sortFieldName; }
  if ($sortDirection) { $params['sortDirection'] = $sortDirection; }
  if ($query) { $params['query'] = $query; }
  $response = $server->doCall('list', $params);
  return ['return' => ['list' => $response->getValue('list'), 'totalCount' => $response->getValue('totalCount')]];
«ENDPROTECT»
}

/**
 * SOAP Method create«this.name.asType()»
 * @param «this.name» The serialized object data
 * @return String (object id) on success
 */
function create«this.name.asType()»($«this.name») {
  global $server;
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/create"+this.name.asType()).asProtectedRegionId()»
  $oidStr = $server->getDummyOid('«this.name.asType()»')->__toString();
  $«this.name»['oid'] = $oidStr;
  $response = $server->doCall('create', [$oidStr => $«this.name»]);
  return ['return' => $response->getValues()];
«ENDPROTECT»
}

/**
 * SOAP Method read«this.name.asType()»
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return tns:«this.name.asType()» on success
 */
function read«this.name.asType()»($oid, $depth=null) {
  global $server;
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/read"+this.name.asType()).asProtectedRegionId()»
  $params = ['oid' => $oid];
  if ($depth) { $params['depth'] = $depth; }
  $response = $server->doCall('read', $params);
  return ['return' => $response->getValue('object')];
«ENDPROTECT»
}

/**
 * SOAP Method update«this.name.asType()»
 * @param «this.name» The serialized object data
 * @return tns:«this.name.asType()» on success
 */
function update«this.name.asType()»($«this.name») {
  global $server;
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/update"+this.name.asType()).asProtectedRegionId()»
  $response = $server->doCall('update', [$«this.name»['oid'] => $«this.name»]);
  return ['return' => $response->getValues()];
«ENDPROTECT»
}

/**
 * SOAP Method delete«this.name.asType()»
 * @param oid The object id of the object to delete
 * @return String (object id) on success
 */
function delete«this.name.asType()»($oid) {
  global $server;
«PROTECT CSTART "// " CEND "" ID ("soap/Methods/delete"+this.name.asType()).asProtectedRegionId()»
  $response = $server->doCall('delete', ['oid' => $oid]);
  return ['return' => $response->getValue('oid')->__toString()];
«ENDPROTECT»
}
  «ENDIF-»
«ENDDEFINE»