import uml;
import Chronos;

extension org::openarchitectureware::uml2::profile::profiling;

extension common::util;
extension common::umlutils;

extension cartridge::Wcmf::extensions::globals;

/**
 * Add inherited values and associations to all nodes
 */
Void addDefaults(uml::Model this, uml::Profile profile) :
	info("--------------------------") ->
	info("M2M Start") ->
	info("--------------------------") ->
	info("Apply Chronos profile to "+this.name) ->
	this.applyProfile(profile) ->
	this.doTransformations() ->
	info("--------------------------") ->
	info("M2M End") ->
	info("--------------------------") ->
	this
;

Void addDefaults(uml::Model this) :
	info("--------------------------") ->
	info("M2M Start") ->
	info("--------------------------") ->
	info("Apply Chronos profile to "+this.name) ->
	this.applyProfile(ProfileFile()) ->
	this.doTransformations() ->
	info("--------------------------") ->
	info("M2M End") ->
	info("--------------------------") ->
	this
;

Void addChiNodeStereotype(uml::Model this):
	info("Adding ChiNode stereotype ...") ->
	this.allOwnedElements().typeSelect(uml::Class).addChiNodeStereotype()
;

Void addChiValueStereotype(uml::Model this):
	info("Adding ChiValue stereotype ...") ->
	this.allOwnedElements().typeSelect(ChiNode).attribute.select(e|e.getAppliedStereotype("Chronos::ChiValueRef") == null && e.getAppliedStereotype("Chronos::ChiValue") == null && e.association == null).addChiValueStereotype()
;

/**
 * Default transformations
 */
Void doTransformations(uml::Model this):
	this.addSuperclassNode() ->
	this.addSuperclassController() ->
	this.addNavigability() ->
	this.allOwnedElements().typeSelect(ChiNode).select(e|e.qualifiedName == RequiredNodeSuperClass()).first().
		postProcessNodes(ApplicationPackageAbsolute(this))
;

Void addSuperclassNode(uml::Model this):
	info("Adding Node superclass ...") ->
	this.allOwnedElements().typeSelect(ChiNode).select(e|e.superClass.isEmpty).addNodeSuperClass()
;

Void addSuperclassController(uml::Model this):
	info("Adding Controller superclass ...") ->
	this.allOwnedElements().typeSelect(ChiController).select(e|e.superClass.isEmpty).addControllerSuperClass()
;

Void addNavigability(uml::Model this):
	info("Adding navigability ...") ->
	this.allOwnedElements().typeSelect(uml::Association).select(e|e.memberEnd.forAll(f|f.isNavigable() == false)).addNavigability()
;

/**
 * PostProcessor delegates
 */
ChiNode postProcessNodes(ChiNode root, String package) :
	JAVA net.sourceforge.olympos.oaw.extend.PostProcessor.postProcessNodes(org.eclipse.uml2.uml.Class, java.lang.String)
;

Void addNodeSuperClass(uml::Class this) :
	let superClass = this.getModel().allOwnedElements().typeSelect(uml::Class).select(e|e.qualifiedName == RequiredNodeSuperClass()).first():
	superClass != this ? (
		let generalization = new uml::Generalization:
		info("Adding superclass " + superClass.name + " to: " + this.name) ->
		
		generalization.setGeneral(superClass) ->
		generalization.setSpecific(this)
	) :
		Void
;

Void addControllerSuperClass(uml::Class this) :
	let superClass = this.getModel().allOwnedElements().typeSelect(uml::Class).select(e|e.qualifiedName == RequiredControllerSuperClass()).first():
	superClass != this ? (
		let generalization = new uml::Generalization:
		info("Adding superclass " + superClass.name + " to: " + this.name) ->
		
		generalization.setGeneral(superClass) ->
		generalization.setSpecific(this)
	) :
		Void
;

Void addChiNodeStereotype(uml::Class this):
	info("Adding Stereotype ChiNode to " + this.name) ->
	this.applyStereotype("Chronos::ChiNode")
;

Void addChiValueStereotype(uml::Property this):
	info("Adding Stereotype ChiValue to " + this.getOwningClass().name + "." + this.name) ->
	this.applyStereotype("Chronos::ChiValue")
;

Void addNavigability(uml::Association this):
	info("Adding navigability to " + this.memberEnd.first().type.name + " - " + this.memberEnd.last().type.name) ->
	this.memberEnd.setIsNavigable(true)
;

Void renameProperties(uml::Model this):
	let ends = this.allOwnedElements().typeSelect(uml::Association).memberEnd:
	let doubleEnds = ends.select(e|ends.select(f|e.name == f.name).size >= 2):
	
	doubleEnds.renameUnique(doubleEnds, 0)
//	this.allOwnedElements().typeSelect(Chronos::ChiNode).renameProperties()
;

Void renameProperties(Chronos::ChiNode this):
	let ends = this.getAssociations().memberEnd:
	let doubleEnds = ends.select(e|ends.select(f|e.name == f.name).size >= 2):
	
	doubleEnds.renameUnique(doubleEnds, 0)
;

Void renameUnique(uml::Property this, Collection[uml::Property] otherProperties, int counter):
	!this.name.isNullOrEmpty() ? (
		let postfix = otherProperties.sortBy(e|e.name.getTrailingInt()).last().name.getTrailingInt():
		(postfix != null) && (postfix > counter) ? (
			info("Resetting counter to postfix " + postfix) ->
			this.renameUnique(otherProperties, postfix)
		) : (
			Void
		)
		->

		info("Old name: " + this.name + ", owning class: " + ((uml::NamedElement) this.owner).name) ->
		otherProperties.select(e|e.name == this.name).size > 1 ? (
			this.setName(this.name.replaceFirst("[0-9]*$", (counter).toString()))
			->
			this.renameUnique(otherProperties, counter + 1)
		) : (
			Void
		) ->
		info("New name: " + this.name + ", owning class: " + ((uml::NamedElement) this.owner).name)
	) : (
		Void
	)
;

String getTrailingNumber(String this):
	this.replaceAll("^.*?([0-9]*)$", "$1")
;

int getTrailingInt(String this):
	let numberString = this.getTrailingNumber():
	
	!numberString.isNullOrEmpty() ? (
		numberString.asInteger()
	) : (
		null
	)
;
